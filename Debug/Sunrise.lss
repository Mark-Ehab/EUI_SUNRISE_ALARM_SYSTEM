
Sunrise.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000234  00800060  00004a74  00004b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800294  00800294  00004d3c  2**0
                  ALLOC
  3 .stab         00004968  00000000  00000000  00004d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e7f  00000000  00000000  000096a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b523  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b6c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000f046  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001021c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000103dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000106d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_10>
      2c:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 24 	call	0x4966	; 0x4966 <main>
      8a:	0c 94 38 25 	jmp	0x4a70	; 0x4a70 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 24 	jmp	0x4990	; 0x4990 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 24 	jmp	0x49c8	; 0x49c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 24 	jmp	0x4990	; 0x4990 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 24 	jmp	0x49c8	; 0x49c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c4 24 	jmp	0x4988	; 0x4988 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e0 24 	jmp	0x49c0	; 0x49c0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c8 24 	jmp	0x4990	; 0x4990 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e4 24 	jmp	0x49c8	; 0x49c8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c8 24 	jmp	0x4990	; 0x4990 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e4 24 	jmp	0x49c8	; 0x49c8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c8 24 	jmp	0x4990	; 0x4990 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e4 24 	jmp	0x49c8	; 0x49c8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cc 24 	jmp	0x4998	; 0x4998 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e8 24 	jmp	0x49d0	; 0x49d0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c4 24 	jmp	0x4988	; 0x4988 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e0 24 	jmp	0x49c0	; 0x49c0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 58       	subi	r30, 0x8A	; 138
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_u8CalculateTimer0PreloadVal>:
 Description     : Calculate Timer0 preload value     			  
 Input Arguments : f32 Copy_f32Delay_s , u32 Copy_u32OverflowNum	      
 Return          : uint8							          
 =============================================================================================================*/
static uint8 TIMER0_u8CalculateTimer0PreloadVal(float32 Copy_f32Delay_s , float32 Copy_u32OverflowNum)
{	/* Variable to hold preload value to be put in TCNT0 register before Timer0 starts */
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	29 97       	sbiw	r28, 0x09	; 9
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	6a 83       	std	Y+2, r22	; 0x02
     e44:	7b 83       	std	Y+3, r23	; 0x03
     e46:	8c 83       	std	Y+4, r24	; 0x04
     e48:	9d 83       	std	Y+5, r25	; 0x05
     e4a:	2e 83       	std	Y+6, r18	; 0x06
     e4c:	3f 83       	std	Y+7, r19	; 0x07
     e4e:	48 87       	std	Y+8, r20	; 0x08
     e50:	59 87       	std	Y+9, r21	; 0x09
	uint8 Local_u8PreloadValue = 0; 	
     e52:	19 82       	std	Y+1, r1	; 0x01
	/* Check if passed delay is greater, less or equal to overflow time  */
	if(Copy_f32Delay_s > Global_f32Timer0OverflowTime)
     e54:	20 91 76 02 	lds	r18, 0x0276
     e58:	30 91 77 02 	lds	r19, 0x0277
     e5c:	40 91 78 02 	lds	r20, 0x0278
     e60:	50 91 79 02 	lds	r21, 0x0279
     e64:	6a 81       	ldd	r22, Y+2	; 0x02
     e66:	7b 81       	ldd	r23, Y+3	; 0x03
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e70:	18 16       	cp	r1, r24
     e72:	64 f5       	brge	.+88     	; 0xecc <TIMER0_u8CalculateTimer0PreloadVal+0x9e>
	{
		Local_u8PreloadValue = TIMER0_OVERFLOW_TICKS * ((float32)Copy_u32OverflowNum-(Copy_f32Delay_s/Global_f32Timer0OverflowTime));
     e74:	20 91 76 02 	lds	r18, 0x0276
     e78:	30 91 77 02 	lds	r19, 0x0277
     e7c:	40 91 78 02 	lds	r20, 0x0278
     e80:	50 91 79 02 	lds	r21, 0x0279
     e84:	6a 81       	ldd	r22, Y+2	; 0x02
     e86:	7b 81       	ldd	r23, Y+3	; 0x03
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9c 01       	movw	r18, r24
     e96:	ad 01       	movw	r20, r26
     e98:	6e 81       	ldd	r22, Y+6	; 0x06
     e9a:	7f 81       	ldd	r23, Y+7	; 0x07
     e9c:	88 85       	ldd	r24, Y+8	; 0x08
     e9e:	99 85       	ldd	r25, Y+9	; 0x09
     ea0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	bc 01       	movw	r22, r24
     eaa:	cd 01       	movw	r24, r26
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	4f e7       	ldi	r20, 0x7F	; 127
     eb2:	53 e4       	ldi	r21, 0x43	; 67
     eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	bc 01       	movw	r22, r24
     ebe:	cd 01       	movw	r24, r26
     ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	3d c0       	rjmp	.+122    	; 0xf46 <TIMER0_u8CalculateTimer0PreloadVal+0x118>
	}
	else if(Copy_f32Delay_s < Global_f32Timer0OverflowTime)
     ecc:	20 91 76 02 	lds	r18, 0x0276
     ed0:	30 91 77 02 	lds	r19, 0x0277
     ed4:	40 91 78 02 	lds	r20, 0x0278
     ed8:	50 91 79 02 	lds	r21, 0x0279
     edc:	6a 81       	ldd	r22, Y+2	; 0x02
     ede:	7b 81       	ldd	r23, Y+3	; 0x03
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ee8:	88 23       	and	r24, r24
     eea:	64 f5       	brge	.+88     	; 0xf44 <TIMER0_u8CalculateTimer0PreloadVal+0x116>
	{
		Local_u8PreloadValue = TIMER0_OVERFLOW_TICKS * (1.0f-(Copy_f32Delay_s/Global_f32Timer0OverflowTime));
     eec:	20 91 76 02 	lds	r18, 0x0276
     ef0:	30 91 77 02 	lds	r19, 0x0277
     ef4:	40 91 78 02 	lds	r20, 0x0278
     ef8:	50 91 79 02 	lds	r21, 0x0279
     efc:	6a 81       	ldd	r22, Y+2	; 0x02
     efe:	7b 81       	ldd	r23, Y+3	; 0x03
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	9d 81       	ldd	r25, Y+5	; 0x05
     f04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	9c 01       	movw	r18, r24
     f0e:	ad 01       	movw	r20, r26
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	80 e8       	ldi	r24, 0x80	; 128
     f16:	9f e3       	ldi	r25, 0x3F	; 63
     f18:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	4f e7       	ldi	r20, 0x7F	; 127
     f2a:	53 e4       	ldi	r21, 0x43	; 67
     f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <TIMER0_u8CalculateTimer0PreloadVal+0x118>
	}
	else
	{
		Local_u8PreloadValue = 0;
     f44:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8PreloadValue;
     f46:	89 81       	ldd	r24, Y+1	; 0x01
}
     f48:	29 96       	adiw	r28, 0x09	; 9
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <TIMER0_u8SetDutyCycle>:
 Description     : Set duty cycle value of PWM to be generated by Timer0        
 Input Arguments : u8 Copy_u8DutyCycle			 	       
 Return          : u8						                
 =============================================================================================================*/
static uint8 TIMER0_u8SetDutyCycle(uint8 Copy_u8DutyCycle)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <TIMER0_u8SetDutyCycle+0x6>
     f60:	0f 92       	push	r0
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	8b 83       	std	Y+3, r24	; 0x03
	/* Define Some Local Variables */
	uint8 Local_u8ErrorState = TRUE;     		/* A variable to hold function error status */
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_u8DutyCycle <= 100)
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	85 36       	cpi	r24, 0x65	; 101
     f70:	20 f4       	brcc	.+8      	; 0xf7a <TIMER0_u8SetDutyCycle+0x20>

			#endif
		#endif

		/* Set Calculated Compare Match Value in OC0 Register */
		TIMER0_vidSetCompareMatchValue(Local_u8CompareMatchValue);
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	0e 94 25 08 	call	0x104a	; 0x104a <TIMER0_vidSetCompareMatchValue>
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <TIMER0_u8SetDutyCycle+0x22>
	}
	else
	{
		/* Function is not working as expected */
		Local_u8ErrorState = FALSE;
     f7a:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <TIMER0_vidInit>:
		     config file						
Input Arguments : void						    
Return          : void						 
=============================================================================================================*/
void TIMER0_vidInit(void)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	/* =========================================================================================================
	                                          Set TIMER0 Operating Mode
	 =========================================================================================================*/
	/* Clear waveform generation bits */
	TCCR0 &= TIMER0_WAVEFORM_GENERATION_MASK;
     f92:	a3 e5       	ldi	r26, 0x53	; 83
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e3 e5       	ldi	r30, 0x53	; 83
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	87 7b       	andi	r24, 0xB7	; 183
     f9e:	8c 93       	st	X, r24
	/* Check selected operating mode For Timer0 From config file */
	#if   TIMER0_MODE == OVERFLOW_MODE
		/* Set Timer0 to work in overflow mode */
		TCCR0 |= TIMER0_OVERFLOW_MODE;
     fa0:	a3 e5       	ldi	r26, 0x53	; 83
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e3 e5       	ldi	r30, 0x53	; 83
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	8c 93       	st	X, r24

	/* =========================================================================================================
	                                    Set Timer0 Output Compare Match Pin Mode
	 =========================================================================================================*/
        /* Clear Timer0 Output Compare Match Pin Mode Bits */
	TCCR0 &= TIMER0_OUTPUT_COMPARE_PIN_MODE_MASK;
     fac:	a3 e5       	ldi	r26, 0x53	; 83
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e3 e5       	ldi	r30, 0x53	; 83
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7c       	andi	r24, 0xCF	; 207
     fb8:	8c 93       	st	X, r24
	/* Check selected operating mode For Timer0 From config file */
	#if   TIMER0_MODE == OVERFLOW_MODE || TIMER0_MODE == CTC_MODE
	      /* Check mode of Timer0 output compare match pin (Non PWM) */
              #if   TIMER0_NON_PWM_OUTPUT_COMPARE_PIN_MODE == DISCONNECTED
		    /* Disconnect Timer0 output compare match pin */
		    TCCR0 |= TIMER0_NON_PWM_OUTPUT_COMPARE_PIN_DISCONNECTED;
     fba:	a3 e5       	ldi	r26, 0x53	; 83
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e3 e5       	ldi	r30, 0x53	; 83
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8c 93       	st	X, r24
	                                Enable/Disable Timer0 Overflow and Compare Match Interrupts
		 =========================================================================================================
        Check if Timer0 overflow interrupt is enabled or not from config file */
       #if   TIMER0_OVERFLOW_INTERRUPT_ENABLE == ENABLE
		    /* Enable Timer0 Overflow Interrupt */
		    SET_BIT(TIMSK,TOIE0);
     fc6:	a9 e5       	ldi	r26, 0x59	; 89
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e9 e5       	ldi	r30, 0x59	; 89
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	8c 93       	st	X, r24
       #if   TIMER0_COMPARE_MATCH_INTERRUPT_ENABLE == ENABLE
		    /* Enable Timer0 Compare Match Interrupt */
		    SET_BIT(TIMSK,OCIE0);
       #elif TIMER0_COMPARE_MATCH_INTERRUPT_ENABLE == DISABLE
		    /* Disable Timer0 Compare Match Interrupt */
		    CLEAR_BIT(TIMSK,OCIE0);
     fd4:	a9 e5       	ldi	r26, 0x59	; 89
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e9 e5       	ldi	r30, 0x59	; 89
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8d 7f       	andi	r24, 0xFD	; 253
     fe0:	8c 93       	st	X, r24
       #else
       	       #error "Wrong Timer0 Compare Match Interrupt Enable Signal Configuration !"
       #endif
}
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <TIMER0_vidStart>:
 Description     : Start Timer0 by setting Timer0 prescaler selected from  config file					         
 Input Arguments : void						          
 Return          : void						        
 =============================================================================================================*/
void TIMER0_vidStart(void)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer0 Clock Selection Bits */
	TCCR0 &= TIMER0_CLK_MASK;
     ff0:	a3 e5       	ldi	r26, 0x53	; 83
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e3 e5       	ldi	r30, 0x53	; 83
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 7f       	andi	r24, 0xF8	; 248
     ffc:	8c 93       	st	X, r24
	#elif TIMER0_PRESCALER == CLK_DIV_BY_256
	        /* Set Timer0 clock to be system clock but divided by 256 prescaler */
		TCCR0 |= TIMER0_CLK_DIV_BY_256;
	#elif TIMER0_PRESCALER == CLK_DIV_BY_1024
	        /* Set Timer0 clock to be system clock but divided by 1024 prescaler */
		TCCR0 |= TIMER0_CLK_DIV_BY_1024;
     ffe:	a3 e5       	ldi	r26, 0x53	; 83
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e3 e5       	ldi	r30, 0x53	; 83
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	85 60       	ori	r24, 0x05	; 5
    100a:	8c 93       	st	X, r24
	      	/* Set Timer0 to work on external clock source on T0 pin (clock on rising edge) */
		TCCR0 |= TIMER0_EXT_CLK_RISING_EDGE;
	#else
        	#error "Wrong Prescaler Configuration !"
	#endif
}
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <TIMER0_vidStop>:
 Description     : Stop Timer0  					          
 Input Arguments : void						          
 Return          : void						          
 =============================================================================================================*/
void TIMER0_vidStop(void)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer0 Clock Selection Bits (Stop Timer0) */
	TCCR0 &= TIMER0_CLK_MASK;
    101a:	a3 e5       	ldi	r26, 0x53	; 83
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e5       	ldi	r30, 0x53	; 83
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	88 7f       	andi	r24, 0xF8	; 248
    1026:	8c 93       	st	X, r24
}
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <TIMER0_vidSetPreloadValue>:
 Description     : Set preload value					          
 Input Arguments : u8 Copy_u8PreloadValue                                       
 Return          : void                                		          
 =============================================================================================================*/
void TIMER0_vidSetPreloadValue(uint8 Copy_u8PreloadValue)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	0f 92       	push	r0
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	89 83       	std	Y+1, r24	; 0x01
	/* Set Timer0 Preload Value in TCNT0 Register */
	TCNT0 = Copy_u8PreloadValue;
    103a:	e2 e5       	ldi	r30, 0x52	; 82
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	80 83       	st	Z, r24
}
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <TIMER0_vidSetCompareMatchValue>:
 Description     : Set compare match value				          
 Input Arguments : u8 Copy_u8CompareMatchValue                                  
 Return          : void                                		          
 =============================================================================================================*/
void TIMER0_vidSetCompareMatchValue(uint8 Copy_u8CompareMatchValue)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	0f 92       	push	r0
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	89 83       	std	Y+1, r24	; 0x01
	/* Set Compare Match Value in OCR0 Register */
	OCR0 = Copy_u8CompareMatchValue;
    1056:	ec e5       	ldi	r30, 0x5C	; 92
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	80 83       	st	Z, r24
}
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <TIMER0_u8ReadTimerValue>:
 Description     : Read Timer/Counter0 Value				          
 Input Arguments : void                                                         
 Return          : u8	                                		          
 =============================================================================================================*/
uint8 TIMER0_u8ReadTimerValue(void)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
	/* Return Timer/Counter0 Value */
	return TCNT0;
    106e:	e2 e5       	ldi	r30, 0x52	; 82
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <TIMER0_vidEnableOverflowInterrupt>:
 Description     : Enable Timer0 Overflow Interrupt			          
 Input Arguments : void                                                         
 Return          : void                                		          
 =============================================================================================================*/
void TIMER0_vidEnableOverflowInterrupt(void)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	/* Enable Timer0 Overflow Interrupt */
	SET_BIT(TIMSK,TOIE0);
    1082:	a9 e5       	ldi	r26, 0x59	; 89
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e9 e5       	ldi	r30, 0x59	; 89
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	8c 93       	st	X, r24
}
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <TIMER0_vidDisableOverflowInterrupt>:
 Description     : Disable Timer0 Overflow Interrupt
 Input Arguments : void
 Return          : void
 =============================================================================================================*/
void TIMER0_vidDisableOverflowInterrupt(void)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer0 Overflow Interrupt */
	CLEAR_BIT(TIMSK,TOIE0);
    109e:	a9 e5       	ldi	r26, 0x59	; 89
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e9 e5       	ldi	r30, 0x59	; 89
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8e 7f       	andi	r24, 0xFE	; 254
    10aa:	8c 93       	st	X, r24
}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <TIMER0_vidEnableCompareMatchInterrupt>:
 Description     : Enable Timer0 Compare Match Interrupt		          
 Input Arguments : void                            		    	          
 Return          : void                       		                  
 =============================================================================================================*/
void TIMER0_vidEnableCompareMatchInterrupt(void)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
	/* Enable Timer0 Compare Match Interrupt */
	SET_BIT(TIMSK,OCIE0);
    10ba:	a9 e5       	ldi	r26, 0x59	; 89
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e9 e5       	ldi	r30, 0x59	; 89
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	82 60       	ori	r24, 0x02	; 2
    10c6:	8c 93       	st	X, r24
}
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <TIMER0_vidDisableCompareMatchInterrupt>:
 Description     : Disable Timer0 Compare Match Interrupt		          
 Input Arguments : void                       				  
 Return          : void                    			                  
 =============================================================================================================*/
void TIMER0_vidDisableCompareMatchInterrupt(void)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer0 Compare Match Interrupt */
	CLEAR_BIT(TIMSK,OCIE0);
    10d6:	a9 e5       	ldi	r26, 0x59	; 89
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e9 e5       	ldi	r30, 0x59	; 89
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8d 7f       	andi	r24, 0xFD	; 253
    10e2:	8c 93       	st	X, r24
}
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <TIMER0_u8SetOverflowCallback>:
		     immediately once Timer0 overflow ISR is triggered		  
 Input Arguments : void(*Copy_pvTIMER0OverflowFunc)(void)		          
 Return          : u8						                  
 =============================================================================================================*/
uint8 TIMER0_u8SetOverflowCallback(void(*Copy_pvTIMER0OverflowFunc)(void))
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <TIMER0_u8SetOverflowCallback+0x6>
    10f0:	0f 92       	push	r0
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	9b 83       	std	Y+3, r25	; 0x03
    10f8:	8a 83       	std	Y+2, r24	; 0x02
	/* Define Some Local Variables */
	uint8 Local_u8ErrorState = TRUE;     /* A variable to hold function error status */
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	89 83       	std	Y+1, r24	; 0x01

	/* Check if passed pointer to function is null pointer or not */
	if(Copy_pvTIMER0OverflowFunc == NULL)
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	11 f4       	brne	.+4      	; 0x110a <TIMER0_u8SetOverflowCallback+0x20>
	{
		/* Passed Pointer is NULL Pointer */
		Local_u8ErrorState = NULL;
    1106:	19 82       	std	Y+1, r1	; 0x01
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <TIMER0_u8SetOverflowCallback+0x2c>
	}
	else
	{
		/* Register Timer0 Overflow Callback Function */
		TIMER0_pvOverflowCallbakFunc = Copy_pvTIMER0OverflowFunc;
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	9b 81       	ldd	r25, Y+3	; 0x03
    110e:	90 93 95 02 	sts	0x0295, r25
    1112:	80 93 94 02 	sts	0x0294, r24
	}

	return Local_u8ErrorState;
    1116:	89 81       	ldd	r24, Y+1	; 0x01
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <TIMER0_u8SetCompareMatchCallback>:
		     immediately once Timer0 compare match ISR is triggered	  
 Input Arguments : void(*Copy_pvTIMER0CompareMatchFunc)(void)		          
 Return          : u8						                  
 =============================================================================================================*/
uint8 TIMER0_u8SetCompareMatchCallback(void(*Copy_pvTIMER0CompareMatchFunc)(void))
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <TIMER0_u8SetCompareMatchCallback+0x6>
    112a:	0f 92       	push	r0
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	9b 83       	std	Y+3, r25	; 0x03
    1132:	8a 83       	std	Y+2, r24	; 0x02
	/* Define Some Local Variables */
	uint8 Local_u8ErrorStatus = TRUE;     /* A variable to hold function error status */
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01

	/* Check if passed pointer to function is null pointer or not */
	if(Copy_pvTIMER0CompareMatchFunc == NULL)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	11 f4       	brne	.+4      	; 0x1144 <TIMER0_u8SetCompareMatchCallback+0x20>
	{
		/* Passed Pointer is NULL Pointer */
		Local_u8ErrorStatus = NULL;
    1140:	19 82       	std	Y+1, r1	; 0x01
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <TIMER0_u8SetCompareMatchCallback+0x2c>
	}
	else
	{
		/* Register Timer0 Overflow Callback Function */
		TIMER0_pvComapareMatchCallbakFunc = Copy_pvTIMER0CompareMatchFunc;
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	9b 81       	ldd	r25, Y+3	; 0x03
    1148:	90 93 97 02 	sts	0x0297, r25
    114c:	80 93 96 02 	sts	0x0296, r24
	}

	return Local_u8ErrorStatus;
    1150:	89 81       	ldd	r24, Y+1	; 0x01
}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <TIMER0_u8SetBusyWait_ms>:
 Description     : A function used to delay the processor for some time in milli-second based on passed value of time in milli-second   
 Input Arguments : u32 Copy_u32DelayTime_ms				          
 Return          : u8                                                	          
 =============================================================================================================*/
uint8 TIMER0_u8SetBusyWait_ms(uint32 Copy_u32DelayTime_ms)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	62 97       	sbiw	r28, 0x12	; 18
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	6f 87       	std	Y+15, r22	; 0x0f
    1174:	78 8b       	std	Y+16, r23	; 0x10
    1176:	89 8b       	std	Y+17, r24	; 0x11
    1178:	9a 8b       	std	Y+18, r25	; 0x12
	/* Define Some Local Variables */
	uint8 Local_u8ErrorStatus = TRUE;     		/* A variable to hold function error status */
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	8e 87       	std	Y+14, r24	; 0x0e
	{
		float32 Local_f32DelayTime_s;           /* A variable to hold passed delay time in seconds */

		uint32 Local_u32OverflowNum;		/* A variable to hold number of overflows required for Timer0 to achieve passed delay */

		uint32 Local_u32OverflowCounter = 0;	/* A variable to count the number of overflows */
    117e:	1a 82       	std	Y+2, r1	; 0x02
    1180:	1b 82       	std	Y+3, r1	; 0x03
    1182:	1c 82       	std	Y+4, r1	; 0x04
    1184:	1d 82       	std	Y+5, r1	; 0x05

		uint8 Local_u8PreloadValue = 0 ;		/* A variable to hold preload value to be calculated */
    1186:	19 82       	std	Y+1, r1	; 0x01

		/* Convert passed delay from milli-second to second */
		Local_f32DelayTime_s = (float32)Copy_u32DelayTime_ms * 0.001f;
    1188:	6f 85       	ldd	r22, Y+15	; 0x0f
    118a:	78 89       	ldd	r23, Y+16	; 0x10
    118c:	89 89       	ldd	r24, Y+17	; 0x11
    118e:	9a 89       	ldd	r25, Y+18	; 0x12
    1190:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	2f e6       	ldi	r18, 0x6F	; 111
    119e:	32 e1       	ldi	r19, 0x12	; 18
    11a0:	43 e8       	ldi	r20, 0x83	; 131
    11a2:	5a e3       	ldi	r21, 0x3A	; 58
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	8a 87       	std	Y+10, r24	; 0x0a
    11ae:	9b 87       	std	Y+11, r25	; 0x0b
    11b0:	ac 87       	std	Y+12, r26	; 0x0c
    11b2:	bd 87       	std	Y+13, r27	; 0x0d

		/* Get number of overflows required for Timer0 to reach passed delay */
		/*Local_u32OverflowNum = SERV_u32CeilDev(Local_f32DelayTime_s,Global_f32Timer0OverflowTime);*/

		/* Get Preload Value */
		Local_u8PreloadValue = TIMER0_u8CalculateTimer0PreloadVal(Local_f32DelayTime_s,Local_u32OverflowNum);
    11b4:	6e 81       	ldd	r22, Y+6	; 0x06
    11b6:	7f 81       	ldd	r23, Y+7	; 0x07
    11b8:	88 85       	ldd	r24, Y+8	; 0x08
    11ba:	99 85       	ldd	r25, Y+9	; 0x09
    11bc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    11c0:	9b 01       	movw	r18, r22
    11c2:	ac 01       	movw	r20, r24
    11c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    11c8:	ac 85       	ldd	r26, Y+12	; 0x0c
    11ca:	bd 85       	ldd	r27, Y+13	; 0x0d
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 17 07 	call	0xe2e	; 0xe2e <TIMER0_u8CalculateTimer0PreloadVal>
    11d4:	89 83       	std	Y+1, r24	; 0x01

		/* Set Timer0 Preload Value Before Timer0 Starts */
		TIMER0_vidSetPreloadValue(Local_u8PreloadValue);
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	0e 94 17 08 	call	0x102e	; 0x102e <TIMER0_vidSetPreloadValue>

		/* Start Timer0 */
		TIMER0_vidStart();
    11dc:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <TIMER0_vidStart>
    11e0:	1b c0       	rjmp	.+54     	; 0x1218 <TIMER0_u8SetBusyWait_ms+0xba>

		/* Wait until the delay is finished */
		while(Local_u32OverflowCounter < Local_u32OverflowNum)
		{
			/* Wait until TOV0 Flag is set by hardware */
			while(GET_BIT(TIFR,TOV0) != 1);
    11e2:	e8 e5       	ldi	r30, 0x58	; 88
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	81 70       	andi	r24, 0x01	; 1
    11ee:	90 70       	andi	r25, 0x00	; 0
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	b9 f3       	breq	.-18     	; 0x11e2 <TIMER0_u8SetBusyWait_ms+0x84>

			/* Clear TOV0 Flag by writing 1 to its bit in TIFR Register */
			SET_BIT(TIFR,TOV0);
    11f4:	a8 e5       	ldi	r26, 0x58	; 88
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e8 e5       	ldi	r30, 0x58	; 88
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	81 60       	ori	r24, 0x01	; 1
    1200:	8c 93       	st	X, r24

			/* Increment Overflow Counter */
			Local_u32OverflowCounter++;
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	9b 81       	ldd	r25, Y+3	; 0x03
    1206:	ac 81       	ldd	r26, Y+4	; 0x04
    1208:	bd 81       	ldd	r27, Y+5	; 0x05
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	a1 1d       	adc	r26, r1
    120e:	b1 1d       	adc	r27, r1
    1210:	8a 83       	std	Y+2, r24	; 0x02
    1212:	9b 83       	std	Y+3, r25	; 0x03
    1214:	ac 83       	std	Y+4, r26	; 0x04
    1216:	bd 83       	std	Y+5, r27	; 0x05

		/* Start Timer0 */
		TIMER0_vidStart();

		/* Wait until the delay is finished */
		while(Local_u32OverflowCounter < Local_u32OverflowNum)
    1218:	2a 81       	ldd	r18, Y+2	; 0x02
    121a:	3b 81       	ldd	r19, Y+3	; 0x03
    121c:	4c 81       	ldd	r20, Y+4	; 0x04
    121e:	5d 81       	ldd	r21, Y+5	; 0x05
    1220:	8e 81       	ldd	r24, Y+6	; 0x06
    1222:	9f 81       	ldd	r25, Y+7	; 0x07
    1224:	a8 85       	ldd	r26, Y+8	; 0x08
    1226:	b9 85       	ldd	r27, Y+9	; 0x09
    1228:	28 17       	cp	r18, r24
    122a:	39 07       	cpc	r19, r25
    122c:	4a 07       	cpc	r20, r26
    122e:	5b 07       	cpc	r21, r27
    1230:	c0 f2       	brcs	.-80     	; 0x11e2 <TIMER0_u8SetBusyWait_ms+0x84>
			/* Increment Overflow Counter */
			Local_u32OverflowCounter++;
		}

		/* Stop Timer0 */
		TIMER0_vidStop();
    1232:	0e 94 09 08 	call	0x1012	; 0x1012 <TIMER0_vidStop>
	{
		/* Function is not working as expected */
		Local_u8ErrorStatus = FALSE;
	}

	return Local_u8ErrorStatus;
    1236:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    1238:	62 96       	adiw	r28, 0x12	; 18
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <TIMER0_u8StartPWM>:
 Description     : Start to generate PWM from Timer0			          
 Input Arguments : uu8 Copy_u8DutyCyclePercentage			          
 Return          : void						          
 =============================================================================================================*/
uint8 TIMER0_u8StartPWM(uint8 Copy_u8DutyCyclePercentage)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <TIMER0_u8StartPWM+0x6>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	8a 83       	std	Y+2, r24	; 0x02
	/* Define Some Local Variables */
	uint8 Local_u8ErrorStatus = TRUE;     		/* A variable to hold function error status */
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8DutyCyclePercentage <= 100)
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	85 36       	cpi	r24, 0x65	; 101
    125e:	30 f4       	brcc	.+12     	; 0x126c <TIMER0_u8StartPWM+0x22>
	{
		/* Set Duty Cycle Percentage */
		TIMER0_u8SetDutyCycle(Copy_u8DutyCyclePercentage);
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	0e 94 ad 07 	call	0xf5a	; 0xf5a <TIMER0_u8SetDutyCycle>

		/* Start Timer */
		TIMER0_vidStart();
    1266:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <TIMER0_vidStart>
    126a:	01 c0       	rjmp	.+2      	; 0x126e <TIMER0_u8StartPWM+0x24>
	}
	else
	{
		/* Function is not working as expected */
		Local_u8ErrorStatus = FALSE;
    126c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorStatus;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <TIMER0_vidClearOvfFlag>:
 Description     : Clear Timer0 overflow flag
 Input Arguments : void
 Return          : void
 =============================================================================================================*/
void TIMER0_vidClearOvfFlag(void)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
	  /* Clear TOV0 bit in TIFR Register by Writing Logical 1 to it */
	  TIFR |= (1 << TOV0);
    1282:	a8 e5       	ldi	r26, 0x58	; 88
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e8 e5       	ldi	r30, 0x58	; 88
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	81 60       	ori	r24, 0x01	; 1
    128e:	8c 93       	st	X, r24
}
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <__vector_11>:
/* =============================================================================================================
 				        Timer/Counter0 Overflow Interrupt
 =============================================================================================================*/

ISR(VECTOR_11)
{
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	2f 93       	push	r18
    12a2:	3f 93       	push	r19
    12a4:	4f 93       	push	r20
    12a6:	5f 93       	push	r21
    12a8:	6f 93       	push	r22
    12aa:	7f 93       	push	r23
    12ac:	8f 93       	push	r24
    12ae:	9f 93       	push	r25
    12b0:	af 93       	push	r26
    12b2:	bf 93       	push	r27
    12b4:	ef 93       	push	r30
    12b6:	ff 93       	push	r31
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	/*Check if Timer0 overflow function is registered or not*/
	if(TIMER0_pvOverflowCallbakFunc != NULL)
    12c0:	80 91 94 02 	lds	r24, 0x0294
    12c4:	90 91 95 02 	lds	r25, 0x0295
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	29 f0       	breq	.+10     	; 0x12d6 <__vector_11+0x40>
	{
		/*Invoke Timer0 overflow function*/
		TIMER0_pvOverflowCallbakFunc();
    12cc:	e0 91 94 02 	lds	r30, 0x0294
    12d0:	f0 91 95 02 	lds	r31, 0x0295
    12d4:	09 95       	icall
	}
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	ff 91       	pop	r31
    12dc:	ef 91       	pop	r30
    12de:	bf 91       	pop	r27
    12e0:	af 91       	pop	r26
    12e2:	9f 91       	pop	r25
    12e4:	8f 91       	pop	r24
    12e6:	7f 91       	pop	r23
    12e8:	6f 91       	pop	r22
    12ea:	5f 91       	pop	r21
    12ec:	4f 91       	pop	r20
    12ee:	3f 91       	pop	r19
    12f0:	2f 91       	pop	r18
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <__vector_10>:

/* =============================================================================================================
				     Timer/Counter0 Compare Match Interrupt
 =============================================================================================================*/
ISR(VECTOR_10)
{
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	/* Check if Timer0 compare match function is registered or not */
	if(TIMER0_pvComapareMatchCallbakFunc != NULL)
    1326:	80 91 96 02 	lds	r24, 0x0296
    132a:	90 91 97 02 	lds	r25, 0x0297
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	29 f0       	breq	.+10     	; 0x133c <__vector_10+0x40>
	{
		/* Invoke Timer0 compare match function */
		TIMER0_pvComapareMatchCallbakFunc();
    1332:	e0 91 96 02 	lds	r30, 0x0296
    1336:	f0 91 97 02 	lds	r31, 0x0297
    133a:	09 95       	icall
	}
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	bf 91       	pop	r27
    1346:	af 91       	pop	r26
    1348:	9f 91       	pop	r25
    134a:	8f 91       	pop	r24
    134c:	7f 91       	pop	r23
    134e:	6f 91       	pop	r22
    1350:	5f 91       	pop	r21
    1352:	4f 91       	pop	r20
    1354:	3f 91       	pop	r19
    1356:	2f 91       	pop	r18
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	0f 90       	pop	r0
    135e:	1f 90       	pop	r1
    1360:	18 95       	reti

00001362 <GlobalInterrupt_enable>:
/*
Enabling Global Interrupt Bit, it is necessary for the initialization for each maskable Interrupts
Arguments:			void
Return:				void
*/
void GlobalInterrupt_enable(void){
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , GLOBAL_INTERRUPT_BIT);
    136a:	af e5       	ldi	r26, 0x5F	; 95
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ef e5       	ldi	r30, 0x5F	; 95
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	80 68       	ori	r24, 0x80	; 128
    1376:	8c 93       	st	X, r24
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <Ext_Int0_Enable>:
Enable for INT0 External Interrupt
Arguments:			The interrupt sense control Mode.
Return:				void
*/

void Ext_Int0_Enable(uint8 Mode){
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	0f 92       	push	r0
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	89 83       	std	Y+1, r24	; 0x01
	DIO_setupPinDirection(PORTD, PIN2_ID, PIN_INPUT);
    138a:	e2 e3       	ldi	r30, 0x32	; 50
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	62 e0       	ldi	r22, 0x02	; 2
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	GICR|=INT0_ENABLE;
    1398:	ab e5       	ldi	r26, 0x5B	; 91
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	eb e5       	ldi	r30, 0x5B	; 91
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 64       	ori	r24, 0x40	; 64
    13a4:	8c 93       	st	X, r24
	MCUCR = ((MCUCR & 0xFC) | Mode);
    13a6:	a5 e5       	ldi	r26, 0x55	; 85
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e5       	ldi	r30, 0x55	; 85
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	98 2f       	mov	r25, r24
    13b2:	9c 7f       	andi	r25, 0xFC	; 252
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	89 2b       	or	r24, r25
    13b8:	8c 93       	st	X, r24
}
    13ba:	0f 90       	pop	r0
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <Ext_Int0_Disable>:

 /*Disable for INT0 External Interrupt*/
void Ext_Int0_Disable(){
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
	GICR&=~INT0_ENABLE;
    13ca:	ab e5       	ldi	r26, 0x5B	; 91
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	eb e5       	ldi	r30, 0x5B	; 91
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8f 7b       	andi	r24, 0xBF	; 191
    13d6:	8c 93       	st	X, r24
}
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <Ext_Int1_Enable>:
/*
Enable for INT1 External Interrupt
Arguments:			The interrupt sense control Mode.
Return:				void
*/
void Ext_Int1_Enable(uint8 Mode){
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
	DIO_setupPinDirection(PORTD, PIN3_ID, PIN_INPUT);
    13ea:	e2 e3       	ldi	r30, 0x32	; 50
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	63 e0       	ldi	r22, 0x03	; 3
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	GICR|=INT1_ENABLE;
    13f8:	ab e5       	ldi	r26, 0x5B	; 91
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	eb e5       	ldi	r30, 0x5B	; 91
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 68       	ori	r24, 0x80	; 128
    1404:	8c 93       	st	X, r24
	MCUCR = ((MCUCR & 0xF3) | (Mode<<2));
    1406:	a5 e5       	ldi	r26, 0x55	; 85
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e5 e5       	ldi	r30, 0x55	; 85
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	28 2f       	mov	r18, r24
    1412:	23 7f       	andi	r18, 0xF3	; 243
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	82 2b       	or	r24, r18
    1424:	8c 93       	st	X, r24
}
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <Ext_Int1_Disable>:

 /*Disable for INT1 External Interrupt*/
void Ext_Int1_Disable(){
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
	GICR&=~INT1_ENABLE;
    1436:	ab e5       	ldi	r26, 0x5B	; 91
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	eb e5       	ldi	r30, 0x5B	; 91
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8f 77       	andi	r24, 0x7F	; 127
    1442:	8c 93       	st	X, r24
}
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <Ext_Int2_Enable>:
/*
Enable for INT2 External Interrupt
Arguments:			The interrupt sense control Mode.
Return:				void
*/
void Ext_Int2_Enable(uint8 Mode){
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	0f 92       	push	r0
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	89 83       	std	Y+1, r24	; 0x01
	DIO_setupPinDirection(PORTB, PIN2_ID, PIN_INPUT);
    1456:	e8 e3       	ldi	r30, 0x38	; 56
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	62 e0       	ldi	r22, 0x02	; 2
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	GICR|=INT2_ENABLE;
    1464:	ab e5       	ldi	r26, 0x5B	; 91
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	eb e5       	ldi	r30, 0x5B	; 91
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	80 62       	ori	r24, 0x20	; 32
    1470:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,Mode);
    1472:	a4 e5       	ldi	r26, 0x54	; 84
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e4 e5       	ldi	r30, 0x54	; 84
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <Ext_Int2_Enable+0x46>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <Ext_Int2_Enable+0x42>
    1494:	84 2b       	or	r24, r20
    1496:	8c 93       	st	X, r24
}
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <Ext_Int2_Disable>:
 /*Disable for INT0 External Interrupt*/
void Ext_Int2_Disable(){
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	GICR&=~INT2_ENABLE;
    14a8:	ab e5       	ldi	r26, 0x5B	; 91
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	eb e5       	ldi	r30, 0x5B	; 91
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8f 7d       	andi	r24, 0xDF	; 223
    14b4:	8c 93       	st	X, r24
}
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <DIO_setupPinDirection>:
Arguments:  port_number: The port number to which the pin belongs (PORTA_ID, PORTB_ID, etc.).
			pin_number: The pin number within the port.
			direction: The desired direction of the pin (PIN_INPUT or PIN_OUTPUT).
Return:		void
 */
void DIO_setupPinDirection(uint8 port_number, uint8 pin_number,DIO_PinDirectionType direction) {
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_setupPinDirection+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <DIO_setupPinDirection+0x8>
    14c4:	0f 92       	push	r0
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	6a 83       	std	Y+2, r22	; 0x02
    14ce:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_number >= NUMBER_OF_PORTS) || (pin_number >= NUMBER_OF_PINS_PER_PORT)) {
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	84 30       	cpi	r24, 0x04	; 4
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <DIO_setupPinDirection+0x1c>
    14d6:	d5 c0       	rjmp	.+426    	; 0x1682 <DIO_setupPinDirection+0x1c6>
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <DIO_setupPinDirection+0x24>
    14de:	d1 c0       	rjmp	.+418    	; 0x1682 <DIO_setupPinDirection+0x1c6>
	} else {
		switch (port_number) {
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3d 83       	std	Y+5, r19	; 0x05
    14e8:	2c 83       	std	Y+4, r18	; 0x04
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <DIO_setupPinDirection+0x3a>
    14f4:	43 c0       	rjmp	.+134    	; 0x157c <DIO_setupPinDirection+0xc0>
    14f6:	2c 81       	ldd	r18, Y+4	; 0x04
    14f8:	3d 81       	ldd	r19, Y+5	; 0x05
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	2c f4       	brge	.+10     	; 0x150a <DIO_setupPinDirection+0x4e>
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	9d 81       	ldd	r25, Y+5	; 0x05
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	71 f0       	breq	.+28     	; 0x1524 <DIO_setupPinDirection+0x68>
    1508:	bc c0       	rjmp	.+376    	; 0x1682 <DIO_setupPinDirection+0x1c6>
    150a:	2c 81       	ldd	r18, Y+4	; 0x04
    150c:	3d 81       	ldd	r19, Y+5	; 0x05
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <DIO_setupPinDirection+0x5a>
    1514:	5f c0       	rjmp	.+190    	; 0x15d4 <DIO_setupPinDirection+0x118>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <DIO_setupPinDirection+0x66>
    1520:	85 c0       	rjmp	.+266    	; 0x162c <DIO_setupPinDirection+0x170>
    1522:	af c0       	rjmp	.+350    	; 0x1682 <DIO_setupPinDirection+0x1c6>
		case (PORTA_ID):
			if (direction == PIN_OUTPUT) {
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	a1 f4       	brne	.+40     	; 0x1552 <DIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_number);
    152a:	aa e3       	ldi	r26, 0x3A	; 58
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ea e3       	ldi	r30, 0x3A	; 58
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_setupPinDirection+0x8c>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_setupPinDirection+0x88>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	98 c0       	rjmp	.+304    	; 0x1682 <DIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_number);
    1552:	aa e3       	ldi	r26, 0x3A	; 58
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ea e3       	ldi	r30, 0x3A	; 58
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_setupPinDirection+0xb4>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_setupPinDirection+0xb0>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	83 c0       	rjmp	.+262    	; 0x1682 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case (PORTB_ID):
			if (direction == PIN_OUTPUT) {
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	a1 f4       	brne	.+40     	; 0x15aa <DIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_number);
    1582:	a7 e3       	ldi	r26, 0x37	; 55
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e7 e3       	ldi	r30, 0x37	; 55
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_setupPinDirection+0xe4>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_setupPinDirection+0xe0>
    15a4:	84 2b       	or	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	6c c0       	rjmp	.+216    	; 0x1682 <DIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_number);
    15aa:	a7 e3       	ldi	r26, 0x37	; 55
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e7 e3       	ldi	r30, 0x37	; 55
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_setupPinDirection+0x10c>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_setupPinDirection+0x108>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	57 c0       	rjmp	.+174    	; 0x1682 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case (PORTC_ID):
			if (direction == PIN_OUTPUT) {
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	a1 f4       	brne	.+40     	; 0x1602 <DIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_number);
    15da:	a4 e3       	ldi	r26, 0x34	; 52
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e4 e3       	ldi	r30, 0x34	; 52
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <DIO_setupPinDirection+0x13c>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <DIO_setupPinDirection+0x138>
    15fc:	84 2b       	or	r24, r20
    15fe:	8c 93       	st	X, r24
    1600:	40 c0       	rjmp	.+128    	; 0x1682 <DIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_number);
    1602:	a4 e3       	ldi	r26, 0x34	; 52
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e4 e3       	ldi	r30, 0x34	; 52
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <DIO_setupPinDirection+0x164>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <DIO_setupPinDirection+0x160>
    1624:	80 95       	com	r24
    1626:	84 23       	and	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	2b c0       	rjmp	.+86     	; 0x1682 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case (PORTD_ID):
			if (direction == PIN_OUTPUT) {
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	a1 f4       	brne	.+40     	; 0x165a <DIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_number);
    1632:	a1 e3       	ldi	r26, 0x31	; 49
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e1 e3       	ldi	r30, 0x31	; 49
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_setupPinDirection+0x194>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_setupPinDirection+0x190>
    1654:	84 2b       	or	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	14 c0       	rjmp	.+40     	; 0x1682 <DIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_number);
    165a:	a1 e3       	ldi	r26, 0x31	; 49
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e1 e3       	ldi	r30, 0x31	; 49
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_setupPinDirection+0x1bc>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_setupPinDirection+0x1b8>
    167c:	80 95       	com	r24
    167e:	84 23       	and	r24, r20
    1680:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <DIO_setupPortDirection>:
Configure the direction (input/output) of an entire port.
Arguments:  port_number: The port number to configure (PORTA_ID, PORTB_ID, etc.).
			direction: The desired direction of the entire port (PORT_INPUT or PORT_OUTPUT).
Return:     void
 */
void DIO_setupPortDirection(uint8 port_number, DIO_PinDirectionType direction) {
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <DIO_setupPortDirection+0x6>
    1698:	00 d0       	rcall	.+0      	; 0x169a <DIO_setupPortDirection+0x8>
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_number >= NUMBER_OF_PORTS)) {
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	84 30       	cpi	r24, 0x04	; 4
    16a6:	90 f5       	brcc	.+100    	; 0x170c <DIO_setupPortDirection+0x7a>

	} else {
		switch (port_number) {
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	3c 83       	std	Y+4, r19	; 0x04
    16b0:	2b 83       	std	Y+3, r18	; 0x03
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	91 05       	cpc	r25, r1
    16ba:	d1 f0       	breq	.+52     	; 0x16f0 <DIO_setupPortDirection+0x5e>
    16bc:	2b 81       	ldd	r18, Y+3	; 0x03
    16be:	3c 81       	ldd	r19, Y+4	; 0x04
    16c0:	22 30       	cpi	r18, 0x02	; 2
    16c2:	31 05       	cpc	r19, r1
    16c4:	2c f4       	brge	.+10     	; 0x16d0 <DIO_setupPortDirection+0x3e>
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	61 f0       	breq	.+24     	; 0x16e6 <DIO_setupPortDirection+0x54>
    16ce:	1e c0       	rjmp	.+60     	; 0x170c <DIO_setupPortDirection+0x7a>
    16d0:	2b 81       	ldd	r18, Y+3	; 0x03
    16d2:	3c 81       	ldd	r19, Y+4	; 0x04
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	81 f0       	breq	.+32     	; 0x16fa <DIO_setupPortDirection+0x68>
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	83 30       	cpi	r24, 0x03	; 3
    16e0:	91 05       	cpc	r25, r1
    16e2:	81 f0       	breq	.+32     	; 0x1704 <DIO_setupPortDirection+0x72>
    16e4:	13 c0       	rjmp	.+38     	; 0x170c <DIO_setupPortDirection+0x7a>
		case (PORTA_ID):
			DDRA = direction;
    16e6:	ea e3       	ldi	r30, 0x3A	; 58
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	80 83       	st	Z, r24
    16ee:	0e c0       	rjmp	.+28     	; 0x170c <DIO_setupPortDirection+0x7a>
			break;
		case (PORTB_ID):
			DDRB = direction;
    16f0:	e7 e3       	ldi	r30, 0x37	; 55
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	80 83       	st	Z, r24
    16f8:	09 c0       	rjmp	.+18     	; 0x170c <DIO_setupPortDirection+0x7a>
			break;
		case (PORTC_ID):
			DDRC = direction;
    16fa:	e4 e3       	ldi	r30, 0x34	; 52
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	80 83       	st	Z, r24
    1702:	04 c0       	rjmp	.+8      	; 0x170c <DIO_setupPortDirection+0x7a>
			break;
		case (PORTD_ID):
			DDRD = direction;
    1704:	e1 e3       	ldi	r30, 0x31	; 49
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	80 83       	st	Z, r24
			break;
		}
	}
}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <DIO_writePin>:
 Arguments:  The port number to which the pin belongs (PORTA_ID, PORTB_ID, etc.).
 			The pin number within the port.
 			The value to write to the pin (LOGIC_HIGH or LOGIC_LOW).
Return:		void
*/
void DIO_writePin(uint8 port_number, uint8 pin_number, uint8 value) {
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <DIO_writePin+0x6>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <DIO_writePin+0x8>
    1722:	0f 92       	push	r0
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	6a 83       	std	Y+2, r22	; 0x02
    172c:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_number >= NUMBER_OF_PORTS) || (pin_number >= NUMBER_OF_PINS_PER_PORT)) {
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	84 30       	cpi	r24, 0x04	; 4
    1732:	08 f0       	brcs	.+2      	; 0x1736 <DIO_writePin+0x1c>
    1734:	d5 c0       	rjmp	.+426    	; 0x18e0 <DIO_writePin+0x1c6>
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	88 30       	cpi	r24, 0x08	; 8
    173a:	08 f0       	brcs	.+2      	; 0x173e <DIO_writePin+0x24>
    173c:	d1 c0       	rjmp	.+418    	; 0x18e0 <DIO_writePin+0x1c6>

	} else {
		switch (port_number) {
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	3d 83       	std	Y+5, r19	; 0x05
    1746:	2c 83       	std	Y+4, r18	; 0x04
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	91 05       	cpc	r25, r1
    1750:	09 f4       	brne	.+2      	; 0x1754 <DIO_writePin+0x3a>
    1752:	43 c0       	rjmp	.+134    	; 0x17da <DIO_writePin+0xc0>
    1754:	2c 81       	ldd	r18, Y+4	; 0x04
    1756:	3d 81       	ldd	r19, Y+5	; 0x05
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	2c f4       	brge	.+10     	; 0x1768 <DIO_writePin+0x4e>
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	71 f0       	breq	.+28     	; 0x1782 <DIO_writePin+0x68>
    1766:	bc c0       	rjmp	.+376    	; 0x18e0 <DIO_writePin+0x1c6>
    1768:	2c 81       	ldd	r18, Y+4	; 0x04
    176a:	3d 81       	ldd	r19, Y+5	; 0x05
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	09 f4       	brne	.+2      	; 0x1774 <DIO_writePin+0x5a>
    1772:	5f c0       	rjmp	.+190    	; 0x1832 <DIO_writePin+0x118>
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	9d 81       	ldd	r25, Y+5	; 0x05
    1778:	83 30       	cpi	r24, 0x03	; 3
    177a:	91 05       	cpc	r25, r1
    177c:	09 f4       	brne	.+2      	; 0x1780 <DIO_writePin+0x66>
    177e:	85 c0       	rjmp	.+266    	; 0x188a <DIO_writePin+0x170>
    1780:	af c0       	rjmp	.+350    	; 0x18e0 <DIO_writePin+0x1c6>
		case (PORTA_ID):
			if (value == LOGIC_HIGH) {
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	a1 f4       	brne	.+40     	; 0x17b0 <DIO_writePin+0x96>
				SET_BIT(PORTA, pin_number);
    1788:	ab e3       	ldi	r26, 0x3B	; 59
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	eb e3       	ldi	r30, 0x3B	; 59
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_writePin+0x8c>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_writePin+0x88>
    17aa:	84 2b       	or	r24, r20
    17ac:	8c 93       	st	X, r24
    17ae:	98 c0       	rjmp	.+304    	; 0x18e0 <DIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_number);
    17b0:	ab e3       	ldi	r26, 0x3B	; 59
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	eb e3       	ldi	r30, 0x3B	; 59
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 2e       	mov	r0, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <DIO_writePin+0xb4>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <DIO_writePin+0xb0>
    17d2:	80 95       	com	r24
    17d4:	84 23       	and	r24, r20
    17d6:	8c 93       	st	X, r24
    17d8:	83 c0       	rjmp	.+262    	; 0x18e0 <DIO_writePin+0x1c6>
			}
			break;
		case (PORTB_ID):
			if (value == LOGIC_HIGH) {
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	a1 f4       	brne	.+40     	; 0x1808 <DIO_writePin+0xee>
				SET_BIT(PORTB, pin_number);
    17e0:	a8 e3       	ldi	r26, 0x38	; 56
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e8 e3       	ldi	r30, 0x38	; 56
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_writePin+0xe4>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_writePin+0xe0>
    1802:	84 2b       	or	r24, r20
    1804:	8c 93       	st	X, r24
    1806:	6c c0       	rjmp	.+216    	; 0x18e0 <DIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_number);
    1808:	a8 e3       	ldi	r26, 0x38	; 56
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e8 e3       	ldi	r30, 0x38	; 56
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_writePin+0x10c>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_writePin+0x108>
    182a:	80 95       	com	r24
    182c:	84 23       	and	r24, r20
    182e:	8c 93       	st	X, r24
    1830:	57 c0       	rjmp	.+174    	; 0x18e0 <DIO_writePin+0x1c6>
			}
			break;
		case (PORTC_ID):
			if (value == LOGIC_HIGH) {
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	a1 f4       	brne	.+40     	; 0x1860 <DIO_writePin+0x146>
				SET_BIT(PORTC, pin_number);
    1838:	a5 e3       	ldi	r26, 0x35	; 53
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e5 e3       	ldi	r30, 0x35	; 53
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <DIO_writePin+0x13c>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <DIO_writePin+0x138>
    185a:	84 2b       	or	r24, r20
    185c:	8c 93       	st	X, r24
    185e:	40 c0       	rjmp	.+128    	; 0x18e0 <DIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_number);
    1860:	a5 e3       	ldi	r26, 0x35	; 53
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e5 e3       	ldi	r30, 0x35	; 53
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_writePin+0x164>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_writePin+0x160>
    1882:	80 95       	com	r24
    1884:	84 23       	and	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	2b c0       	rjmp	.+86     	; 0x18e0 <DIO_writePin+0x1c6>
			}
			break;
		case (PORTD_ID):
			if (value == LOGIC_HIGH) {
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	a1 f4       	brne	.+40     	; 0x18b8 <DIO_writePin+0x19e>
				SET_BIT(PORTD, pin_number);
    1890:	a2 e3       	ldi	r26, 0x32	; 50
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e2 e3       	ldi	r30, 0x32	; 50
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	48 2f       	mov	r20, r24
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	02 2e       	mov	r0, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <DIO_writePin+0x194>
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	0a 94       	dec	r0
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <DIO_writePin+0x190>
    18b2:	84 2b       	or	r24, r20
    18b4:	8c 93       	st	X, r24
    18b6:	14 c0       	rjmp	.+40     	; 0x18e0 <DIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_number);
    18b8:	a2 e3       	ldi	r26, 0x32	; 50
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e2 e3       	ldi	r30, 0x32	; 50
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	48 2f       	mov	r20, r24
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	02 2e       	mov	r0, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_writePin+0x1bc>
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	0a 94       	dec	r0
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <DIO_writePin+0x1b8>
    18da:	80 95       	com	r24
    18dc:	84 23       	and	r24, r20
    18de:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <DIO_readPin>:
Read the logic value (high/low) of a specific pin.
Arguments:  The port number to which the pin belongs (PORTA_ID, PORTB_ID, etc.).
			The pin number within the port.
Return:		The logic value read from the pin (LOGIC_HIGH or LOGIC_LOW). 
*/
uint8 DIO_readPin(uint8 port_number, uint8 pin_number){
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <DIO_readPin+0x6>
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <DIO_readPin+0x8>
    18f8:	0f 92       	push	r0
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	8a 83       	std	Y+2, r24	; 0x02
    1900:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1902:	19 82       	std	Y+1, r1	; 0x01

	if ((port_number >= NUMBER_OF_PORTS) || (pin_number >= NUMBER_OF_PINS_PER_PORT)) {
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	84 30       	cpi	r24, 0x04	; 4
    1908:	08 f0       	brcs	.+2      	; 0x190c <DIO_readPin+0x1c>
    190a:	b1 c0       	rjmp	.+354    	; 0x1a6e <DIO_readPin+0x17e>
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	88 30       	cpi	r24, 0x08	; 8
    1910:	08 f0       	brcs	.+2      	; 0x1914 <DIO_readPin+0x24>
    1912:	ad c0       	rjmp	.+346    	; 0x1a6e <DIO_readPin+0x17e>

	} else {
		switch (port_number) {
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	3d 83       	std	Y+5, r19	; 0x05
    191c:	2c 83       	std	Y+4, r18	; 0x04
    191e:	4c 81       	ldd	r20, Y+4	; 0x04
    1920:	5d 81       	ldd	r21, Y+5	; 0x05
    1922:	41 30       	cpi	r20, 0x01	; 1
    1924:	51 05       	cpc	r21, r1
    1926:	d9 f1       	breq	.+118    	; 0x199e <DIO_readPin+0xae>
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	9d 81       	ldd	r25, Y+5	; 0x05
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	91 05       	cpc	r25, r1
    1930:	34 f4       	brge	.+12     	; 0x193e <DIO_readPin+0x4e>
    1932:	2c 81       	ldd	r18, Y+4	; 0x04
    1934:	3d 81       	ldd	r19, Y+5	; 0x05
    1936:	21 15       	cp	r18, r1
    1938:	31 05       	cpc	r19, r1
    193a:	71 f0       	breq	.+28     	; 0x1958 <DIO_readPin+0x68>
    193c:	98 c0       	rjmp	.+304    	; 0x1a6e <DIO_readPin+0x17e>
    193e:	4c 81       	ldd	r20, Y+4	; 0x04
    1940:	5d 81       	ldd	r21, Y+5	; 0x05
    1942:	42 30       	cpi	r20, 0x02	; 2
    1944:	51 05       	cpc	r21, r1
    1946:	09 f4       	brne	.+2      	; 0x194a <DIO_readPin+0x5a>
    1948:	4d c0       	rjmp	.+154    	; 0x19e4 <DIO_readPin+0xf4>
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	91 05       	cpc	r25, r1
    1952:	09 f4       	brne	.+2      	; 0x1956 <DIO_readPin+0x66>
    1954:	6a c0       	rjmp	.+212    	; 0x1a2a <DIO_readPin+0x13a>
    1956:	8b c0       	rjmp	.+278    	; 0x1a6e <DIO_readPin+0x17e>
		case (PORTA_ID):
			if (GET_BIT(PINA, pin_number)) {
    1958:	e9 e3       	ldi	r30, 0x39	; 57
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <DIO_readPin+0x82>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	2a 95       	dec	r18
    1974:	e2 f7       	brpl	.-8      	; 0x196e <DIO_readPin+0x7e>
    1976:	9a 01       	movw	r18, r20
    1978:	28 23       	and	r18, r24
    197a:	39 23       	and	r19, r25
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a9 01       	movw	r20, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_readPin+0x9a>
    1986:	55 95       	asr	r21
    1988:	47 95       	ror	r20
    198a:	8a 95       	dec	r24
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_readPin+0x96>
    198e:	ca 01       	movw	r24, r20
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	19 f0       	breq	.+6      	; 0x199a <DIO_readPin+0xaa>
				pin_value = LOGIC_HIGH;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	6a c0       	rjmp	.+212    	; 0x1a6e <DIO_readPin+0x17e>
			} else {
				pin_value = LOGIC_LOW;
    199a:	19 82       	std	Y+1, r1	; 0x01
    199c:	68 c0       	rjmp	.+208    	; 0x1a6e <DIO_readPin+0x17e>
			}
			break;
		case (PORTB_ID):
			if (GET_BIT(PINB, pin_number)) {
    199e:	e6 e3       	ldi	r30, 0x36	; 54
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <DIO_readPin+0xc8>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	2a 95       	dec	r18
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <DIO_readPin+0xc4>
    19bc:	9a 01       	movw	r18, r20
    19be:	28 23       	and	r18, r24
    19c0:	39 23       	and	r19, r25
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a9 01       	movw	r20, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_readPin+0xe0>
    19cc:	55 95       	asr	r21
    19ce:	47 95       	ror	r20
    19d0:	8a 95       	dec	r24
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_readPin+0xdc>
    19d4:	ca 01       	movw	r24, r20
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <DIO_readPin+0xf0>
				pin_value = LOGIC_HIGH;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	47 c0       	rjmp	.+142    	; 0x1a6e <DIO_readPin+0x17e>
			} else {
				pin_value = LOGIC_LOW;
    19e0:	19 82       	std	Y+1, r1	; 0x01
    19e2:	45 c0       	rjmp	.+138    	; 0x1a6e <DIO_readPin+0x17e>
			}
			break;
		case (PORTC_ID):
			if (GET_BIT(PINC, pin_number)) {
    19e4:	e3 e3       	ldi	r30, 0x33	; 51
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <DIO_readPin+0x10e>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	2a 95       	dec	r18
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <DIO_readPin+0x10a>
    1a02:	9a 01       	movw	r18, r20
    1a04:	28 23       	and	r18, r24
    1a06:	39 23       	and	r19, r25
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	a9 01       	movw	r20, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <DIO_readPin+0x126>
    1a12:	55 95       	asr	r21
    1a14:	47 95       	ror	r20
    1a16:	8a 95       	dec	r24
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <DIO_readPin+0x122>
    1a1a:	ca 01       	movw	r24, r20
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	19 f0       	breq	.+6      	; 0x1a26 <DIO_readPin+0x136>
				pin_value = LOGIC_HIGH;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	24 c0       	rjmp	.+72     	; 0x1a6e <DIO_readPin+0x17e>
			} else {
				pin_value = LOGIC_LOW;
    1a26:	19 82       	std	Y+1, r1	; 0x01
    1a28:	22 c0       	rjmp	.+68     	; 0x1a6e <DIO_readPin+0x17e>
			}
			break;
		case (PORTD_ID):
			if (GET_BIT(PIND, pin_number)) {
    1a2a:	e0 e3       	ldi	r30, 0x30	; 48
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <DIO_readPin+0x154>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	2a 95       	dec	r18
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <DIO_readPin+0x150>
    1a48:	9a 01       	movw	r18, r20
    1a4a:	28 23       	and	r18, r24
    1a4c:	39 23       	and	r19, r25
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a9 01       	movw	r20, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_readPin+0x16c>
    1a58:	55 95       	asr	r21
    1a5a:	47 95       	ror	r20
    1a5c:	8a 95       	dec	r24
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_readPin+0x168>
    1a60:	ca 01       	movw	r24, r20
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	19 f0       	breq	.+6      	; 0x1a6c <DIO_readPin+0x17c>
				pin_value = LOGIC_HIGH;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <DIO_readPin+0x17e>
			} else {
				pin_value = LOGIC_LOW;
    1a6c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}

	}
	return pin_value;
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <DIO_writePort>:
Write a logic value (high/low) to an entire port.
Arguments:  The port number to write to (PORTA_ID, PORTB_ID, etc.).
			The value to write to the port.
Return:		void		
*/
void DIO_writePort(uint8 port_number, uint8 value) {
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <DIO_writePort+0x6>
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <DIO_writePort+0x8>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_number >= NUMBER_OF_PORTS)) {
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	84 30       	cpi	r24, 0x04	; 4
    1a94:	90 f5       	brcc	.+100    	; 0x1afa <DIO_writePort+0x7a>

	} else {
		switch (port_number) {
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3c 83       	std	Y+4, r19	; 0x04
    1a9e:	2b 83       	std	Y+3, r18	; 0x03
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	d1 f0       	breq	.+52     	; 0x1ade <DIO_writePort+0x5e>
    1aaa:	2b 81       	ldd	r18, Y+3	; 0x03
    1aac:	3c 81       	ldd	r19, Y+4	; 0x04
    1aae:	22 30       	cpi	r18, 0x02	; 2
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <DIO_writePort+0x3e>
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	61 f0       	breq	.+24     	; 0x1ad4 <DIO_writePort+0x54>
    1abc:	1e c0       	rjmp	.+60     	; 0x1afa <DIO_writePort+0x7a>
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	81 f0       	breq	.+32     	; 0x1ae8 <DIO_writePort+0x68>
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	91 05       	cpc	r25, r1
    1ad0:	81 f0       	breq	.+32     	; 0x1af2 <DIO_writePort+0x72>
    1ad2:	13 c0       	rjmp	.+38     	; 0x1afa <DIO_writePort+0x7a>
		case (PORTA_ID):
			PORTA = value;
    1ad4:	eb e3       	ldi	r30, 0x3B	; 59
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	80 83       	st	Z, r24
    1adc:	0e c0       	rjmp	.+28     	; 0x1afa <DIO_writePort+0x7a>
			break;
		case (PORTB_ID):
			PORTB = value;
    1ade:	e8 e3       	ldi	r30, 0x38	; 56
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	80 83       	st	Z, r24
    1ae6:	09 c0       	rjmp	.+18     	; 0x1afa <DIO_writePort+0x7a>
			break;
		case (PORTC_ID):
			PORTC = value;
    1ae8:	e5 e3       	ldi	r30, 0x35	; 53
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	80 83       	st	Z, r24
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <DIO_writePort+0x7a>
			break;
		case (PORTD_ID):
			PORTD = value;
    1af2:	e2 e3       	ldi	r30, 0x32	; 50
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	80 83       	st	Z, r24
			break;
		}

	}
}
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <DIO_readPort>:
/*
Read the logic value (high/low) of an entire port.
Arguments:			The port number to read from (PORTA_ID, PORTB_ID, etc.).
Return:				An 8 bit number containing values of the pins in the port specified
*/
uint8 DIO_readPort(uint8 port_number) {
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <DIO_readPort+0x6>
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <DIO_readPort+0x8>
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1b16:	19 82       	std	Y+1, r1	; 0x01

	if ((port_number >= NUMBER_OF_PORTS)) {
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	84 30       	cpi	r24, 0x04	; 4
    1b1c:	90 f5       	brcc	.+100    	; 0x1b82 <DIO_readPort+0x7a>

	} else {
		switch (port_number) {
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	3c 83       	std	Y+4, r19	; 0x04
    1b26:	2b 83       	std	Y+3, r18	; 0x03
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	91 05       	cpc	r25, r1
    1b30:	d1 f0       	breq	.+52     	; 0x1b66 <DIO_readPort+0x5e>
    1b32:	2b 81       	ldd	r18, Y+3	; 0x03
    1b34:	3c 81       	ldd	r19, Y+4	; 0x04
    1b36:	22 30       	cpi	r18, 0x02	; 2
    1b38:	31 05       	cpc	r19, r1
    1b3a:	2c f4       	brge	.+10     	; 0x1b46 <DIO_readPort+0x3e>
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	61 f0       	breq	.+24     	; 0x1b5c <DIO_readPort+0x54>
    1b44:	1e c0       	rjmp	.+60     	; 0x1b82 <DIO_readPort+0x7a>
    1b46:	2b 81       	ldd	r18, Y+3	; 0x03
    1b48:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4a:	22 30       	cpi	r18, 0x02	; 2
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	81 f0       	breq	.+32     	; 0x1b70 <DIO_readPort+0x68>
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	83 30       	cpi	r24, 0x03	; 3
    1b56:	91 05       	cpc	r25, r1
    1b58:	81 f0       	breq	.+32     	; 0x1b7a <DIO_readPort+0x72>
    1b5a:	13 c0       	rjmp	.+38     	; 0x1b82 <DIO_readPort+0x7a>
		case (PORTA_ID):
			port_value = PINA;
    1b5c:	e9 e3       	ldi	r30, 0x39	; 57
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	0e c0       	rjmp	.+28     	; 0x1b82 <DIO_readPort+0x7a>
			break;
		case (PORTB_ID):
			port_value = PINB;
    1b66:	e6 e3       	ldi	r30, 0x36	; 54
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	09 c0       	rjmp	.+18     	; 0x1b82 <DIO_readPort+0x7a>
			break;
		case (PORTC_ID):
			port_value = PINC;
    1b70:	e3 e3       	ldi	r30, 0x33	; 51
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <DIO_readPort+0x7a>
			break;
		case (PORTD_ID):
			port_value = PIND;
    1b7a:	e0 e3       	ldi	r30, 0x30	; 48
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	}
	return port_value;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <DIO_TogglePin>:
Writing alternating logic value (high&low) of a specified pin.
Arguments:			The port number to read from (PORTA_ID, PORTB_ID, etc.).
					An 8 bit number containing values of the pins in the port specified
Return:				void
*/
void DIO_TogglePin(uint8 Port,uint8 Pin){
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <DIO_TogglePin+0x6>
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <DIO_TogglePin+0x8>
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port) {
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	3c 83       	std	Y+4, r19	; 0x04
    1baa:	2b 83       	std	Y+3, r18	; 0x03
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	49 f1       	breq	.+82     	; 0x1c08 <DIO_TogglePin+0x76>
    1bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <DIO_TogglePin+0x38>
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	61 f0       	breq	.+24     	; 0x1be0 <DIO_TogglePin+0x4e>
    1bc8:	5a c0       	rjmp	.+180    	; 0x1c7e <DIO_TogglePin+0xec>
    1bca:	2b 81       	ldd	r18, Y+3	; 0x03
    1bcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bce:	22 30       	cpi	r18, 0x02	; 2
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	71 f1       	breq	.+92     	; 0x1c30 <DIO_TogglePin+0x9e>
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	83 30       	cpi	r24, 0x03	; 3
    1bda:	91 05       	cpc	r25, r1
    1bdc:	e9 f1       	breq	.+122    	; 0x1c58 <DIO_TogglePin+0xc6>
    1bde:	4f c0       	rjmp	.+158    	; 0x1c7e <DIO_TogglePin+0xec>
		case PORTA_ID:
		TOGGLE_BIT(PORTA,Pin);
    1be0:	ab e3       	ldi	r26, 0x3B	; 59
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	eb e3       	ldi	r30, 0x3B	; 59
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <DIO_TogglePin+0x6c>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <DIO_TogglePin+0x68>
    1c02:	84 27       	eor	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	3b c0       	rjmp	.+118    	; 0x1c7e <DIO_TogglePin+0xec>
		break;
		case PORTB_ID:
		TOGGLE_BIT(PORTB,Pin);
    1c08:	a8 e3       	ldi	r26, 0x38	; 56
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e8 e3       	ldi	r30, 0x38	; 56
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <DIO_TogglePin+0x94>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <DIO_TogglePin+0x90>
    1c2a:	84 27       	eor	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	27 c0       	rjmp	.+78     	; 0x1c7e <DIO_TogglePin+0xec>
		break;
		case PORTC_ID:
		TOGGLE_BIT(PORTC,Pin);
    1c30:	a5 e3       	ldi	r26, 0x35	; 53
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e5 e3       	ldi	r30, 0x35	; 53
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <DIO_TogglePin+0xbc>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <DIO_TogglePin+0xb8>
    1c52:	84 27       	eor	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	13 c0       	rjmp	.+38     	; 0x1c7e <DIO_TogglePin+0xec>
		break;
		case PORTD_ID:
		TOGGLE_BIT(PORTD,Pin);
    1c58:	a2 e3       	ldi	r26, 0x32	; 50
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e2 e3       	ldi	r30, 0x32	; 50
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <DIO_TogglePin+0xe4>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <DIO_TogglePin+0xe0>
    1c7a:	84 27       	eor	r24, r20
    1c7c:	8c 93       	st	X, r24
		break;

	}
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <__vector_16>:
volatile uint16 * g_ADCBuffer;

/* Interrupt service routine where the value of the ADC is saved in the    *
 * ADCBuffer variable.
                                                      */
ISR(VECTOR_16){
    1c8c:	1f 92       	push	r1
    1c8e:	0f 92       	push	r0
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	0f 92       	push	r0
    1c94:	11 24       	eor	r1, r1
    1c96:	8f 93       	push	r24
    1c98:	9f 93       	push	r25
    1c9a:	af 93       	push	r26
    1c9c:	bf 93       	push	r27
    1c9e:	ef 93       	push	r30
    1ca0:	ff 93       	push	r31
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    *g_ADCBuffer = ADC;
    1caa:	e0 91 c4 02 	lds	r30, 0x02C4
    1cae:	f0 91 c5 02 	lds	r31, 0x02C5
    1cb2:	a4 e2       	ldi	r26, 0x24	; 36
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	8d 91       	ld	r24, X+
    1cb8:	9c 91       	ld	r25, X
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	80 83       	st	Z, r24
}
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	ff 91       	pop	r31
    1cc4:	ef 91       	pop	r30
    1cc6:	bf 91       	pop	r27
    1cc8:	af 91       	pop	r26
    1cca:	9f 91       	pop	r25
    1ccc:	8f 91       	pop	r24
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <ADC_Init>:


Std_ReturnType ADC_Init(const ADC_ConfigType *ConfigPtr) {
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <ADC_Init+0x6>
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <ADC_Init+0x8>
    1ce0:	0f 92       	push	r0
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
	/* Configure ADC settings */
	uint8 reference = ConfigPtr->reference;
    1cea:	eb 81       	ldd	r30, Y+3	; 0x03
    1cec:	fc 81       	ldd	r31, Y+4	; 0x04
    1cee:	81 81       	ldd	r24, Z+1	; 0x01
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 prescaler = ConfigPtr->prescaler;
    1cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf6:	80 81       	ld	r24, Z
    1cf8:	89 83       	std	Y+1, r24	; 0x01
	
	SET_BIT(ADCSRA, ADEN); /* Enable the ADC */
    1cfa:	a6 e2       	ldi	r26, 0x26	; 38
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e6 e2       	ldi	r30, 0x26	; 38
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	80 68       	ori	r24, 0x80	; 128
    1d06:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA, ADIE); /* Disable the ADC interrupt */
    1d08:	a6 e2       	ldi	r26, 0x26	; 38
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e6 e2       	ldi	r30, 0x26	; 38
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	87 7f       	andi	r24, 0xF7	; 247
    1d14:	8c 93       	st	X, r24
	ADMUX = (ADMUX & 0x3F) | (reference << 6); /* Set reference input */
    1d16:	a7 e2       	ldi	r26, 0x27	; 39
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e7 e2       	ldi	r30, 0x27	; 39
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	28 2f       	mov	r18, r24
    1d22:	2f 73       	andi	r18, 0x3F	; 63
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	00 24       	eor	r0, r0
    1d2c:	96 95       	lsr	r25
    1d2e:	87 95       	ror	r24
    1d30:	07 94       	ror	r0
    1d32:	96 95       	lsr	r25
    1d34:	87 95       	ror	r24
    1d36:	07 94       	ror	r0
    1d38:	98 2f       	mov	r25, r24
    1d3a:	80 2d       	mov	r24, r0
    1d3c:	82 2b       	or	r24, r18
    1d3e:	8c 93       	st	X, r24
	
	/* Set pre-scaler */
	switch (prescaler) {
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	87 30       	cpi	r24, 0x07	; 7
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	68 f4       	brcc	.+26     	; 0x1d68 <ADC_Init+0x90>
		case ADC_PRESCALER_8:
		case ADC_PRESCALER_16:
		case ADC_PRESCALER_32:
		case ADC_PRESCALER_64:
		case ADC_PRESCALER_128:
		ADCSRA = (ADCSRA & 0xF8) | prescaler;
    1d4e:	a6 e2       	ldi	r26, 0x26	; 38
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e6 e2       	ldi	r30, 0x26	; 38
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	98 2f       	mov	r25, r24
    1d5a:	98 7f       	andi	r25, 0xF8	; 248
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	89 2b       	or	r24, r25
    1d60:	8c 93       	st	X, r24
		break;
		default:
		return E_NOT_OK;
	}
	
	return E_OK;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <ADC_Init+0x92>
		case ADC_PRESCALER_64:
		case ADC_PRESCALER_128:
		ADCSRA = (ADCSRA & 0xF8) | prescaler;
		break;
		default:
		return E_NOT_OK;
    1d68:	1d 82       	std	Y+5, r1	; 0x05
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return E_OK;
}
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <ADC_readChannel_polling>:

Std_ReturnType ADC_readChannel_polling(uint8 channelNum , uint16 * read_buffer){
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <ADC_readChannel_polling+0x6>
    1d82:	0f 92       	push	r0
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	7b 83       	std	Y+3, r23	; 0x03
    1d8c:	6a 83       	std	Y+2, r22	; 0x02
	ADMUX = (ADMUX & 0xE0) | channelNum; /* channel number that I want to read from */
    1d8e:	a7 e2       	ldi	r26, 0x27	; 39
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e7 e2       	ldi	r30, 0x27	; 39
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	98 2f       	mov	r25, r24
    1d9a:	90 7e       	andi	r25, 0xE0	; 224
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	89 2b       	or	r24, r25
    1da0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADSC);/* ADC start conversion */
    1da2:	a6 e2       	ldi	r26, 0x26	; 38
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e6 e2       	ldi	r30, 0x26	; 38
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	80 64       	ori	r24, 0x40	; 64
    1dae:	8c 93       	st	X, r24
	while(!(GET_BIT(ADCSRA , ADIF)));
    1db0:	e6 e2       	ldi	r30, 0x26	; 38
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	80 71       	andi	r24, 0x10	; 16
    1dbc:	90 70       	andi	r25, 0x00	; 0
    1dbe:	95 95       	asr	r25
    1dc0:	87 95       	ror	r24
    1dc2:	95 95       	asr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	95 95       	asr	r25
    1dc8:	87 95       	ror	r24
    1dca:	95 95       	asr	r25
    1dcc:	87 95       	ror	r24
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	79 f3       	breq	.-34     	; 0x1db0 <ADC_readChannel_polling+0x34>
	SET_BIT(ADCSRA , ADIF);
    1dd2:	a6 e2       	ldi	r26, 0x26	; 38
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e6 e2       	ldi	r30, 0x26	; 38
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	80 61       	ori	r24, 0x10	; 16
    1dde:	8c 93       	st	X, r24
	*read_buffer = 0xFF & ADCL;
    1de0:	e4 e2       	ldi	r30, 0x24	; 36
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	ea 81       	ldd	r30, Y+2	; 0x02
    1dec:	fb 81       	ldd	r31, Y+3	; 0x03
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	80 83       	st	Z, r24
	*read_buffer = ((*read_buffer & 0xFF) | (ADCH<<8));
    1df2:	ea 81       	ldd	r30, Y+2	; 0x02
    1df4:	fb 81       	ldd	r31, Y+3	; 0x03
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	9c 01       	movw	r18, r24
    1dfc:	30 70       	andi	r19, 0x00	; 0
    1dfe:	e5 e2       	ldi	r30, 0x25	; 37
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	98 2f       	mov	r25, r24
    1e0a:	88 27       	eor	r24, r24
    1e0c:	82 2b       	or	r24, r18
    1e0e:	93 2b       	or	r25, r19
    1e10:	ea 81       	ldd	r30, Y+2	; 0x02
    1e12:	fb 81       	ldd	r31, Y+3	; 0x03
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
	return E_OK;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <ADC_readChannel_interrupt>:


Std_ReturnType ADC_readChannel_interrupt(uint8 channelNum, uint16 *read_buffer){
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <ADC_readChannel_interrupt+0x6>
    1e2c:	0f 92       	push	r0
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	7b 83       	std	Y+3, r23	; 0x03
    1e36:	6a 83       	std	Y+2, r22	; 0x02
	g_ADCBuffer = read_buffer;
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3c:	90 93 c5 02 	sts	0x02C5, r25
    1e40:	80 93 c4 02 	sts	0x02C4, r24
	ADMUX = (ADMUX & 0xE0) | channelNum; /* channel number that I want to read from */
    1e44:	a7 e2       	ldi	r26, 0x27	; 39
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e7 e2       	ldi	r30, 0x27	; 39
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	98 2f       	mov	r25, r24
    1e50:	90 7e       	andi	r25, 0xE0	; 224
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	89 2b       	or	r24, r25
    1e56:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADIE); /* enabling ADC interrupt */
    1e58:	a6 e2       	ldi	r26, 0x26	; 38
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e6 e2       	ldi	r30, 0x26	; 38
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	88 60       	ori	r24, 0x08	; 8
    1e64:	8c 93       	st	X, r24
    SET_BIT(SREG , GLOBAL_INTERRUPT_BIT); /* enabling the global interrupt */
    1e66:	af e5       	ldi	r26, 0x5F	; 95
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	ef e5       	ldi	r30, 0x5F	; 95
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	80 68       	ori	r24, 0x80	; 128
    1e72:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADSC); /* ADC start conversion */
    1e74:	a6 e2       	ldi	r26, 0x26	; 38
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e6 e2       	ldi	r30, 0x26	; 38
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	80 64       	ori	r24, 0x40	; 64
    1e80:	8c 93       	st	X, r24
	return E_OK;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <ADC_DeInit>:

/* Deinitialize the ADC module */
Std_ReturnType ADC_DeInit(void) {
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	/* Disable the ADC */
	CLEAR_BIT(ADCSRA, ADEN);
    1e98:	a6 e2       	ldi	r26, 0x26	; 38
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e6 e2       	ldi	r30, 0x26	; 38
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	8f 77       	andi	r24, 0x7F	; 127
    1ea4:	8c 93       	st	X, r24
	
	/* Disable the ADC interrupt */
	CLEAR_BIT(ADCSRA, ADIE);
    1ea6:	a6 e2       	ldi	r26, 0x26	; 38
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e6 e2       	ldi	r30, 0x26	; 38
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	87 7f       	andi	r24, 0xF7	; 247
    1eb2:	8c 93       	st	X, r24
	
	/* Clear reference and prescaler settings */
	ADMUX = 0x00;
    1eb4:	e7 e2       	ldi	r30, 0x27	; 39
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	10 82       	st	Z, r1
	ADCSRA &= 0xF8;
    1eba:	a6 e2       	ldi	r26, 0x26	; 38
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e6 e2       	ldi	r30, 0x26	; 38
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	88 7f       	andi	r24, 0xF8	; 248
    1ec6:	8c 93       	st	X, r24
	return E_OK;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
}
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <LED_Init>:
#define LED_C_

#include "LED.h"

/*Initialization of all LEDs in the kit used*/
void LED_Init(uint8 Led_Color) {
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <LED_Init+0x6>
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	89 83       	std	Y+1, r24	; 0x01
	switch (Led_Color) {
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	3b 83       	std	Y+3, r19	; 0x03
    1ee6:	2a 83       	std	Y+2, r18	; 0x02
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	91 05       	cpc	r25, r1
    1ef0:	01 f1       	breq	.+64     	; 0x1f32 <LED_Init+0x62>
    1ef2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ef4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ef6:	22 30       	cpi	r18, 0x02	; 2
    1ef8:	31 05       	cpc	r19, r1
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <LED_Init+0x36>
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	9b 81       	ldd	r25, Y+3	; 0x03
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	61 f0       	breq	.+24     	; 0x1f1c <LED_Init+0x4c>
    1f04:	36 c0       	rjmp	.+108    	; 0x1f72 <LED_Init+0xa2>
    1f06:	2a 81       	ldd	r18, Y+2	; 0x02
    1f08:	3b 81       	ldd	r19, Y+3	; 0x03
    1f0a:	22 30       	cpi	r18, 0x02	; 2
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	e1 f0       	breq	.+56     	; 0x1f48 <LED_Init+0x78>
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	9b 81       	ldd	r25, Y+3	; 0x03
    1f14:	83 30       	cpi	r24, 0x03	; 3
    1f16:	91 05       	cpc	r25, r1
    1f18:	11 f1       	breq	.+68     	; 0x1f5e <LED_Init+0x8e>
    1f1a:	2b c0       	rjmp	.+86     	; 0x1f72 <LED_Init+0xa2>
	case LED_BLUE:
		DIO_setupPinDirection(LED_BLUE_PORT, LED_BLUE_PIN, PIN_OUTPUT);
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	65 e0       	ldi	r22, 0x05	; 5
    1f20:	41 e0       	ldi	r20, 0x01	; 1
    1f22:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
		DIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_LOW);
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	65 e0       	ldi	r22, 0x05	; 5
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    1f30:	20 c0       	rjmp	.+64     	; 0x1f72 <LED_Init+0xa2>
		break;

	case LED_RED:
		DIO_setupPinDirection(LED_RED_PORT, LED_RED_PIN, PIN_OUTPUT);
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	67 e0       	ldi	r22, 0x07	; 7
    1f36:	41 e0       	ldi	r20, 0x01	; 1
    1f38:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
		DIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_LOW);
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	67 e0       	ldi	r22, 0x07	; 7
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    1f46:	15 c0       	rjmp	.+42     	; 0x1f72 <LED_Init+0xa2>
		break;

	case LED_YELLOW:
			DIO_setupPinDirection(LED_YELLOW_PORT, LED_YELLOW_PIN, PIN_OUTPUT);
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	66 e0       	ldi	r22, 0x06	; 6
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
			DIO_writePin(LED_YELLOW_PORT,  LED_YELLOW_PIN, LOGIC_LOW);
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	66 e0       	ldi	r22, 0x06	; 6
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    1f5c:	0a c0       	rjmp	.+20     	; 0x1f72 <LED_Init+0xa2>
		break;

	case LED_GREEN:
				DIO_setupPinDirection(LED_GREEN_PORT,  LED_GREEN_PIN, PIN_OUTPUT);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	64 e0       	ldi	r22, 0x04	; 4
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
				DIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_LOW);
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	64 e0       	ldi	r22, 0x04	; 4
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
		break;
	default: ;
	/*MISRA C 2012 - 16.4 default must be present in every switch statement*/
	/*Left for future update for error handling*/
	}
}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <LED_Init_All>:

/*Group Intialization*/
void LED_Init_All(){
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
	LED_Init(LED_BLUE);
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LED_Init>
	LED_Init(LED_RED);
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LED_Init>
	LED_Init(LED_YELLOW);
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LED_Init>
	LED_Init(LED_GREEN);
    1f98:	83 e0       	ldi	r24, 0x03	; 3
    1f9a:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LED_Init>
}
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <LED_on>:
/*Setting the LED being passed to the function*/
void LED_on(uint8 Led_Color){
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <LED_on+0x6>
    1faa:	0f 92       	push	r0
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	89 83       	std	Y+1, r24	; 0x01
	switch (Led_Color) {
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	3b 83       	std	Y+3, r19	; 0x03
    1fba:	2a 83       	std	Y+2, r18	; 0x02
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	81 30       	cpi	r24, 0x01	; 1
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	d9 f0       	breq	.+54     	; 0x1ffc <LED_on+0x58>
    1fc6:	2a 81       	ldd	r18, Y+2	; 0x02
    1fc8:	3b 81       	ldd	r19, Y+3	; 0x03
    1fca:	22 30       	cpi	r18, 0x02	; 2
    1fcc:	31 05       	cpc	r19, r1
    1fce:	2c f4       	brge	.+10     	; 0x1fda <LED_on+0x36>
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	61 f0       	breq	.+24     	; 0x1ff0 <LED_on+0x4c>
    1fd8:	22 c0       	rjmp	.+68     	; 0x201e <LED_on+0x7a>
    1fda:	2a 81       	ldd	r18, Y+2	; 0x02
    1fdc:	3b 81       	ldd	r19, Y+3	; 0x03
    1fde:	22 30       	cpi	r18, 0x02	; 2
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	91 f0       	breq	.+36     	; 0x2008 <LED_on+0x64>
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe8:	83 30       	cpi	r24, 0x03	; 3
    1fea:	91 05       	cpc	r25, r1
    1fec:	99 f0       	breq	.+38     	; 0x2014 <LED_on+0x70>
    1fee:	17 c0       	rjmp	.+46     	; 0x201e <LED_on+0x7a>
	case LED_BLUE:
		DIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_HIGH);
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	65 e0       	ldi	r22, 0x05	; 5
    1ff4:	41 e0       	ldi	r20, 0x01	; 1
    1ff6:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    1ffa:	11 c0       	rjmp	.+34     	; 0x201e <LED_on+0x7a>
		break;

	case LED_RED:
		DIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_HIGH);
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	67 e0       	ldi	r22, 0x07	; 7
    2000:	41 e0       	ldi	r20, 0x01	; 1
    2002:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    2006:	0b c0       	rjmp	.+22     	; 0x201e <LED_on+0x7a>
		break;

	case LED_YELLOW:
		DIO_writePin(LED_YELLOW_PORT,  LED_YELLOW_PIN, LOGIC_HIGH);
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	66 e0       	ldi	r22, 0x06	; 6
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    2012:	05 c0       	rjmp	.+10     	; 0x201e <LED_on+0x7a>
		break;

	case LED_GREEN:
		DIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_HIGH);
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	64 e0       	ldi	r22, 0x04	; 4
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
		
	default: ;
	/*MISRA C 2012 - 16.4 default must be present in every switch statement*/
	/*Left for future update for error handling*/
	}
}
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <LED_Off>:
void LED_Off(uint8 Led_Color){
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	00 d0       	rcall	.+0      	; 0x2030 <LED_Off+0x6>
    2030:	0f 92       	push	r0
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	89 83       	std	Y+1, r24	; 0x01
	switch (Led_Color) {
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	3b 83       	std	Y+3, r19	; 0x03
    2040:	2a 83       	std	Y+2, r18	; 0x02
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	9b 81       	ldd	r25, Y+3	; 0x03
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	91 05       	cpc	r25, r1
    204a:	d9 f0       	breq	.+54     	; 0x2082 <LED_Off+0x58>
    204c:	2a 81       	ldd	r18, Y+2	; 0x02
    204e:	3b 81       	ldd	r19, Y+3	; 0x03
    2050:	22 30       	cpi	r18, 0x02	; 2
    2052:	31 05       	cpc	r19, r1
    2054:	2c f4       	brge	.+10     	; 0x2060 <LED_Off+0x36>
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	9b 81       	ldd	r25, Y+3	; 0x03
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	61 f0       	breq	.+24     	; 0x2076 <LED_Off+0x4c>
    205e:	22 c0       	rjmp	.+68     	; 0x20a4 <LED_Off+0x7a>
    2060:	2a 81       	ldd	r18, Y+2	; 0x02
    2062:	3b 81       	ldd	r19, Y+3	; 0x03
    2064:	22 30       	cpi	r18, 0x02	; 2
    2066:	31 05       	cpc	r19, r1
    2068:	91 f0       	breq	.+36     	; 0x208e <LED_Off+0x64>
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	83 30       	cpi	r24, 0x03	; 3
    2070:	91 05       	cpc	r25, r1
    2072:	99 f0       	breq	.+38     	; 0x209a <LED_Off+0x70>
    2074:	17 c0       	rjmp	.+46     	; 0x20a4 <LED_Off+0x7a>
	case LED_BLUE:
		DIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_LOW);
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	65 e0       	ldi	r22, 0x05	; 5
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    2080:	11 c0       	rjmp	.+34     	; 0x20a4 <LED_Off+0x7a>
		break;

	case LED_RED:
		DIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_LOW);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	67 e0       	ldi	r22, 0x07	; 7
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    208c:	0b c0       	rjmp	.+22     	; 0x20a4 <LED_Off+0x7a>
		break;

	case LED_YELLOW:
		DIO_writePin(LED_YELLOW_PORT, LED_YELLOW_PIN, LOGIC_LOW);
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	66 e0       	ldi	r22, 0x06	; 6
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    2098:	05 c0       	rjmp	.+10     	; 0x20a4 <LED_Off+0x7a>
		break;

	case LED_GREEN:
		DIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_LOW);
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	64 e0       	ldi	r22, 0x04	; 4
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
		
	default: ;
	/*MISRA C 2012 - 16.4 default must be present in every switch statement*/
	/*Left for future update for error handling*/
	}
}
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <LED_Toggle>:


void LED_Toggle(uint8 Led_Color){
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <LED_Toggle+0x6>
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	89 83       	std	Y+1, r24	; 0x01
	switch (Led_Color) {
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	3b 83       	std	Y+3, r19	; 0x03
    20c6:	2a 83       	std	Y+2, r18	; 0x02
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	9b 81       	ldd	r25, Y+3	; 0x03
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	91 05       	cpc	r25, r1
    20d0:	d1 f0       	breq	.+52     	; 0x2106 <LED_Toggle+0x56>
    20d2:	2a 81       	ldd	r18, Y+2	; 0x02
    20d4:	3b 81       	ldd	r19, Y+3	; 0x03
    20d6:	22 30       	cpi	r18, 0x02	; 2
    20d8:	31 05       	cpc	r19, r1
    20da:	2c f4       	brge	.+10     	; 0x20e6 <LED_Toggle+0x36>
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	61 f0       	breq	.+24     	; 0x20fc <LED_Toggle+0x4c>
    20e4:	1e c0       	rjmp	.+60     	; 0x2122 <LED_Toggle+0x72>
    20e6:	2a 81       	ldd	r18, Y+2	; 0x02
    20e8:	3b 81       	ldd	r19, Y+3	; 0x03
    20ea:	22 30       	cpi	r18, 0x02	; 2
    20ec:	31 05       	cpc	r19, r1
    20ee:	81 f0       	breq	.+32     	; 0x2110 <LED_Toggle+0x60>
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	9b 81       	ldd	r25, Y+3	; 0x03
    20f4:	83 30       	cpi	r24, 0x03	; 3
    20f6:	91 05       	cpc	r25, r1
    20f8:	81 f0       	breq	.+32     	; 0x211a <LED_Toggle+0x6a>
    20fa:	13 c0       	rjmp	.+38     	; 0x2122 <LED_Toggle+0x72>
	case LED_BLUE:
		DIO_TogglePin(LED_BLUE_PORT, LED_BLUE_PIN);
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	65 e0       	ldi	r22, 0x05	; 5
    2100:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <DIO_TogglePin>
    2104:	0e c0       	rjmp	.+28     	; 0x2122 <LED_Toggle+0x72>
		break;

	case LED_RED:
		DIO_TogglePin(LED_RED_PORT, LED_RED_PIN);
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	67 e0       	ldi	r22, 0x07	; 7
    210a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <DIO_TogglePin>
    210e:	09 c0       	rjmp	.+18     	; 0x2122 <LED_Toggle+0x72>
		break;

	case LED_YELLOW:
		DIO_TogglePin(LED_YELLOW_PORT, LED_YELLOW_PIN);
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	66 e0       	ldi	r22, 0x06	; 6
    2114:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <DIO_TogglePin>
    2118:	04 c0       	rjmp	.+8      	; 0x2122 <LED_Toggle+0x72>
		break;

	case LED_GREEN:
		DIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	64 e0       	ldi	r22, 0x04	; 4
    211e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <DIO_TogglePin>
		
	default: ;
	/*MISRA C 2012 - 16.4 default must be present in every switch statement*/
	/*Left for future update for error handling*/
	}
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <LED_Check>:
uint8 LED_Check(uint8 Led_Color){
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	00 d0       	rcall	.+0      	; 0x2134 <LED_Check+0x6>
    2134:	00 d0       	rcall	.+0      	; 0x2136 <LED_Check+0x8>
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 result=0;
    213c:	19 82       	std	Y+1, r1	; 0x01
	switch (Led_Color) {
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	3c 83       	std	Y+4, r19	; 0x04
    2146:	2b 83       	std	Y+3, r18	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	91 05       	cpc	r25, r1
    2150:	d9 f0       	breq	.+54     	; 0x2188 <LED_Check+0x5a>
    2152:	2b 81       	ldd	r18, Y+3	; 0x03
    2154:	3c 81       	ldd	r19, Y+4	; 0x04
    2156:	22 30       	cpi	r18, 0x02	; 2
    2158:	31 05       	cpc	r19, r1
    215a:	2c f4       	brge	.+10     	; 0x2166 <LED_Check+0x38>
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	61 f0       	breq	.+24     	; 0x217c <LED_Check+0x4e>
    2164:	22 c0       	rjmp	.+68     	; 0x21aa <LED_Check+0x7c>
    2166:	2b 81       	ldd	r18, Y+3	; 0x03
    2168:	3c 81       	ldd	r19, Y+4	; 0x04
    216a:	22 30       	cpi	r18, 0x02	; 2
    216c:	31 05       	cpc	r19, r1
    216e:	91 f0       	breq	.+36     	; 0x2194 <LED_Check+0x66>
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	83 30       	cpi	r24, 0x03	; 3
    2176:	91 05       	cpc	r25, r1
    2178:	99 f0       	breq	.+38     	; 0x21a0 <LED_Check+0x72>
    217a:	17 c0       	rjmp	.+46     	; 0x21aa <LED_Check+0x7c>
	case LED_BLUE:
		result=DIO_readPin(LED_BLUE_PORT, LED_BLUE_PIN);
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	65 e0       	ldi	r22, 0x05	; 5
    2180:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_readPin>
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	11 c0       	rjmp	.+34     	; 0x21aa <LED_Check+0x7c>
		break;

	case LED_RED:
		result=DIO_readPin(LED_RED_PORT, LED_RED_PIN);
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	67 e0       	ldi	r22, 0x07	; 7
    218c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_readPin>
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	0b c0       	rjmp	.+22     	; 0x21aa <LED_Check+0x7c>
		break;

	case LED_YELLOW:
		result=DIO_readPin(LED_YELLOW_PORT, LED_YELLOW_PIN);
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	66 e0       	ldi	r22, 0x06	; 6
    2198:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_readPin>
    219c:	89 83       	std	Y+1, r24	; 0x01
    219e:	05 c0       	rjmp	.+10     	; 0x21aa <LED_Check+0x7c>
		break;

	case LED_GREEN:
		result=DIO_readPin(LED_GREEN_PORT, LED_GREEN_PIN);
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	64 e0       	ldi	r22, 0x04	; 4
    21a4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_readPin>
    21a8:	89 83       	std	Y+1, r24	; 0x01
		
	default: ;
	/*MISRA C 2012 - 16.4 default must be present in every switch statement*/
	/*Left for future update for error handling*/
	}
	return result;
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <LED_All_Off>:

void LED_All_Off(){
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_LOW);
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	65 e0       	ldi	r22, 0x05	; 5
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_LOW);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	67 e0       	ldi	r22, 0x07	; 7
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LED_YELLOW_PORT, LED_YELLOW_PIN, LOGIC_LOW);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	66 e0       	ldi	r22, 0x06	; 6
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_LOW);
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	64 e0       	ldi	r22, 0x04	; 4
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>

}
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <LCD_init>:
/*
  Initialize the LCD:
  1. Setup the LCD pins directions by use the DIO driver.
  2. Setup the LCD Data Mode 4 bits OR 8 bits.
 */
void LCD_init(void){
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	6c 97       	sbiw	r28, 0x1c	; 28
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
	/*4Bit Mode*/
	DIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	62 e0       	ldi	r22, 0x02	; 2
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	63 e0       	ldi	r22, 0x03	; 3
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a0 ea       	ldi	r26, 0xA0	; 160
    221e:	b1 e4       	ldi	r27, 0x41	; 65
    2220:	89 8f       	std	Y+25, r24	; 0x19
    2222:	9a 8f       	std	Y+26, r25	; 0x1a
    2224:	ab 8f       	std	Y+27, r26	; 0x1b
    2226:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2228:	69 8d       	ldd	r22, Y+25	; 0x19
    222a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    222c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    222e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	4a e7       	ldi	r20, 0x7A	; 122
    2236:	53 e4       	ldi	r21, 0x43	; 67
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	8d 8b       	std	Y+21, r24	; 0x15
    2242:	9e 8b       	std	Y+22, r25	; 0x16
    2244:	af 8b       	std	Y+23, r26	; 0x17
    2246:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2248:	6d 89       	ldd	r22, Y+21	; 0x15
    224a:	7e 89       	ldd	r23, Y+22	; 0x16
    224c:	8f 89       	ldd	r24, Y+23	; 0x17
    224e:	98 8d       	ldd	r25, Y+24	; 0x18
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	2c f4       	brge	.+10     	; 0x226a <LCD_init+0x7a>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9c 8b       	std	Y+20, r25	; 0x14
    2266:	8b 8b       	std	Y+19, r24	; 0x13
    2268:	3f c0       	rjmp	.+126    	; 0x22e8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    226a:	6d 89       	ldd	r22, Y+21	; 0x15
    226c:	7e 89       	ldd	r23, Y+22	; 0x16
    226e:	8f 89       	ldd	r24, Y+23	; 0x17
    2270:	98 8d       	ldd	r25, Y+24	; 0x18
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	57 e4       	ldi	r21, 0x47	; 71
    227a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	4c f5       	brge	.+82     	; 0x22d4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2282:	69 8d       	ldd	r22, Y+25	; 0x19
    2284:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2288:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e2       	ldi	r20, 0x20	; 32
    2290:	51 e4       	ldi	r21, 0x41	; 65
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9c 8b       	std	Y+20, r25	; 0x14
    22a8:	8b 8b       	std	Y+19, r24	; 0x13
    22aa:	0f c0       	rjmp	.+30     	; 0x22ca <LCD_init+0xda>
    22ac:	89 e1       	ldi	r24, 0x19	; 25
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9a 8b       	std	Y+18, r25	; 0x12
    22b2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22b4:	89 89       	ldd	r24, Y+17	; 0x11
    22b6:	9a 89       	ldd	r25, Y+18	; 0x12
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <LCD_init+0xc8>
    22bc:	9a 8b       	std	Y+18, r25	; 0x12
    22be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c0:	8b 89       	ldd	r24, Y+19	; 0x13
    22c2:	9c 89       	ldd	r25, Y+20	; 0x14
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	9c 8b       	std	Y+20, r25	; 0x14
    22c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ca:	8b 89       	ldd	r24, Y+19	; 0x13
    22cc:	9c 89       	ldd	r25, Y+20	; 0x14
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	69 f7       	brne	.-38     	; 0x22ac <LCD_init+0xbc>
    22d2:	14 c0       	rjmp	.+40     	; 0x22fc <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d4:	6d 89       	ldd	r22, Y+21	; 0x15
    22d6:	7e 89       	ldd	r23, Y+22	; 0x16
    22d8:	8f 89       	ldd	r24, Y+23	; 0x17
    22da:	98 8d       	ldd	r25, Y+24	; 0x18
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9c 8b       	std	Y+20, r25	; 0x14
    22e6:	8b 8b       	std	Y+19, r24	; 0x13
    22e8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ea:	9c 89       	ldd	r25, Y+20	; 0x14
    22ec:	98 8b       	std	Y+16, r25	; 0x10
    22ee:	8f 87       	std	Y+15, r24	; 0x0f
    22f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f2:	98 89       	ldd	r25, Y+16	; 0x10
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <LCD_init+0x104>
    22f8:	98 8b       	std	Y+16, r25	; 0x10
    22fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	
	#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	41 e0       	ldi	r20, 0x01	; 1
    2302:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	62 e0       	ldi	r22, 0x02	; 2
    2314:	41 e0       	ldi	r20, 0x01	; 1
    2316:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	64 e0       	ldi	r22, 0x04	; 4
    231e:	41 e0       	ldi	r20, 0x01	; 1
    2320:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2324:	83 e3       	ldi	r24, 0x33	; 51
    2326:	0e 94 22 12 	call	0x2444	; 0x2444 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    232a:	82 e3       	ldi	r24, 0x32	; 50
    232c:	0e 94 22 12 	call	0x2444	; 0x2444 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2330:	88 e2       	ldi	r24, 0x28	; 40
    2332:	0e 94 22 12 	call	0x2444	; 0x2444 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	0e 94 22 12 	call	0x2444	; 0x2444 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    233c:	8c e0       	ldi	r24, 0x0C	; 12
    233e:	0e 94 22 12 	call	0x2444	; 0x2444 <LCD_sendCommand>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a0 e2       	ldi	r26, 0x20	; 32
    2348:	b1 e4       	ldi	r27, 0x41	; 65
    234a:	8b 87       	std	Y+11, r24	; 0x0b
    234c:	9c 87       	std	Y+12, r25	; 0x0c
    234e:	ad 87       	std	Y+13, r26	; 0x0d
    2350:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2352:	6b 85       	ldd	r22, Y+11	; 0x0b
    2354:	7c 85       	ldd	r23, Y+12	; 0x0c
    2356:	8d 85       	ldd	r24, Y+13	; 0x0d
    2358:	9e 85       	ldd	r25, Y+14	; 0x0e
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	4a e7       	ldi	r20, 0x7A	; 122
    2360:	53 e4       	ldi	r21, 0x43	; 67
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	8f 83       	std	Y+7, r24	; 0x07
    236c:	98 87       	std	Y+8, r25	; 0x08
    236e:	a9 87       	std	Y+9, r26	; 0x09
    2370:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2372:	6f 81       	ldd	r22, Y+7	; 0x07
    2374:	78 85       	ldd	r23, Y+8	; 0x08
    2376:	89 85       	ldd	r24, Y+9	; 0x09
    2378:	9a 85       	ldd	r25, Y+10	; 0x0a
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e8       	ldi	r20, 0x80	; 128
    2380:	5f e3       	ldi	r21, 0x3F	; 63
    2382:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2386:	88 23       	and	r24, r24
    2388:	2c f4       	brge	.+10     	; 0x2394 <LCD_init+0x1a4>
		__ticks = 1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	3f c0       	rjmp	.+126    	; 0x2412 <LCD_init+0x222>
	else if (__tmp > 65535)
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	4f e7       	ldi	r20, 0x7F	; 127
    23a2:	57 e4       	ldi	r21, 0x47	; 71
    23a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a8:	18 16       	cp	r1, r24
    23aa:	4c f5       	brge	.+82     	; 0x23fe <LCD_init+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e2       	ldi	r20, 0x20	; 32
    23ba:	51 e4       	ldi	r21, 0x41	; 65
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <LCD_init+0x204>
    23d6:	89 e1       	ldi	r24, 0x19	; 25
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9c 83       	std	Y+4, r25	; 0x04
    23dc:	8b 83       	std	Y+3, r24	; 0x03
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_init+0x1f2>
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ea:	8d 81       	ldd	r24, Y+5	; 0x05
    23ec:	9e 81       	ldd	r25, Y+6	; 0x06
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	8d 81       	ldd	r24, Y+5	; 0x05
    23f6:	9e 81       	ldd	r25, Y+6	; 0x06
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	69 f7       	brne	.-38     	; 0x23d6 <LCD_init+0x1e6>
    23fc:	14 c0       	rjmp	.+40     	; 0x2426 <LCD_init+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2400:	78 85       	ldd	r23, Y+8	; 0x08
    2402:	89 85       	ldd	r24, Y+9	; 0x09
    2404:	9a 85       	ldd	r25, Y+10	; 0x0a
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9e 83       	std	Y+6, r25	; 0x06
    2410:	8d 83       	std	Y+5, r24	; 0x05
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	9a 83       	std	Y+2, r25	; 0x02
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	9a 81       	ldd	r25, Y+2	; 0x02
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_init+0x22e>
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
	DIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

	#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2426:	8c e0       	ldi	r24, 0x0C	; 12
    2428:	0e 94 22 12 	call	0x2444	; 0x2444 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	0e 94 22 12 	call	0x2444	; 0x2444 <LCD_sendCommand>
}
    2432:	6c 96       	adiw	r28, 0x1c	; 28
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <LCD_sendCommand>:

/*
Send the required command to the screen
*/
void LCD_sendCommand(uint8 command){
    2444:	0f 93       	push	r16
    2446:	1f 93       	push	r17
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	c3 56       	subi	r28, 0x63	; 99
    2452:	d0 40       	sbci	r29, 0x00	; 0
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	fe 01       	movw	r30, r28
    2460:	ed 59       	subi	r30, 0x9D	; 157
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 83       	st	Z, r24
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);  	/*select command mode 0*/
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	63 e0       	ldi	r22, 0x03	; 3
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    2470:	fe 01       	movw	r30, r28
    2472:	e1 5a       	subi	r30, 0xA1	; 161
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	a0 e8       	ldi	r26, 0x80	; 128
    247c:	bf e3       	ldi	r27, 0x3F	; 63
    247e:	80 83       	st	Z, r24
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	a2 83       	std	Z+2, r26	; 0x02
    2484:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2486:	8e 01       	movw	r16, r28
    2488:	05 5a       	subi	r16, 0xA5	; 165
    248a:	1f 4f       	sbci	r17, 0xFF	; 255
    248c:	fe 01       	movw	r30, r28
    248e:	e1 5a       	subi	r30, 0xA1	; 161
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a e7       	ldi	r20, 0x7A	; 122
    24a0:	53 e4       	ldi	r21, 0x43	; 67
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	f8 01       	movw	r30, r16
    24ac:	80 83       	st	Z, r24
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	a2 83       	std	Z+2, r26	; 0x02
    24b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b4:	fe 01       	movw	r30, r28
    24b6:	e5 5a       	subi	r30, 0xA5	; 165
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	60 81       	ld	r22, Z
    24bc:	71 81       	ldd	r23, Z+1	; 0x01
    24be:	82 81       	ldd	r24, Z+2	; 0x02
    24c0:	93 81       	ldd	r25, Z+3	; 0x03
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e8       	ldi	r20, 0x80	; 128
    24c8:	5f e3       	ldi	r21, 0x3F	; 63
    24ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ce:	88 23       	and	r24, r24
    24d0:	44 f4       	brge	.+16     	; 0x24e2 <LCD_sendCommand+0x9e>
		__ticks = 1;
    24d2:	fe 01       	movw	r30, r28
    24d4:	e7 5a       	subi	r30, 0xA7	; 167
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
    24e0:	64 c0       	rjmp	.+200    	; 0x25aa <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    24e2:	fe 01       	movw	r30, r28
    24e4:	e5 5a       	subi	r30, 0xA5	; 165
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	60 81       	ld	r22, Z
    24ea:	71 81       	ldd	r23, Z+1	; 0x01
    24ec:	82 81       	ldd	r24, Z+2	; 0x02
    24ee:	93 81       	ldd	r25, Z+3	; 0x03
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	0c f0       	brlt	.+2      	; 0x2502 <LCD_sendCommand+0xbe>
    2500:	43 c0       	rjmp	.+134    	; 0x2588 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	fe 01       	movw	r30, r28
    2504:	e1 5a       	subi	r30, 0xA1	; 161
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	8e 01       	movw	r16, r28
    2522:	07 5a       	subi	r16, 0xA7	; 167
    2524:	1f 4f       	sbci	r17, 0xFF	; 255
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	f8 01       	movw	r30, r16
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
    2538:	1f c0       	rjmp	.+62     	; 0x2578 <LCD_sendCommand+0x134>
    253a:	fe 01       	movw	r30, r28
    253c:	e9 5a       	subi	r30, 0xA9	; 169
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	89 e1       	ldi	r24, 0x19	; 25
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	91 83       	std	Z+1, r25	; 0x01
    2546:	80 83       	st	Z, r24
    2548:	fe 01       	movw	r30, r28
    254a:	e9 5a       	subi	r30, 0xA9	; 169
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <LCD_sendCommand+0x10e>
    2556:	fe 01       	movw	r30, r28
    2558:	e9 5a       	subi	r30, 0xA9	; 169
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2560:	de 01       	movw	r26, r28
    2562:	a7 5a       	subi	r26, 0xA7	; 167
    2564:	bf 4f       	sbci	r27, 0xFF	; 255
    2566:	fe 01       	movw	r30, r28
    2568:	e7 5a       	subi	r30, 0xA7	; 167
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	11 96       	adiw	r26, 0x01	; 1
    2574:	9c 93       	st	X, r25
    2576:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	fe 01       	movw	r30, r28
    257a:	e7 5a       	subi	r30, 0xA7	; 167
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	d1 f6       	brne	.-76     	; 0x253a <LCD_sendCommand+0xf6>
    2586:	27 c0       	rjmp	.+78     	; 0x25d6 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2588:	8e 01       	movw	r16, r28
    258a:	07 5a       	subi	r16, 0xA7	; 167
    258c:	1f 4f       	sbci	r17, 0xFF	; 255
    258e:	fe 01       	movw	r30, r28
    2590:	e5 5a       	subi	r30, 0xA5	; 165
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	60 81       	ld	r22, Z
    2596:	71 81       	ldd	r23, Z+1	; 0x01
    2598:	82 81       	ldd	r24, Z+2	; 0x02
    259a:	93 81       	ldd	r25, Z+3	; 0x03
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	f8 01       	movw	r30, r16
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	80 83       	st	Z, r24
    25aa:	de 01       	movw	r26, r28
    25ac:	ab 5a       	subi	r26, 0xAB	; 171
    25ae:	bf 4f       	sbci	r27, 0xFF	; 255
    25b0:	fe 01       	movw	r30, r28
    25b2:	e7 5a       	subi	r30, 0xA7	; 167
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 81       	ld	r24, Z
    25b8:	91 81       	ldd	r25, Z+1	; 0x01
    25ba:	8d 93       	st	X+, r24
    25bc:	9c 93       	st	X, r25
    25be:	fe 01       	movw	r30, r28
    25c0:	eb 5a       	subi	r30, 0xAB	; 171
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 81       	ld	r24, Z
    25c6:	91 81       	ldd	r25, Z+1	; 0x01
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <LCD_sendCommand+0x184>
    25cc:	fe 01       	movw	r30, r28
    25ce:	eb 5a       	subi	r30, 0xAB	; 171
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);    /* Enable LCD E=1 */
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	62 e0       	ldi	r22, 0x02	; 2
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    25e0:	fe 01       	movw	r30, r28
    25e2:	ef 5a       	subi	r30, 0xAF	; 175
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 e8       	ldi	r26, 0x80	; 128
    25ec:	bf e3       	ldi	r27, 0x3F	; 63
    25ee:	80 83       	st	Z, r24
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	a2 83       	std	Z+2, r26	; 0x02
    25f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	8e 01       	movw	r16, r28
    25f8:	03 5b       	subi	r16, 0xB3	; 179
    25fa:	1f 4f       	sbci	r17, 0xFF	; 255
    25fc:	fe 01       	movw	r30, r28
    25fe:	ef 5a       	subi	r30, 0xAF	; 175
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	60 81       	ld	r22, Z
    2604:	71 81       	ldd	r23, Z+1	; 0x01
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	93 81       	ldd	r25, Z+3	; 0x03
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4a e7       	ldi	r20, 0x7A	; 122
    2610:	53 e4       	ldi	r21, 0x43	; 67
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	f8 01       	movw	r30, r16
    261c:	80 83       	st	Z, r24
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	a2 83       	std	Z+2, r26	; 0x02
    2622:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2624:	fe 01       	movw	r30, r28
    2626:	e3 5b       	subi	r30, 0xB3	; 179
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e8       	ldi	r20, 0x80	; 128
    2638:	5f e3       	ldi	r21, 0x3F	; 63
    263a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263e:	88 23       	and	r24, r24
    2640:	44 f4       	brge	.+16     	; 0x2652 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2642:	fe 01       	movw	r30, r28
    2644:	e5 5b       	subi	r30, 0xB5	; 181
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
    2650:	64 c0       	rjmp	.+200    	; 0x271a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2652:	fe 01       	movw	r30, r28
    2654:	e3 5b       	subi	r30, 0xB3	; 179
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	57 e4       	ldi	r21, 0x47	; 71
    2668:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	0c f0       	brlt	.+2      	; 0x2672 <LCD_sendCommand+0x22e>
    2670:	43 c0       	rjmp	.+134    	; 0x26f8 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2672:	fe 01       	movw	r30, r28
    2674:	ef 5a       	subi	r30, 0xAF	; 175
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e2       	ldi	r20, 0x20	; 32
    2686:	51 e4       	ldi	r21, 0x41	; 65
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	8e 01       	movw	r16, r28
    2692:	05 5b       	subi	r16, 0xB5	; 181
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	f8 01       	movw	r30, r16
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
    26a8:	1f c0       	rjmp	.+62     	; 0x26e8 <LCD_sendCommand+0x2a4>
    26aa:	fe 01       	movw	r30, r28
    26ac:	e7 5b       	subi	r30, 0xB7	; 183
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	89 e1       	ldi	r24, 0x19	; 25
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	91 83       	std	Z+1, r25	; 0x01
    26b6:	80 83       	st	Z, r24
    26b8:	fe 01       	movw	r30, r28
    26ba:	e7 5b       	subi	r30, 0xB7	; 183
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_sendCommand+0x27e>
    26c6:	fe 01       	movw	r30, r28
    26c8:	e7 5b       	subi	r30, 0xB7	; 183
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d0:	de 01       	movw	r26, r28
    26d2:	a5 5b       	subi	r26, 0xB5	; 181
    26d4:	bf 4f       	sbci	r27, 0xFF	; 255
    26d6:	fe 01       	movw	r30, r28
    26d8:	e5 5b       	subi	r30, 0xB5	; 181
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	11 96       	adiw	r26, 0x01	; 1
    26e4:	9c 93       	st	X, r25
    26e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e8:	fe 01       	movw	r30, r28
    26ea:	e5 5b       	subi	r30, 0xB5	; 181
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 81       	ld	r24, Z
    26f0:	91 81       	ldd	r25, Z+1	; 0x01
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	d1 f6       	brne	.-76     	; 0x26aa <LCD_sendCommand+0x266>
    26f6:	27 c0       	rjmp	.+78     	; 0x2746 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	8e 01       	movw	r16, r28
    26fa:	05 5b       	subi	r16, 0xB5	; 181
    26fc:	1f 4f       	sbci	r17, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	e3 5b       	subi	r30, 0xB3	; 179
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	60 81       	ld	r22, Z
    2706:	71 81       	ldd	r23, Z+1	; 0x01
    2708:	82 81       	ldd	r24, Z+2	; 0x02
    270a:	93 81       	ldd	r25, Z+3	; 0x03
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	f8 01       	movw	r30, r16
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	80 83       	st	Z, r24
    271a:	de 01       	movw	r26, r28
    271c:	a9 5b       	subi	r26, 0xB9	; 185
    271e:	bf 4f       	sbci	r27, 0xFF	; 255
    2720:	fe 01       	movw	r30, r28
    2722:	e5 5b       	subi	r30, 0xB5	; 181
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	8d 93       	st	X+, r24
    272c:	9c 93       	st	X, r25
    272e:	fe 01       	movw	r30, r28
    2730:	e9 5b       	subi	r30, 0xB9	; 185
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <LCD_sendCommand+0x2f4>
    273c:	fe 01       	movw	r30, r28
    273e:	e9 5b       	subi	r30, 0xB9	; 185
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	80 83       	st	Z, r24
	_delay_ms(1);
	#if(LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2746:	fe 01       	movw	r30, r28
    2748:	ed 59       	subi	r30, 0x9D	; 157
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	88 2f       	mov	r24, r24
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	80 71       	andi	r24, 0x10	; 16
    2754:	90 70       	andi	r25, 0x00	; 0
    2756:	95 95       	asr	r25
    2758:	87 95       	ror	r24
    275a:	95 95       	asr	r25
    275c:	87 95       	ror	r24
    275e:	95 95       	asr	r25
    2760:	87 95       	ror	r24
    2762:	95 95       	asr	r25
    2764:	87 95       	ror	r24
    2766:	98 2f       	mov	r25, r24
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	49 2f       	mov	r20, r25
    276e:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2772:	fe 01       	movw	r30, r28
    2774:	ed 59       	subi	r30, 0x9D	; 157
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 81       	ld	r24, Z
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	80 72       	andi	r24, 0x20	; 32
    2780:	90 70       	andi	r25, 0x00	; 0
    2782:	95 95       	asr	r25
    2784:	87 95       	ror	r24
    2786:	95 95       	asr	r25
    2788:	87 95       	ror	r24
    278a:	95 95       	asr	r25
    278c:	87 95       	ror	r24
    278e:	95 95       	asr	r25
    2790:	87 95       	ror	r24
    2792:	95 95       	asr	r25
    2794:	87 95       	ror	r24
    2796:	98 2f       	mov	r25, r24
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	61 e0       	ldi	r22, 0x01	; 1
    279c:	49 2f       	mov	r20, r25
    279e:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    27a2:	fe 01       	movw	r30, r28
    27a4:	ed 59       	subi	r30, 0x9D	; 157
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	80 81       	ld	r24, Z
    27aa:	88 2f       	mov	r24, r24
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	80 74       	andi	r24, 0x40	; 64
    27b0:	90 70       	andi	r25, 0x00	; 0
    27b2:	08 2e       	mov	r0, r24
    27b4:	89 2f       	mov	r24, r25
    27b6:	00 0c       	add	r0, r0
    27b8:	88 1f       	adc	r24, r24
    27ba:	99 0b       	sbc	r25, r25
    27bc:	00 0c       	add	r0, r0
    27be:	88 1f       	adc	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	98 2f       	mov	r25, r24
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	62 e0       	ldi	r22, 0x02	; 2
    27c8:	49 2f       	mov	r20, r25
    27ca:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    27ce:	fe 01       	movw	r30, r28
    27d0:	ed 59       	subi	r30, 0x9D	; 157
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	98 2f       	mov	r25, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	99 27       	eor	r25, r25
    27dc:	99 1f       	adc	r25, r25
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	64 e0       	ldi	r22, 0x04	; 4
    27e2:	49 2f       	mov	r20, r25
    27e4:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    27e8:	fe 01       	movw	r30, r28
    27ea:	ed 5b       	subi	r30, 0xBD	; 189
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 e8       	ldi	r26, 0x80	; 128
    27f4:	bf e3       	ldi	r27, 0x3F	; 63
    27f6:	80 83       	st	Z, r24
    27f8:	91 83       	std	Z+1, r25	; 0x01
    27fa:	a2 83       	std	Z+2, r26	; 0x02
    27fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	8e 01       	movw	r16, r28
    2800:	01 5c       	subi	r16, 0xC1	; 193
    2802:	1f 4f       	sbci	r17, 0xFF	; 255
    2804:	fe 01       	movw	r30, r28
    2806:	ed 5b       	subi	r30, 0xBD	; 189
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	4a e7       	ldi	r20, 0x7A	; 122
    2818:	53 e4       	ldi	r21, 0x43	; 67
    281a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	f8 01       	movw	r30, r16
    2824:	80 83       	st	Z, r24
    2826:	91 83       	std	Z+1, r25	; 0x01
    2828:	a2 83       	std	Z+2, r26	; 0x02
    282a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    282c:	fe 01       	movw	r30, r28
    282e:	ff 96       	adiw	r30, 0x3f	; 63
    2830:	60 81       	ld	r22, Z
    2832:	71 81       	ldd	r23, Z+1	; 0x01
    2834:	82 81       	ldd	r24, Z+2	; 0x02
    2836:	93 81       	ldd	r25, Z+3	; 0x03
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	2c f4       	brge	.+10     	; 0x2852 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9e af       	std	Y+62, r25	; 0x3e
    284e:	8d af       	std	Y+61, r24	; 0x3d
    2850:	46 c0       	rjmp	.+140    	; 0x28de <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2852:	fe 01       	movw	r30, r28
    2854:	ff 96       	adiw	r30, 0x3f	; 63
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	3f ef       	ldi	r19, 0xFF	; 255
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	57 e4       	ldi	r21, 0x47	; 71
    2866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286a:	18 16       	cp	r1, r24
    286c:	64 f5       	brge	.+88     	; 0x28c6 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286e:	fe 01       	movw	r30, r28
    2870:	ed 5b       	subi	r30, 0xBD	; 189
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	60 81       	ld	r22, Z
    2876:	71 81       	ldd	r23, Z+1	; 0x01
    2878:	82 81       	ldd	r24, Z+2	; 0x02
    287a:	93 81       	ldd	r25, Z+3	; 0x03
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e2       	ldi	r20, 0x20	; 32
    2882:	51 e4       	ldi	r21, 0x41	; 65
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	9e af       	std	Y+62, r25	; 0x3e
    289a:	8d af       	std	Y+61, r24	; 0x3d
    289c:	0f c0       	rjmp	.+30     	; 0x28bc <LCD_sendCommand+0x478>
    289e:	89 e1       	ldi	r24, 0x19	; 25
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9c af       	std	Y+60, r25	; 0x3c
    28a4:	8b af       	std	Y+59, r24	; 0x3b
    28a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    28a8:	9c ad       	ldd	r25, Y+60	; 0x3c
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <LCD_sendCommand+0x466>
    28ae:	9c af       	std	Y+60, r25	; 0x3c
    28b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	9e af       	std	Y+62, r25	; 0x3e
    28ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    28be:	9e ad       	ldd	r25, Y+62	; 0x3e
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	69 f7       	brne	.-38     	; 0x289e <LCD_sendCommand+0x45a>
    28c4:	16 c0       	rjmp	.+44     	; 0x28f2 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c6:	fe 01       	movw	r30, r28
    28c8:	ff 96       	adiw	r30, 0x3f	; 63
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9e af       	std	Y+62, r25	; 0x3e
    28dc:	8d af       	std	Y+61, r24	; 0x3d
    28de:	8d ad       	ldd	r24, Y+61	; 0x3d
    28e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    28e2:	9a af       	std	Y+58, r25	; 0x3a
    28e4:	89 af       	std	Y+57, r24	; 0x39
    28e6:	89 ad       	ldd	r24, Y+57	; 0x39
    28e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_sendCommand+0x4a6>
    28ee:	9a af       	std	Y+58, r25	; 0x3a
    28f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	62 e0       	ldi	r22, 0x02	; 2
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a0 e8       	ldi	r26, 0x80	; 128
    2902:	bf e3       	ldi	r27, 0x3F	; 63
    2904:	8d ab       	std	Y+53, r24	; 0x35
    2906:	9e ab       	std	Y+54, r25	; 0x36
    2908:	af ab       	std	Y+55, r26	; 0x37
    290a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	6d a9       	ldd	r22, Y+53	; 0x35
    290e:	7e a9       	ldd	r23, Y+54	; 0x36
    2910:	8f a9       	ldd	r24, Y+55	; 0x37
    2912:	98 ad       	ldd	r25, Y+56	; 0x38
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a e7       	ldi	r20, 0x7A	; 122
    291a:	53 e4       	ldi	r21, 0x43	; 67
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	89 ab       	std	Y+49, r24	; 0x31
    2926:	9a ab       	std	Y+50, r25	; 0x32
    2928:	ab ab       	std	Y+51, r26	; 0x33
    292a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    292c:	69 a9       	ldd	r22, Y+49	; 0x31
    292e:	7a a9       	ldd	r23, Y+50	; 0x32
    2930:	8b a9       	ldd	r24, Y+51	; 0x33
    2932:	9c a9       	ldd	r25, Y+52	; 0x34
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	2c f4       	brge	.+10     	; 0x294e <LCD_sendCommand+0x50a>
		__ticks = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	98 ab       	std	Y+48, r25	; 0x30
    294a:	8f a7       	std	Y+47, r24	; 0x2f
    294c:	3f c0       	rjmp	.+126    	; 0x29cc <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    294e:	69 a9       	ldd	r22, Y+49	; 0x31
    2950:	7a a9       	ldd	r23, Y+50	; 0x32
    2952:	8b a9       	ldd	r24, Y+51	; 0x33
    2954:	9c a9       	ldd	r25, Y+52	; 0x34
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	57 e4       	ldi	r21, 0x47	; 71
    295e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	4c f5       	brge	.+82     	; 0x29b8 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2966:	6d a9       	ldd	r22, Y+53	; 0x35
    2968:	7e a9       	ldd	r23, Y+54	; 0x36
    296a:	8f a9       	ldd	r24, Y+55	; 0x37
    296c:	98 ad       	ldd	r25, Y+56	; 0x38
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	98 ab       	std	Y+48, r25	; 0x30
    298c:	8f a7       	std	Y+47, r24	; 0x2f
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <LCD_sendCommand+0x56a>
    2990:	89 e1       	ldi	r24, 0x19	; 25
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9e a7       	std	Y+46, r25	; 0x2e
    2996:	8d a7       	std	Y+45, r24	; 0x2d
    2998:	8d a5       	ldd	r24, Y+45	; 0x2d
    299a:	9e a5       	ldd	r25, Y+46	; 0x2e
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <LCD_sendCommand+0x558>
    29a0:	9e a7       	std	Y+46, r25	; 0x2e
    29a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a6:	98 a9       	ldd	r25, Y+48	; 0x30
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	98 ab       	std	Y+48, r25	; 0x30
    29ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b0:	98 a9       	ldd	r25, Y+48	; 0x30
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	69 f7       	brne	.-38     	; 0x2990 <LCD_sendCommand+0x54c>
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b8:	69 a9       	ldd	r22, Y+49	; 0x31
    29ba:	7a a9       	ldd	r23, Y+50	; 0x32
    29bc:	8b a9       	ldd	r24, Y+51	; 0x33
    29be:	9c a9       	ldd	r25, Y+52	; 0x34
    29c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	98 ab       	std	Y+48, r25	; 0x30
    29ca:	8f a7       	std	Y+47, r24	; 0x2f
    29cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ce:	98 a9       	ldd	r25, Y+48	; 0x30
    29d0:	9c a7       	std	Y+44, r25	; 0x2c
    29d2:	8b a7       	std	Y+43, r24	; 0x2b
    29d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <LCD_sendCommand+0x594>
    29dc:	9c a7       	std	Y+44, r25	; 0x2c
    29de:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	62 e0       	ldi	r22, 0x02	; 2
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	a0 e8       	ldi	r26, 0x80	; 128
    29f0:	bf e3       	ldi	r27, 0x3F	; 63
    29f2:	8f a3       	std	Y+39, r24	; 0x27
    29f4:	98 a7       	std	Y+40, r25	; 0x28
    29f6:	a9 a7       	std	Y+41, r26	; 0x29
    29f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fa:	6f a1       	ldd	r22, Y+39	; 0x27
    29fc:	78 a5       	ldd	r23, Y+40	; 0x28
    29fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2a00:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	4a e7       	ldi	r20, 0x7A	; 122
    2a08:	53 e4       	ldi	r21, 0x43	; 67
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	8b a3       	std	Y+35, r24	; 0x23
    2a14:	9c a3       	std	Y+36, r25	; 0x24
    2a16:	ad a3       	std	Y+37, r26	; 0x25
    2a18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a20:	9e a1       	ldd	r25, Y+38	; 0x26
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e8       	ldi	r20, 0x80	; 128
    2a28:	5f e3       	ldi	r21, 0x3F	; 63
    2a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a2e:	88 23       	and	r24, r24
    2a30:	2c f4       	brge	.+10     	; 0x2a3c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	9a a3       	std	Y+34, r25	; 0x22
    2a38:	89 a3       	std	Y+33, r24	; 0x21
    2a3a:	3f c0       	rjmp	.+126    	; 0x2aba <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2a3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a40:	8d a1       	ldd	r24, Y+37	; 0x25
    2a42:	9e a1       	ldd	r25, Y+38	; 0x26
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	3f ef       	ldi	r19, 0xFF	; 255
    2a48:	4f e7       	ldi	r20, 0x7F	; 127
    2a4a:	57 e4       	ldi	r21, 0x47	; 71
    2a4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a50:	18 16       	cp	r1, r24
    2a52:	4c f5       	brge	.+82     	; 0x2aa6 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a54:	6f a1       	ldd	r22, Y+39	; 0x27
    2a56:	78 a5       	ldd	r23, Y+40	; 0x28
    2a58:	89 a5       	ldd	r24, Y+41	; 0x29
    2a5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e2       	ldi	r20, 0x20	; 32
    2a62:	51 e4       	ldi	r21, 0x41	; 65
    2a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	bc 01       	movw	r22, r24
    2a6e:	cd 01       	movw	r24, r26
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	9a a3       	std	Y+34, r25	; 0x22
    2a7a:	89 a3       	std	Y+33, r24	; 0x21
    2a7c:	0f c0       	rjmp	.+30     	; 0x2a9c <LCD_sendCommand+0x658>
    2a7e:	89 e1       	ldi	r24, 0x19	; 25
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	98 a3       	std	Y+32, r25	; 0x20
    2a84:	8f 8f       	std	Y+31, r24	; 0x1f
    2a86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a88:	98 a1       	ldd	r25, Y+32	; 0x20
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <LCD_sendCommand+0x646>
    2a8e:	98 a3       	std	Y+32, r25	; 0x20
    2a90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a92:	89 a1       	ldd	r24, Y+33	; 0x21
    2a94:	9a a1       	ldd	r25, Y+34	; 0x22
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	9a a3       	std	Y+34, r25	; 0x22
    2a9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a9e:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	69 f7       	brne	.-38     	; 0x2a7e <LCD_sendCommand+0x63a>
    2aa4:	14 c0       	rjmp	.+40     	; 0x2ace <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa6:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa8:	7c a1       	ldd	r23, Y+36	; 0x24
    2aaa:	8d a1       	ldd	r24, Y+37	; 0x25
    2aac:	9e a1       	ldd	r25, Y+38	; 0x26
    2aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	9a a3       	std	Y+34, r25	; 0x22
    2ab8:	89 a3       	std	Y+33, r24	; 0x21
    2aba:	89 a1       	ldd	r24, Y+33	; 0x21
    2abc:	9a a1       	ldd	r25, Y+34	; 0x22
    2abe:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ac2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <LCD_sendCommand+0x682>
    2aca:	9e 8f       	std	Y+30, r25	; 0x1e
    2acc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ed 59       	subi	r30, 0x9D	; 157
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	98 2f       	mov	r25, r24
    2ad8:	91 70       	andi	r25, 0x01	; 1
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	49 2f       	mov	r20, r25
    2ae0:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	ed 59       	subi	r30, 0x9D	; 157
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	80 81       	ld	r24, Z
    2aec:	88 2f       	mov	r24, r24
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	82 70       	andi	r24, 0x02	; 2
    2af2:	90 70       	andi	r25, 0x00	; 0
    2af4:	95 95       	asr	r25
    2af6:	87 95       	ror	r24
    2af8:	98 2f       	mov	r25, r24
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	61 e0       	ldi	r22, 0x01	; 1
    2afe:	49 2f       	mov	r20, r25
    2b00:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2b04:	fe 01       	movw	r30, r28
    2b06:	ed 59       	subi	r30, 0x9D	; 157
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 81       	ld	r24, Z
    2b0c:	88 2f       	mov	r24, r24
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	84 70       	andi	r24, 0x04	; 4
    2b12:	90 70       	andi	r25, 0x00	; 0
    2b14:	95 95       	asr	r25
    2b16:	87 95       	ror	r24
    2b18:	95 95       	asr	r25
    2b1a:	87 95       	ror	r24
    2b1c:	98 2f       	mov	r25, r24
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	62 e0       	ldi	r22, 0x02	; 2
    2b22:	49 2f       	mov	r20, r25
    2b24:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2b28:	fe 01       	movw	r30, r28
    2b2a:	ed 59       	subi	r30, 0x9D	; 157
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
    2b30:	88 2f       	mov	r24, r24
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	88 70       	andi	r24, 0x08	; 8
    2b36:	90 70       	andi	r25, 0x00	; 0
    2b38:	95 95       	asr	r25
    2b3a:	87 95       	ror	r24
    2b3c:	95 95       	asr	r25
    2b3e:	87 95       	ror	r24
    2b40:	95 95       	asr	r25
    2b42:	87 95       	ror	r24
    2b44:	98 2f       	mov	r25, r24
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	64 e0       	ldi	r22, 0x04	; 4
    2b4a:	49 2f       	mov	r20, r25
    2b4c:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a0 e8       	ldi	r26, 0x80	; 128
    2b56:	bf e3       	ldi	r27, 0x3F	; 63
    2b58:	89 8f       	std	Y+25, r24	; 0x19
    2b5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b60:	69 8d       	ldd	r22, Y+25	; 0x19
    2b62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	4a e7       	ldi	r20, 0x7A	; 122
    2b6e:	53 e4       	ldi	r21, 0x43	; 67
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	8d 8b       	std	Y+21, r24	; 0x15
    2b7a:	9e 8b       	std	Y+22, r25	; 0x16
    2b7c:	af 8b       	std	Y+23, r26	; 0x17
    2b7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b80:	6d 89       	ldd	r22, Y+21	; 0x15
    2b82:	7e 89       	ldd	r23, Y+22	; 0x16
    2b84:	8f 89       	ldd	r24, Y+23	; 0x17
    2b86:	98 8d       	ldd	r25, Y+24	; 0x18
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e8       	ldi	r20, 0x80	; 128
    2b8e:	5f e3       	ldi	r21, 0x3F	; 63
    2b90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b94:	88 23       	and	r24, r24
    2b96:	2c f4       	brge	.+10     	; 0x2ba2 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9c 8b       	std	Y+20, r25	; 0x14
    2b9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ba0:	3f c0       	rjmp	.+126    	; 0x2c20 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	3f ef       	ldi	r19, 0xFF	; 255
    2bae:	4f e7       	ldi	r20, 0x7F	; 127
    2bb0:	57 e4       	ldi	r21, 0x47	; 71
    2bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb6:	18 16       	cp	r1, r24
    2bb8:	4c f5       	brge	.+82     	; 0x2c0c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bba:	69 8d       	ldd	r22, Y+25	; 0x19
    2bbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e2       	ldi	r20, 0x20	; 32
    2bc8:	51 e4       	ldi	r21, 0x41	; 65
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9c 8b       	std	Y+20, r25	; 0x14
    2be0:	8b 8b       	std	Y+19, r24	; 0x13
    2be2:	0f c0       	rjmp	.+30     	; 0x2c02 <LCD_sendCommand+0x7be>
    2be4:	89 e1       	ldi	r24, 0x19	; 25
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	9a 8b       	std	Y+18, r25	; 0x12
    2bea:	89 8b       	std	Y+17, r24	; 0x11
    2bec:	89 89       	ldd	r24, Y+17	; 0x11
    2bee:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <LCD_sendCommand+0x7ac>
    2bf4:	9a 8b       	std	Y+18, r25	; 0x12
    2bf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	9c 8b       	std	Y+20, r25	; 0x14
    2c00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c02:	8b 89       	ldd	r24, Y+19	; 0x13
    2c04:	9c 89       	ldd	r25, Y+20	; 0x14
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	69 f7       	brne	.-38     	; 0x2be4 <LCD_sendCommand+0x7a0>
    2c0a:	14 c0       	rjmp	.+40     	; 0x2c34 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c10:	8f 89       	ldd	r24, Y+23	; 0x17
    2c12:	98 8d       	ldd	r25, Y+24	; 0x18
    2c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9c 8b       	std	Y+20, r25	; 0x14
    2c1e:	8b 8b       	std	Y+19, r24	; 0x13
    2c20:	8b 89       	ldd	r24, Y+19	; 0x13
    2c22:	9c 89       	ldd	r25, Y+20	; 0x14
    2c24:	98 8b       	std	Y+16, r25	; 0x10
    2c26:	8f 87       	std	Y+15, r24	; 0x0f
    2c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c2a:	98 89       	ldd	r25, Y+16	; 0x10
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <LCD_sendCommand+0x7e8>
    2c30:	98 8b       	std	Y+16, r25	; 0x10
    2c32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	62 e0       	ldi	r22, 0x02	; 2
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	a0 e8       	ldi	r26, 0x80	; 128
    2c44:	bf e3       	ldi	r27, 0x3F	; 63
    2c46:	8b 87       	std	Y+11, r24	; 0x0b
    2c48:	9c 87       	std	Y+12, r25	; 0x0c
    2c4a:	ad 87       	std	Y+13, r26	; 0x0d
    2c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	4a e7       	ldi	r20, 0x7A	; 122
    2c5c:	53 e4       	ldi	r21, 0x43	; 67
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	8f 83       	std	Y+7, r24	; 0x07
    2c68:	98 87       	std	Y+8, r25	; 0x08
    2c6a:	a9 87       	std	Y+9, r26	; 0x09
    2c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c70:	78 85       	ldd	r23, Y+8	; 0x08
    2c72:	89 85       	ldd	r24, Y+9	; 0x09
    2c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e8       	ldi	r20, 0x80	; 128
    2c7c:	5f e3       	ldi	r21, 0x3F	; 63
    2c7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c82:	88 23       	and	r24, r24
    2c84:	2c f4       	brge	.+10     	; 0x2c90 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	9e 83       	std	Y+6, r25	; 0x06
    2c8c:	8d 83       	std	Y+5, r24	; 0x05
    2c8e:	3f c0       	rjmp	.+126    	; 0x2d0e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2c90:	6f 81       	ldd	r22, Y+7	; 0x07
    2c92:	78 85       	ldd	r23, Y+8	; 0x08
    2c94:	89 85       	ldd	r24, Y+9	; 0x09
    2c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	3f ef       	ldi	r19, 0xFF	; 255
    2c9c:	4f e7       	ldi	r20, 0x7F	; 127
    2c9e:	57 e4       	ldi	r21, 0x47	; 71
    2ca0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca4:	18 16       	cp	r1, r24
    2ca6:	4c f5       	brge	.+82     	; 0x2cfa <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e2       	ldi	r20, 0x20	; 32
    2cb6:	51 e4       	ldi	r21, 0x41	; 65
    2cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	9e 83       	std	Y+6, r25	; 0x06
    2cce:	8d 83       	std	Y+5, r24	; 0x05
    2cd0:	0f c0       	rjmp	.+30     	; 0x2cf0 <LCD_sendCommand+0x8ac>
    2cd2:	89 e1       	ldi	r24, 0x19	; 25
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	9c 83       	std	Y+4, r25	; 0x04
    2cd8:	8b 83       	std	Y+3, r24	; 0x03
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <LCD_sendCommand+0x89a>
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf4:	00 97       	sbiw	r24, 0x00	; 0
    2cf6:	69 f7       	brne	.-38     	; 0x2cd2 <LCD_sendCommand+0x88e>
    2cf8:	14 c0       	rjmp	.+40     	; 0x2d22 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfc:	78 85       	ldd	r23, Y+8	; 0x08
    2cfe:	89 85       	ldd	r24, Y+9	; 0x09
    2d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	9e 83       	std	Y+6, r25	; 0x06
    2d0c:	8d 83       	std	Y+5, r24	; 0x05
    2d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d10:	9e 81       	ldd	r25, Y+6	; 0x06
    2d12:	9a 83       	std	Y+2, r25	; 0x02
    2d14:	89 83       	std	Y+1, r24	; 0x01
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <LCD_sendCommand+0x8d6>
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	89 83       	std	Y+1, r24	; 0x01
	#elif(LCD_DATA_BITS_MODE == 8)
	DIO_writePort(LCD_DATA_PORT_ID,command);
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	#endif
}
    2d22:	cd 59       	subi	r28, 0x9D	; 157
    2d24:	df 4f       	sbci	r29, 0xFF	; 255
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	1f 91       	pop	r17
    2d36:	0f 91       	pop	r16
    2d38:	08 95       	ret

00002d3a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data){
    2d3a:	0f 93       	push	r16
    2d3c:	1f 93       	push	r17
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	c3 56       	subi	r28, 0x63	; 99
    2d48:	d0 40       	sbci	r29, 0x00	; 0
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	f8 94       	cli
    2d4e:	de bf       	out	0x3e, r29	; 62
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	cd bf       	out	0x3d, r28	; 61
    2d54:	fe 01       	movw	r30, r28
    2d56:	ed 59       	subi	r30, 0x9D	; 157
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 83       	st	Z, r24
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);  /*Select data mode 1*/
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	63 e0       	ldi	r22, 0x03	; 3
    2d60:	41 e0       	ldi	r20, 0x01	; 1
    2d62:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    2d66:	fe 01       	movw	r30, r28
    2d68:	e1 5a       	subi	r30, 0xA1	; 161
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	a0 e8       	ldi	r26, 0x80	; 128
    2d72:	bf e3       	ldi	r27, 0x3F	; 63
    2d74:	80 83       	st	Z, r24
    2d76:	91 83       	std	Z+1, r25	; 0x01
    2d78:	a2 83       	std	Z+2, r26	; 0x02
    2d7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7c:	8e 01       	movw	r16, r28
    2d7e:	05 5a       	subi	r16, 0xA5	; 165
    2d80:	1f 4f       	sbci	r17, 0xFF	; 255
    2d82:	fe 01       	movw	r30, r28
    2d84:	e1 5a       	subi	r30, 0xA1	; 161
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	60 81       	ld	r22, Z
    2d8a:	71 81       	ldd	r23, Z+1	; 0x01
    2d8c:	82 81       	ldd	r24, Z+2	; 0x02
    2d8e:	93 81       	ldd	r25, Z+3	; 0x03
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	4a e7       	ldi	r20, 0x7A	; 122
    2d96:	53 e4       	ldi	r21, 0x43	; 67
    2d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	f8 01       	movw	r30, r16
    2da2:	80 83       	st	Z, r24
    2da4:	91 83       	std	Z+1, r25	; 0x01
    2da6:	a2 83       	std	Z+2, r26	; 0x02
    2da8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2daa:	fe 01       	movw	r30, r28
    2dac:	e5 5a       	subi	r30, 0xA5	; 165
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	60 81       	ld	r22, Z
    2db2:	71 81       	ldd	r23, Z+1	; 0x01
    2db4:	82 81       	ldd	r24, Z+2	; 0x02
    2db6:	93 81       	ldd	r25, Z+3	; 0x03
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e8       	ldi	r20, 0x80	; 128
    2dbe:	5f e3       	ldi	r21, 0x3F	; 63
    2dc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc4:	88 23       	and	r24, r24
    2dc6:	44 f4       	brge	.+16     	; 0x2dd8 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e7 5a       	subi	r30, 0xA7	; 167
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	91 83       	std	Z+1, r25	; 0x01
    2dd4:	80 83       	st	Z, r24
    2dd6:	64 c0       	rjmp	.+200    	; 0x2ea0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2dd8:	fe 01       	movw	r30, r28
    2dda:	e5 5a       	subi	r30, 0xA5	; 165
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	82 81       	ldd	r24, Z+2	; 0x02
    2de4:	93 81       	ldd	r25, Z+3	; 0x03
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	3f ef       	ldi	r19, 0xFF	; 255
    2dea:	4f e7       	ldi	r20, 0x7F	; 127
    2dec:	57 e4       	ldi	r21, 0x47	; 71
    2dee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df2:	18 16       	cp	r1, r24
    2df4:	0c f0       	brlt	.+2      	; 0x2df8 <LCD_displayCharacter+0xbe>
    2df6:	43 c0       	rjmp	.+134    	; 0x2e7e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df8:	fe 01       	movw	r30, r28
    2dfa:	e1 5a       	subi	r30, 0xA1	; 161
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	60 81       	ld	r22, Z
    2e00:	71 81       	ldd	r23, Z+1	; 0x01
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	93 81       	ldd	r25, Z+3	; 0x03
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e2       	ldi	r20, 0x20	; 32
    2e0c:	51 e4       	ldi	r21, 0x41	; 65
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8e 01       	movw	r16, r28
    2e18:	07 5a       	subi	r16, 0xA7	; 167
    2e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	f8 01       	movw	r30, r16
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	80 83       	st	Z, r24
    2e2e:	1f c0       	rjmp	.+62     	; 0x2e6e <LCD_displayCharacter+0x134>
    2e30:	fe 01       	movw	r30, r28
    2e32:	e9 5a       	subi	r30, 0xA9	; 169
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	89 e1       	ldi	r24, 0x19	; 25
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	80 83       	st	Z, r24
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e9 5a       	subi	r30, 0xA9	; 169
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 81       	ld	r24, Z
    2e46:	91 81       	ldd	r25, Z+1	; 0x01
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	f1 f7       	brne	.-4      	; 0x2e48 <LCD_displayCharacter+0x10e>
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e9 5a       	subi	r30, 0xA9	; 169
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e56:	de 01       	movw	r26, r28
    2e58:	a7 5a       	subi	r26, 0xA7	; 167
    2e5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e7 5a       	subi	r30, 0xA7	; 167
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 81       	ld	r24, Z
    2e64:	91 81       	ldd	r25, Z+1	; 0x01
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	11 96       	adiw	r26, 0x01	; 1
    2e6a:	9c 93       	st	X, r25
    2e6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6e:	fe 01       	movw	r30, r28
    2e70:	e7 5a       	subi	r30, 0xA7	; 167
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	80 81       	ld	r24, Z
    2e76:	91 81       	ldd	r25, Z+1	; 0x01
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	d1 f6       	brne	.-76     	; 0x2e30 <LCD_displayCharacter+0xf6>
    2e7c:	27 c0       	rjmp	.+78     	; 0x2ecc <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7e:	8e 01       	movw	r16, r28
    2e80:	07 5a       	subi	r16, 0xA7	; 167
    2e82:	1f 4f       	sbci	r17, 0xFF	; 255
    2e84:	fe 01       	movw	r30, r28
    2e86:	e5 5a       	subi	r30, 0xA5	; 165
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	60 81       	ld	r22, Z
    2e8c:	71 81       	ldd	r23, Z+1	; 0x01
    2e8e:	82 81       	ldd	r24, Z+2	; 0x02
    2e90:	93 81       	ldd	r25, Z+3	; 0x03
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	f8 01       	movw	r30, r16
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
    2ea0:	de 01       	movw	r26, r28
    2ea2:	ab 5a       	subi	r26, 0xAB	; 171
    2ea4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e7 5a       	subi	r30, 0xA7	; 167
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 81       	ld	r24, Z
    2eae:	91 81       	ldd	r25, Z+1	; 0x01
    2eb0:	8d 93       	st	X+, r24
    2eb2:	9c 93       	st	X, r25
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	eb 5a       	subi	r30, 0xAB	; 171
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <LCD_displayCharacter+0x184>
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	eb 5a       	subi	r30, 0xAB	; 171
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);    /* Enable LCD E=1 */
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	62 e0       	ldi	r22, 0x02	; 2
    2ed0:	41 e0       	ldi	r20, 0x01	; 1
    2ed2:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	ef 5a       	subi	r30, 0xAF	; 175
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	a0 e8       	ldi	r26, 0x80	; 128
    2ee2:	bf e3       	ldi	r27, 0x3F	; 63
    2ee4:	80 83       	st	Z, r24
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	a2 83       	std	Z+2, r26	; 0x02
    2eea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eec:	8e 01       	movw	r16, r28
    2eee:	03 5b       	subi	r16, 0xB3	; 179
    2ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	ef 5a       	subi	r30, 0xAF	; 175
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	60 81       	ld	r22, Z
    2efa:	71 81       	ldd	r23, Z+1	; 0x01
    2efc:	82 81       	ldd	r24, Z+2	; 0x02
    2efe:	93 81       	ldd	r25, Z+3	; 0x03
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	4a e7       	ldi	r20, 0x7A	; 122
    2f06:	53 e4       	ldi	r21, 0x43	; 67
    2f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	f8 01       	movw	r30, r16
    2f12:	80 83       	st	Z, r24
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	a2 83       	std	Z+2, r26	; 0x02
    2f18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e3 5b       	subi	r30, 0xB3	; 179
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	60 81       	ld	r22, Z
    2f22:	71 81       	ldd	r23, Z+1	; 0x01
    2f24:	82 81       	ldd	r24, Z+2	; 0x02
    2f26:	93 81       	ldd	r25, Z+3	; 0x03
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e8       	ldi	r20, 0x80	; 128
    2f2e:	5f e3       	ldi	r21, 0x3F	; 63
    2f30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f34:	88 23       	and	r24, r24
    2f36:	44 f4       	brge	.+16     	; 0x2f48 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e5 5b       	subi	r30, 0xB5	; 181
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	91 83       	std	Z+1, r25	; 0x01
    2f44:	80 83       	st	Z, r24
    2f46:	64 c0       	rjmp	.+200    	; 0x3010 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2f48:	fe 01       	movw	r30, r28
    2f4a:	e3 5b       	subi	r30, 0xB3	; 179
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	60 81       	ld	r22, Z
    2f50:	71 81       	ldd	r23, Z+1	; 0x01
    2f52:	82 81       	ldd	r24, Z+2	; 0x02
    2f54:	93 81       	ldd	r25, Z+3	; 0x03
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	3f ef       	ldi	r19, 0xFF	; 255
    2f5a:	4f e7       	ldi	r20, 0x7F	; 127
    2f5c:	57 e4       	ldi	r21, 0x47	; 71
    2f5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f62:	18 16       	cp	r1, r24
    2f64:	0c f0       	brlt	.+2      	; 0x2f68 <LCD_displayCharacter+0x22e>
    2f66:	43 c0       	rjmp	.+134    	; 0x2fee <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f68:	fe 01       	movw	r30, r28
    2f6a:	ef 5a       	subi	r30, 0xAF	; 175
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	60 81       	ld	r22, Z
    2f70:	71 81       	ldd	r23, Z+1	; 0x01
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e2       	ldi	r20, 0x20	; 32
    2f7c:	51 e4       	ldi	r21, 0x41	; 65
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	8e 01       	movw	r16, r28
    2f88:	05 5b       	subi	r16, 0xB5	; 181
    2f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	f8 01       	movw	r30, r16
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	80 83       	st	Z, r24
    2f9e:	1f c0       	rjmp	.+62     	; 0x2fde <LCD_displayCharacter+0x2a4>
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	e7 5b       	subi	r30, 0xB7	; 183
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	89 e1       	ldi	r24, 0x19	; 25
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	80 83       	st	Z, r24
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e7 5b       	subi	r30, 0xB7	; 183
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	80 81       	ld	r24, Z
    2fb6:	91 81       	ldd	r25, Z+1	; 0x01
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <LCD_displayCharacter+0x27e>
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e7 5b       	subi	r30, 0xB7	; 183
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	91 83       	std	Z+1, r25	; 0x01
    2fc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc6:	de 01       	movw	r26, r28
    2fc8:	a5 5b       	subi	r26, 0xB5	; 181
    2fca:	bf 4f       	sbci	r27, 0xFF	; 255
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e5 5b       	subi	r30, 0xB5	; 181
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	80 81       	ld	r24, Z
    2fd4:	91 81       	ldd	r25, Z+1	; 0x01
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	11 96       	adiw	r26, 0x01	; 1
    2fda:	9c 93       	st	X, r25
    2fdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e5 5b       	subi	r30, 0xB5	; 181
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 81       	ld	r24, Z
    2fe6:	91 81       	ldd	r25, Z+1	; 0x01
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	d1 f6       	brne	.-76     	; 0x2fa0 <LCD_displayCharacter+0x266>
    2fec:	27 c0       	rjmp	.+78     	; 0x303c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fee:	8e 01       	movw	r16, r28
    2ff0:	05 5b       	subi	r16, 0xB5	; 181
    2ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	e3 5b       	subi	r30, 0xB3	; 179
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	60 81       	ld	r22, Z
    2ffc:	71 81       	ldd	r23, Z+1	; 0x01
    2ffe:	82 81       	ldd	r24, Z+2	; 0x02
    3000:	93 81       	ldd	r25, Z+3	; 0x03
    3002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	f8 01       	movw	r30, r16
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	80 83       	st	Z, r24
    3010:	de 01       	movw	r26, r28
    3012:	a9 5b       	subi	r26, 0xB9	; 185
    3014:	bf 4f       	sbci	r27, 0xFF	; 255
    3016:	fe 01       	movw	r30, r28
    3018:	e5 5b       	subi	r30, 0xB5	; 181
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	80 81       	ld	r24, Z
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	8d 93       	st	X+, r24
    3022:	9c 93       	st	X, r25
    3024:	fe 01       	movw	r30, r28
    3026:	e9 5b       	subi	r30, 0xB9	; 185
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	80 81       	ld	r24, Z
    302c:	91 81       	ldd	r25, Z+1	; 0x01
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <LCD_displayCharacter+0x2f4>
    3032:	fe 01       	movw	r30, r28
    3034:	e9 5b       	subi	r30, 0xB9	; 185
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	91 83       	std	Z+1, r25	; 0x01
    303a:	80 83       	st	Z, r24
	_delay_ms(1);

	#if(LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    303c:	fe 01       	movw	r30, r28
    303e:	ed 59       	subi	r30, 0x9D	; 157
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	80 81       	ld	r24, Z
    3044:	88 2f       	mov	r24, r24
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	80 71       	andi	r24, 0x10	; 16
    304a:	90 70       	andi	r25, 0x00	; 0
    304c:	95 95       	asr	r25
    304e:	87 95       	ror	r24
    3050:	95 95       	asr	r25
    3052:	87 95       	ror	r24
    3054:	95 95       	asr	r25
    3056:	87 95       	ror	r24
    3058:	95 95       	asr	r25
    305a:	87 95       	ror	r24
    305c:	98 2f       	mov	r25, r24
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	60 e0       	ldi	r22, 0x00	; 0
    3062:	49 2f       	mov	r20, r25
    3064:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    3068:	fe 01       	movw	r30, r28
    306a:	ed 59       	subi	r30, 0x9D	; 157
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	80 81       	ld	r24, Z
    3070:	88 2f       	mov	r24, r24
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	80 72       	andi	r24, 0x20	; 32
    3076:	90 70       	andi	r25, 0x00	; 0
    3078:	95 95       	asr	r25
    307a:	87 95       	ror	r24
    307c:	95 95       	asr	r25
    307e:	87 95       	ror	r24
    3080:	95 95       	asr	r25
    3082:	87 95       	ror	r24
    3084:	95 95       	asr	r25
    3086:	87 95       	ror	r24
    3088:	95 95       	asr	r25
    308a:	87 95       	ror	r24
    308c:	98 2f       	mov	r25, r24
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	61 e0       	ldi	r22, 0x01	; 1
    3092:	49 2f       	mov	r20, r25
    3094:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    3098:	fe 01       	movw	r30, r28
    309a:	ed 59       	subi	r30, 0x9D	; 157
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 81       	ld	r24, Z
    30a0:	88 2f       	mov	r24, r24
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	80 74       	andi	r24, 0x40	; 64
    30a6:	90 70       	andi	r25, 0x00	; 0
    30a8:	08 2e       	mov	r0, r24
    30aa:	89 2f       	mov	r24, r25
    30ac:	00 0c       	add	r0, r0
    30ae:	88 1f       	adc	r24, r24
    30b0:	99 0b       	sbc	r25, r25
    30b2:	00 0c       	add	r0, r0
    30b4:	88 1f       	adc	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	98 2f       	mov	r25, r24
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	62 e0       	ldi	r22, 0x02	; 2
    30be:	49 2f       	mov	r20, r25
    30c0:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    30c4:	fe 01       	movw	r30, r28
    30c6:	ed 59       	subi	r30, 0x9D	; 157
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	80 81       	ld	r24, Z
    30cc:	98 2f       	mov	r25, r24
    30ce:	99 1f       	adc	r25, r25
    30d0:	99 27       	eor	r25, r25
    30d2:	99 1f       	adc	r25, r25
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	64 e0       	ldi	r22, 0x04	; 4
    30d8:	49 2f       	mov	r20, r25
    30da:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    30de:	fe 01       	movw	r30, r28
    30e0:	ed 5b       	subi	r30, 0xBD	; 189
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	a0 e8       	ldi	r26, 0x80	; 128
    30ea:	bf e3       	ldi	r27, 0x3F	; 63
    30ec:	80 83       	st	Z, r24
    30ee:	91 83       	std	Z+1, r25	; 0x01
    30f0:	a2 83       	std	Z+2, r26	; 0x02
    30f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f4:	8e 01       	movw	r16, r28
    30f6:	01 5c       	subi	r16, 0xC1	; 193
    30f8:	1f 4f       	sbci	r17, 0xFF	; 255
    30fa:	fe 01       	movw	r30, r28
    30fc:	ed 5b       	subi	r30, 0xBD	; 189
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	4a e7       	ldi	r20, 0x7A	; 122
    310e:	53 e4       	ldi	r21, 0x43	; 67
    3110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	f8 01       	movw	r30, r16
    311a:	80 83       	st	Z, r24
    311c:	91 83       	std	Z+1, r25	; 0x01
    311e:	a2 83       	std	Z+2, r26	; 0x02
    3120:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3122:	fe 01       	movw	r30, r28
    3124:	ff 96       	adiw	r30, 0x3f	; 63
    3126:	60 81       	ld	r22, Z
    3128:	71 81       	ldd	r23, Z+1	; 0x01
    312a:	82 81       	ldd	r24, Z+2	; 0x02
    312c:	93 81       	ldd	r25, Z+3	; 0x03
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	40 e8       	ldi	r20, 0x80	; 128
    3134:	5f e3       	ldi	r21, 0x3F	; 63
    3136:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    313a:	88 23       	and	r24, r24
    313c:	2c f4       	brge	.+10     	; 0x3148 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	9e af       	std	Y+62, r25	; 0x3e
    3144:	8d af       	std	Y+61, r24	; 0x3d
    3146:	46 c0       	rjmp	.+140    	; 0x31d4 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    3148:	fe 01       	movw	r30, r28
    314a:	ff 96       	adiw	r30, 0x3f	; 63
    314c:	60 81       	ld	r22, Z
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	3f ef       	ldi	r19, 0xFF	; 255
    3158:	4f e7       	ldi	r20, 0x7F	; 127
    315a:	57 e4       	ldi	r21, 0x47	; 71
    315c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3160:	18 16       	cp	r1, r24
    3162:	64 f5       	brge	.+88     	; 0x31bc <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3164:	fe 01       	movw	r30, r28
    3166:	ed 5b       	subi	r30, 0xBD	; 189
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	60 81       	ld	r22, Z
    316c:	71 81       	ldd	r23, Z+1	; 0x01
    316e:	82 81       	ldd	r24, Z+2	; 0x02
    3170:	93 81       	ldd	r25, Z+3	; 0x03
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e2       	ldi	r20, 0x20	; 32
    3178:	51 e4       	ldi	r21, 0x41	; 65
    317a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	bc 01       	movw	r22, r24
    3184:	cd 01       	movw	r24, r26
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9e af       	std	Y+62, r25	; 0x3e
    3190:	8d af       	std	Y+61, r24	; 0x3d
    3192:	0f c0       	rjmp	.+30     	; 0x31b2 <LCD_displayCharacter+0x478>
    3194:	89 e1       	ldi	r24, 0x19	; 25
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9c af       	std	Y+60, r25	; 0x3c
    319a:	8b af       	std	Y+59, r24	; 0x3b
    319c:	8b ad       	ldd	r24, Y+59	; 0x3b
    319e:	9c ad       	ldd	r25, Y+60	; 0x3c
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <LCD_displayCharacter+0x466>
    31a4:	9c af       	std	Y+60, r25	; 0x3c
    31a6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    31aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	9e af       	std	Y+62, r25	; 0x3e
    31b0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    31b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    31b6:	00 97       	sbiw	r24, 0x00	; 0
    31b8:	69 f7       	brne	.-38     	; 0x3194 <LCD_displayCharacter+0x45a>
    31ba:	16 c0       	rjmp	.+44     	; 0x31e8 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31bc:	fe 01       	movw	r30, r28
    31be:	ff 96       	adiw	r30, 0x3f	; 63
    31c0:	60 81       	ld	r22, Z
    31c2:	71 81       	ldd	r23, Z+1	; 0x01
    31c4:	82 81       	ldd	r24, Z+2	; 0x02
    31c6:	93 81       	ldd	r25, Z+3	; 0x03
    31c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	9e af       	std	Y+62, r25	; 0x3e
    31d2:	8d af       	std	Y+61, r24	; 0x3d
    31d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    31d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    31d8:	9a af       	std	Y+58, r25	; 0x3a
    31da:	89 af       	std	Y+57, r24	; 0x39
    31dc:	89 ad       	ldd	r24, Y+57	; 0x39
    31de:	9a ad       	ldd	r25, Y+58	; 0x3a
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	f1 f7       	brne	.-4      	; 0x31e0 <LCD_displayCharacter+0x4a6>
    31e4:	9a af       	std	Y+58, r25	; 0x3a
    31e6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	62 e0       	ldi	r22, 0x02	; 2
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a0 e8       	ldi	r26, 0x80	; 128
    31f8:	bf e3       	ldi	r27, 0x3F	; 63
    31fa:	8d ab       	std	Y+53, r24	; 0x35
    31fc:	9e ab       	std	Y+54, r25	; 0x36
    31fe:	af ab       	std	Y+55, r26	; 0x37
    3200:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3202:	6d a9       	ldd	r22, Y+53	; 0x35
    3204:	7e a9       	ldd	r23, Y+54	; 0x36
    3206:	8f a9       	ldd	r24, Y+55	; 0x37
    3208:	98 ad       	ldd	r25, Y+56	; 0x38
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4a e7       	ldi	r20, 0x7A	; 122
    3210:	53 e4       	ldi	r21, 0x43	; 67
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	89 ab       	std	Y+49, r24	; 0x31
    321c:	9a ab       	std	Y+50, r25	; 0x32
    321e:	ab ab       	std	Y+51, r26	; 0x33
    3220:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3222:	69 a9       	ldd	r22, Y+49	; 0x31
    3224:	7a a9       	ldd	r23, Y+50	; 0x32
    3226:	8b a9       	ldd	r24, Y+51	; 0x33
    3228:	9c a9       	ldd	r25, Y+52	; 0x34
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e8       	ldi	r20, 0x80	; 128
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3236:	88 23       	and	r24, r24
    3238:	2c f4       	brge	.+10     	; 0x3244 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	98 ab       	std	Y+48, r25	; 0x30
    3240:	8f a7       	std	Y+47, r24	; 0x2f
    3242:	3f c0       	rjmp	.+126    	; 0x32c2 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3244:	69 a9       	ldd	r22, Y+49	; 0x31
    3246:	7a a9       	ldd	r23, Y+50	; 0x32
    3248:	8b a9       	ldd	r24, Y+51	; 0x33
    324a:	9c a9       	ldd	r25, Y+52	; 0x34
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	4f e7       	ldi	r20, 0x7F	; 127
    3252:	57 e4       	ldi	r21, 0x47	; 71
    3254:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3258:	18 16       	cp	r1, r24
    325a:	4c f5       	brge	.+82     	; 0x32ae <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325c:	6d a9       	ldd	r22, Y+53	; 0x35
    325e:	7e a9       	ldd	r23, Y+54	; 0x36
    3260:	8f a9       	ldd	r24, Y+55	; 0x37
    3262:	98 ad       	ldd	r25, Y+56	; 0x38
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e2       	ldi	r20, 0x20	; 32
    326a:	51 e4       	ldi	r21, 0x41	; 65
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	bc 01       	movw	r22, r24
    3276:	cd 01       	movw	r24, r26
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	98 ab       	std	Y+48, r25	; 0x30
    3282:	8f a7       	std	Y+47, r24	; 0x2f
    3284:	0f c0       	rjmp	.+30     	; 0x32a4 <LCD_displayCharacter+0x56a>
    3286:	89 e1       	ldi	r24, 0x19	; 25
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	9e a7       	std	Y+46, r25	; 0x2e
    328c:	8d a7       	std	Y+45, r24	; 0x2d
    328e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3290:	9e a5       	ldd	r25, Y+46	; 0x2e
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <LCD_displayCharacter+0x558>
    3296:	9e a7       	std	Y+46, r25	; 0x2e
    3298:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	8f a5       	ldd	r24, Y+47	; 0x2f
    329c:	98 a9       	ldd	r25, Y+48	; 0x30
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	98 ab       	std	Y+48, r25	; 0x30
    32a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a6:	98 a9       	ldd	r25, Y+48	; 0x30
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	69 f7       	brne	.-38     	; 0x3286 <LCD_displayCharacter+0x54c>
    32ac:	14 c0       	rjmp	.+40     	; 0x32d6 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ae:	69 a9       	ldd	r22, Y+49	; 0x31
    32b0:	7a a9       	ldd	r23, Y+50	; 0x32
    32b2:	8b a9       	ldd	r24, Y+51	; 0x33
    32b4:	9c a9       	ldd	r25, Y+52	; 0x34
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	98 ab       	std	Y+48, r25	; 0x30
    32c0:	8f a7       	std	Y+47, r24	; 0x2f
    32c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32c4:	98 a9       	ldd	r25, Y+48	; 0x30
    32c6:	9c a7       	std	Y+44, r25	; 0x2c
    32c8:	8b a7       	std	Y+43, r24	; 0x2b
    32ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    32cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <LCD_displayCharacter+0x594>
    32d2:	9c a7       	std	Y+44, r25	; 0x2c
    32d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	62 e0       	ldi	r22, 0x02	; 2
    32da:	41 e0       	ldi	r20, 0x01	; 1
    32dc:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	a0 e8       	ldi	r26, 0x80	; 128
    32e6:	bf e3       	ldi	r27, 0x3F	; 63
    32e8:	8f a3       	std	Y+39, r24	; 0x27
    32ea:	98 a7       	std	Y+40, r25	; 0x28
    32ec:	a9 a7       	std	Y+41, r26	; 0x29
    32ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f0:	6f a1       	ldd	r22, Y+39	; 0x27
    32f2:	78 a5       	ldd	r23, Y+40	; 0x28
    32f4:	89 a5       	ldd	r24, Y+41	; 0x29
    32f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	4a e7       	ldi	r20, 0x7A	; 122
    32fe:	53 e4       	ldi	r21, 0x43	; 67
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	8b a3       	std	Y+35, r24	; 0x23
    330a:	9c a3       	std	Y+36, r25	; 0x24
    330c:	ad a3       	std	Y+37, r26	; 0x25
    330e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3310:	6b a1       	ldd	r22, Y+35	; 0x23
    3312:	7c a1       	ldd	r23, Y+36	; 0x24
    3314:	8d a1       	ldd	r24, Y+37	; 0x25
    3316:	9e a1       	ldd	r25, Y+38	; 0x26
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e8       	ldi	r20, 0x80	; 128
    331e:	5f e3       	ldi	r21, 0x3F	; 63
    3320:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3324:	88 23       	and	r24, r24
    3326:	2c f4       	brge	.+10     	; 0x3332 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	9a a3       	std	Y+34, r25	; 0x22
    332e:	89 a3       	std	Y+33, r24	; 0x21
    3330:	3f c0       	rjmp	.+126    	; 0x33b0 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3332:	6b a1       	ldd	r22, Y+35	; 0x23
    3334:	7c a1       	ldd	r23, Y+36	; 0x24
    3336:	8d a1       	ldd	r24, Y+37	; 0x25
    3338:	9e a1       	ldd	r25, Y+38	; 0x26
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	3f ef       	ldi	r19, 0xFF	; 255
    333e:	4f e7       	ldi	r20, 0x7F	; 127
    3340:	57 e4       	ldi	r21, 0x47	; 71
    3342:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3346:	18 16       	cp	r1, r24
    3348:	4c f5       	brge	.+82     	; 0x339c <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334a:	6f a1       	ldd	r22, Y+39	; 0x27
    334c:	78 a5       	ldd	r23, Y+40	; 0x28
    334e:	89 a5       	ldd	r24, Y+41	; 0x29
    3350:	9a a5       	ldd	r25, Y+42	; 0x2a
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e2       	ldi	r20, 0x20	; 32
    3358:	51 e4       	ldi	r21, 0x41	; 65
    335a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	9a a3       	std	Y+34, r25	; 0x22
    3370:	89 a3       	std	Y+33, r24	; 0x21
    3372:	0f c0       	rjmp	.+30     	; 0x3392 <LCD_displayCharacter+0x658>
    3374:	89 e1       	ldi	r24, 0x19	; 25
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	98 a3       	std	Y+32, r25	; 0x20
    337a:	8f 8f       	std	Y+31, r24	; 0x1f
    337c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    337e:	98 a1       	ldd	r25, Y+32	; 0x20
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <LCD_displayCharacter+0x646>
    3384:	98 a3       	std	Y+32, r25	; 0x20
    3386:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3388:	89 a1       	ldd	r24, Y+33	; 0x21
    338a:	9a a1       	ldd	r25, Y+34	; 0x22
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	9a a3       	std	Y+34, r25	; 0x22
    3390:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3392:	89 a1       	ldd	r24, Y+33	; 0x21
    3394:	9a a1       	ldd	r25, Y+34	; 0x22
    3396:	00 97       	sbiw	r24, 0x00	; 0
    3398:	69 f7       	brne	.-38     	; 0x3374 <LCD_displayCharacter+0x63a>
    339a:	14 c0       	rjmp	.+40     	; 0x33c4 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    339c:	6b a1       	ldd	r22, Y+35	; 0x23
    339e:	7c a1       	ldd	r23, Y+36	; 0x24
    33a0:	8d a1       	ldd	r24, Y+37	; 0x25
    33a2:	9e a1       	ldd	r25, Y+38	; 0x26
    33a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	9a a3       	std	Y+34, r25	; 0x22
    33ae:	89 a3       	std	Y+33, r24	; 0x21
    33b0:	89 a1       	ldd	r24, Y+33	; 0x21
    33b2:	9a a1       	ldd	r25, Y+34	; 0x22
    33b4:	9e 8f       	std	Y+30, r25	; 0x1e
    33b6:	8d 8f       	std	Y+29, r24	; 0x1d
    33b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	f1 f7       	brne	.-4      	; 0x33bc <LCD_displayCharacter+0x682>
    33c0:	9e 8f       	std	Y+30, r25	; 0x1e
    33c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    33c4:	fe 01       	movw	r30, r28
    33c6:	ed 59       	subi	r30, 0x9D	; 157
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	80 81       	ld	r24, Z
    33cc:	98 2f       	mov	r25, r24
    33ce:	91 70       	andi	r25, 0x01	; 1
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	49 2f       	mov	r20, r25
    33d6:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    33da:	fe 01       	movw	r30, r28
    33dc:	ed 59       	subi	r30, 0x9D	; 157
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	80 81       	ld	r24, Z
    33e2:	88 2f       	mov	r24, r24
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	82 70       	andi	r24, 0x02	; 2
    33e8:	90 70       	andi	r25, 0x00	; 0
    33ea:	95 95       	asr	r25
    33ec:	87 95       	ror	r24
    33ee:	98 2f       	mov	r25, r24
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	61 e0       	ldi	r22, 0x01	; 1
    33f4:	49 2f       	mov	r20, r25
    33f6:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    33fa:	fe 01       	movw	r30, r28
    33fc:	ed 59       	subi	r30, 0x9D	; 157
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	80 81       	ld	r24, Z
    3402:	88 2f       	mov	r24, r24
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	84 70       	andi	r24, 0x04	; 4
    3408:	90 70       	andi	r25, 0x00	; 0
    340a:	95 95       	asr	r25
    340c:	87 95       	ror	r24
    340e:	95 95       	asr	r25
    3410:	87 95       	ror	r24
    3412:	98 2f       	mov	r25, r24
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	62 e0       	ldi	r22, 0x02	; 2
    3418:	49 2f       	mov	r20, r25
    341a:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    341e:	fe 01       	movw	r30, r28
    3420:	ed 59       	subi	r30, 0x9D	; 157
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	80 81       	ld	r24, Z
    3426:	88 2f       	mov	r24, r24
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	88 70       	andi	r24, 0x08	; 8
    342c:	90 70       	andi	r25, 0x00	; 0
    342e:	95 95       	asr	r25
    3430:	87 95       	ror	r24
    3432:	95 95       	asr	r25
    3434:	87 95       	ror	r24
    3436:	95 95       	asr	r25
    3438:	87 95       	ror	r24
    343a:	98 2f       	mov	r25, r24
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	64 e0       	ldi	r22, 0x04	; 4
    3440:	49 2f       	mov	r20, r25
    3442:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	a0 e8       	ldi	r26, 0x80	; 128
    344c:	bf e3       	ldi	r27, 0x3F	; 63
    344e:	89 8f       	std	Y+25, r24	; 0x19
    3450:	9a 8f       	std	Y+26, r25	; 0x1a
    3452:	ab 8f       	std	Y+27, r26	; 0x1b
    3454:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3456:	69 8d       	ldd	r22, Y+25	; 0x19
    3458:	7a 8d       	ldd	r23, Y+26	; 0x1a
    345a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    345c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	4a e7       	ldi	r20, 0x7A	; 122
    3464:	53 e4       	ldi	r21, 0x43	; 67
    3466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	8d 8b       	std	Y+21, r24	; 0x15
    3470:	9e 8b       	std	Y+22, r25	; 0x16
    3472:	af 8b       	std	Y+23, r26	; 0x17
    3474:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3476:	6d 89       	ldd	r22, Y+21	; 0x15
    3478:	7e 89       	ldd	r23, Y+22	; 0x16
    347a:	8f 89       	ldd	r24, Y+23	; 0x17
    347c:	98 8d       	ldd	r25, Y+24	; 0x18
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	40 e8       	ldi	r20, 0x80	; 128
    3484:	5f e3       	ldi	r21, 0x3F	; 63
    3486:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    348a:	88 23       	and	r24, r24
    348c:	2c f4       	brge	.+10     	; 0x3498 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	9c 8b       	std	Y+20, r25	; 0x14
    3494:	8b 8b       	std	Y+19, r24	; 0x13
    3496:	3f c0       	rjmp	.+126    	; 0x3516 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3498:	6d 89       	ldd	r22, Y+21	; 0x15
    349a:	7e 89       	ldd	r23, Y+22	; 0x16
    349c:	8f 89       	ldd	r24, Y+23	; 0x17
    349e:	98 8d       	ldd	r25, Y+24	; 0x18
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	3f ef       	ldi	r19, 0xFF	; 255
    34a4:	4f e7       	ldi	r20, 0x7F	; 127
    34a6:	57 e4       	ldi	r21, 0x47	; 71
    34a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ac:	18 16       	cp	r1, r24
    34ae:	4c f5       	brge	.+82     	; 0x3502 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b0:	69 8d       	ldd	r22, Y+25	; 0x19
    34b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e2       	ldi	r20, 0x20	; 32
    34be:	51 e4       	ldi	r21, 0x41	; 65
    34c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	bc 01       	movw	r22, r24
    34ca:	cd 01       	movw	r24, r26
    34cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	9c 8b       	std	Y+20, r25	; 0x14
    34d6:	8b 8b       	std	Y+19, r24	; 0x13
    34d8:	0f c0       	rjmp	.+30     	; 0x34f8 <LCD_displayCharacter+0x7be>
    34da:	89 e1       	ldi	r24, 0x19	; 25
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	9a 8b       	std	Y+18, r25	; 0x12
    34e0:	89 8b       	std	Y+17, r24	; 0x11
    34e2:	89 89       	ldd	r24, Y+17	; 0x11
    34e4:	9a 89       	ldd	r25, Y+18	; 0x12
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <LCD_displayCharacter+0x7ac>
    34ea:	9a 8b       	std	Y+18, r25	; 0x12
    34ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ee:	8b 89       	ldd	r24, Y+19	; 0x13
    34f0:	9c 89       	ldd	r25, Y+20	; 0x14
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	9c 8b       	std	Y+20, r25	; 0x14
    34f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f8:	8b 89       	ldd	r24, Y+19	; 0x13
    34fa:	9c 89       	ldd	r25, Y+20	; 0x14
    34fc:	00 97       	sbiw	r24, 0x00	; 0
    34fe:	69 f7       	brne	.-38     	; 0x34da <LCD_displayCharacter+0x7a0>
    3500:	14 c0       	rjmp	.+40     	; 0x352a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3502:	6d 89       	ldd	r22, Y+21	; 0x15
    3504:	7e 89       	ldd	r23, Y+22	; 0x16
    3506:	8f 89       	ldd	r24, Y+23	; 0x17
    3508:	98 8d       	ldd	r25, Y+24	; 0x18
    350a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	9c 8b       	std	Y+20, r25	; 0x14
    3514:	8b 8b       	std	Y+19, r24	; 0x13
    3516:	8b 89       	ldd	r24, Y+19	; 0x13
    3518:	9c 89       	ldd	r25, Y+20	; 0x14
    351a:	98 8b       	std	Y+16, r25	; 0x10
    351c:	8f 87       	std	Y+15, r24	; 0x0f
    351e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3520:	98 89       	ldd	r25, Y+16	; 0x10
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	f1 f7       	brne	.-4      	; 0x3522 <LCD_displayCharacter+0x7e8>
    3526:	98 8b       	std	Y+16, r25	; 0x10
    3528:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	62 e0       	ldi	r22, 0x02	; 2
    352e:	40 e0       	ldi	r20, 0x00	; 0
    3530:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	a0 e8       	ldi	r26, 0x80	; 128
    353a:	bf e3       	ldi	r27, 0x3F	; 63
    353c:	8b 87       	std	Y+11, r24	; 0x0b
    353e:	9c 87       	std	Y+12, r25	; 0x0c
    3540:	ad 87       	std	Y+13, r26	; 0x0d
    3542:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3544:	6b 85       	ldd	r22, Y+11	; 0x0b
    3546:	7c 85       	ldd	r23, Y+12	; 0x0c
    3548:	8d 85       	ldd	r24, Y+13	; 0x0d
    354a:	9e 85       	ldd	r25, Y+14	; 0x0e
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	4a e7       	ldi	r20, 0x7A	; 122
    3552:	53 e4       	ldi	r21, 0x43	; 67
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	8f 83       	std	Y+7, r24	; 0x07
    355e:	98 87       	std	Y+8, r25	; 0x08
    3560:	a9 87       	std	Y+9, r26	; 0x09
    3562:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3564:	6f 81       	ldd	r22, Y+7	; 0x07
    3566:	78 85       	ldd	r23, Y+8	; 0x08
    3568:	89 85       	ldd	r24, Y+9	; 0x09
    356a:	9a 85       	ldd	r25, Y+10	; 0x0a
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	40 e8       	ldi	r20, 0x80	; 128
    3572:	5f e3       	ldi	r21, 0x3F	; 63
    3574:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3578:	88 23       	and	r24, r24
    357a:	2c f4       	brge	.+10     	; 0x3586 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	9e 83       	std	Y+6, r25	; 0x06
    3582:	8d 83       	std	Y+5, r24	; 0x05
    3584:	3f c0       	rjmp	.+126    	; 0x3604 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3586:	6f 81       	ldd	r22, Y+7	; 0x07
    3588:	78 85       	ldd	r23, Y+8	; 0x08
    358a:	89 85       	ldd	r24, Y+9	; 0x09
    358c:	9a 85       	ldd	r25, Y+10	; 0x0a
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	3f ef       	ldi	r19, 0xFF	; 255
    3592:	4f e7       	ldi	r20, 0x7F	; 127
    3594:	57 e4       	ldi	r21, 0x47	; 71
    3596:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    359a:	18 16       	cp	r1, r24
    359c:	4c f5       	brge	.+82     	; 0x35f0 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359e:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e2       	ldi	r20, 0x20	; 32
    35ac:	51 e4       	ldi	r21, 0x41	; 65
    35ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	9e 83       	std	Y+6, r25	; 0x06
    35c4:	8d 83       	std	Y+5, r24	; 0x05
    35c6:	0f c0       	rjmp	.+30     	; 0x35e6 <LCD_displayCharacter+0x8ac>
    35c8:	89 e1       	ldi	r24, 0x19	; 25
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	9c 83       	std	Y+4, r25	; 0x04
    35ce:	8b 83       	std	Y+3, r24	; 0x03
    35d0:	8b 81       	ldd	r24, Y+3	; 0x03
    35d2:	9c 81       	ldd	r25, Y+4	; 0x04
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <LCD_displayCharacter+0x89a>
    35d8:	9c 83       	std	Y+4, r25	; 0x04
    35da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35dc:	8d 81       	ldd	r24, Y+5	; 0x05
    35de:	9e 81       	ldd	r25, Y+6	; 0x06
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	9e 83       	std	Y+6, r25	; 0x06
    35e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e6:	8d 81       	ldd	r24, Y+5	; 0x05
    35e8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	69 f7       	brne	.-38     	; 0x35c8 <LCD_displayCharacter+0x88e>
    35ee:	14 c0       	rjmp	.+40     	; 0x3618 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f0:	6f 81       	ldd	r22, Y+7	; 0x07
    35f2:	78 85       	ldd	r23, Y+8	; 0x08
    35f4:	89 85       	ldd	r24, Y+9	; 0x09
    35f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	9e 83       	std	Y+6, r25	; 0x06
    3602:	8d 83       	std	Y+5, r24	; 0x05
    3604:	8d 81       	ldd	r24, Y+5	; 0x05
    3606:	9e 81       	ldd	r25, Y+6	; 0x06
    3608:	9a 83       	std	Y+2, r25	; 0x02
    360a:	89 83       	std	Y+1, r24	; 0x01
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	9a 81       	ldd	r25, Y+2	; 0x02
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	f1 f7       	brne	.-4      	; 0x3610 <LCD_displayCharacter+0x8d6>
    3614:	9a 83       	std	Y+2, r25	; 0x02
    3616:	89 83       	std	Y+1, r24	; 0x01
	DIO_writePin(LCD_DATA_PORT_ID,data);
	_delay_ms(1);
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
	#endif
}
    3618:	cd 59       	subi	r28, 0x9D	; 157
    361a:	df 4f       	sbci	r29, 0xFF	; 255
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	1f 91       	pop	r17
    362c:	0f 91       	pop	r16
    362e:	08 95       	ret

00003630 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    3630:	df 93       	push	r29
    3632:	cf 93       	push	r28
    3634:	00 d0       	rcall	.+0      	; 0x3636 <LCD_displayString+0x6>
    3636:	0f 92       	push	r0
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	9b 83       	std	Y+3, r25	; 0x03
    363e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3640:	19 82       	std	Y+1, r1	; 0x01
    3642:	0e c0       	rjmp	.+28     	; 0x3660 <LCD_displayString+0x30>
	while (Str[i] !='\0')
	{
		LCD_displayCharacter(Str[i]);
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	28 2f       	mov	r18, r24
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	9b 81       	ldd	r25, Y+3	; 0x03
    364e:	fc 01       	movw	r30, r24
    3650:	e2 0f       	add	r30, r18
    3652:	f3 1f       	adc	r31, r19
    3654:	80 81       	ld	r24, Z
    3656:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_displayCharacter>
		i++;
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	8f 5f       	subi	r24, 0xFF	; 255
    365e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while (Str[i] !='\0')
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	28 2f       	mov	r18, r24
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	8a 81       	ldd	r24, Y+2	; 0x02
    3668:	9b 81       	ldd	r25, Y+3	; 0x03
    366a:	fc 01       	movw	r30, r24
    366c:	e2 0f       	add	r30, r18
    366e:	f3 1f       	adc	r31, r19
    3670:	80 81       	ld	r24, Z
    3672:	88 23       	and	r24, r24
    3674:	39 f7       	brne	.-50     	; 0x3644 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    3676:	0f 90       	pop	r0
    3678:	0f 90       	pop	r0
    367a:	0f 90       	pop	r0
    367c:	cf 91       	pop	r28
    367e:	df 91       	pop	r29
    3680:	08 95       	ret

00003682 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    3682:	df 93       	push	r29
    3684:	cf 93       	push	r28
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	0e 94 22 12 	call	0x2444	; 0x2444 <LCD_sendCommand>
}
    3690:	cf 91       	pop	r28
    3692:	df 91       	pop	r29
    3694:	08 95       	ret

00003696 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	00 d0       	rcall	.+0      	; 0x369c <LCD_moveCursor+0x6>
    369c:	00 d0       	rcall	.+0      	; 0x369e <LCD_moveCursor+0x8>
    369e:	0f 92       	push	r0
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	8a 83       	std	Y+2, r24	; 0x02
    36a6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address = 0;
    36a8:	19 82       	std	Y+1, r1	; 0x01
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    36aa:	8a 81       	ldd	r24, Y+2	; 0x02
    36ac:	28 2f       	mov	r18, r24
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	3d 83       	std	Y+5, r19	; 0x05
    36b2:	2c 83       	std	Y+4, r18	; 0x04
    36b4:	8c 81       	ldd	r24, Y+4	; 0x04
    36b6:	9d 81       	ldd	r25, Y+5	; 0x05
    36b8:	81 30       	cpi	r24, 0x01	; 1
    36ba:	91 05       	cpc	r25, r1
    36bc:	c9 f0       	breq	.+50     	; 0x36f0 <LCD_moveCursor+0x5a>
    36be:	2c 81       	ldd	r18, Y+4	; 0x04
    36c0:	3d 81       	ldd	r19, Y+5	; 0x05
    36c2:	22 30       	cpi	r18, 0x02	; 2
    36c4:	31 05       	cpc	r19, r1
    36c6:	2c f4       	brge	.+10     	; 0x36d2 <LCD_moveCursor+0x3c>
    36c8:	8c 81       	ldd	r24, Y+4	; 0x04
    36ca:	9d 81       	ldd	r25, Y+5	; 0x05
    36cc:	00 97       	sbiw	r24, 0x00	; 0
    36ce:	61 f0       	breq	.+24     	; 0x36e8 <LCD_moveCursor+0x52>
    36d0:	1a c0       	rjmp	.+52     	; 0x3706 <LCD_moveCursor+0x70>
    36d2:	2c 81       	ldd	r18, Y+4	; 0x04
    36d4:	3d 81       	ldd	r19, Y+5	; 0x05
    36d6:	22 30       	cpi	r18, 0x02	; 2
    36d8:	31 05       	cpc	r19, r1
    36da:	71 f0       	breq	.+28     	; 0x36f8 <LCD_moveCursor+0x62>
    36dc:	8c 81       	ldd	r24, Y+4	; 0x04
    36de:	9d 81       	ldd	r25, Y+5	; 0x05
    36e0:	83 30       	cpi	r24, 0x03	; 3
    36e2:	91 05       	cpc	r25, r1
    36e4:	69 f0       	breq	.+26     	; 0x3700 <LCD_moveCursor+0x6a>
    36e6:	0f c0       	rjmp	.+30     	; 0x3706 <LCD_moveCursor+0x70>
	{
		case 0:
		lcd_memory_address=col + 0x80;
    36e8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ea:	80 58       	subi	r24, 0x80	; 128
    36ec:	89 83       	std	Y+1, r24	; 0x01
    36ee:	0b c0       	rjmp	.+22     	; 0x3706 <LCD_moveCursor+0x70>
		break;
		case 1:
		lcd_memory_address=col+ 0xC0;
    36f0:	8b 81       	ldd	r24, Y+3	; 0x03
    36f2:	80 54       	subi	r24, 0x40	; 64
    36f4:	89 83       	std	Y+1, r24	; 0x01
    36f6:	07 c0       	rjmp	.+14     	; 0x3706 <LCD_moveCursor+0x70>
		break;
		case 2:
		lcd_memory_address=col+ 0x94;
    36f8:	8b 81       	ldd	r24, Y+3	; 0x03
    36fa:	8c 56       	subi	r24, 0x6C	; 108
    36fc:	89 83       	std	Y+1, r24	; 0x01
    36fe:	03 c0       	rjmp	.+6      	; 0x3706 <LCD_moveCursor+0x70>
		break;
		case 3:
		lcd_memory_address=col+ 0xD4;
    3700:	8b 81       	ldd	r24, Y+3	; 0x03
    3702:	8c 52       	subi	r24, 0x2C	; 44
    3704:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	80 68       	ori	r24, 0x80	; 128
    370a:	0e 94 22 12 	call	0x2444	; 0x2444 <LCD_sendCommand>
}
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	00 d0       	rcall	.+0      	; 0x3724 <LCD_displayStringRowColumn+0x6>
    3724:	00 d0       	rcall	.+0      	; 0x3726 <LCD_displayStringRowColumn+0x8>
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
    372a:	89 83       	std	Y+1, r24	; 0x01
    372c:	6a 83       	std	Y+2, r22	; 0x02
    372e:	5c 83       	std	Y+4, r21	; 0x04
    3730:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);				/* go to to the required LCD position */
    3732:	89 81       	ldd	r24, Y+1	; 0x01
    3734:	6a 81       	ldd	r22, Y+2	; 0x02
    3736:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString(Str);					/* display the string */
    373a:	8b 81       	ldd	r24, Y+3	; 0x03
    373c:	9c 81       	ldd	r25, Y+4	; 0x04
    373e:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
}
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	cf 91       	pop	r28
    374c:	df 91       	pop	r29
    374e:	08 95       	ret

00003750 <LCD_integerToString>:
void LCD_integerToString(int data)
{
    3750:	df 93       	push	r29
    3752:	cf 93       	push	r28
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	62 97       	sbiw	r28, 0x12	; 18
    375a:	0f b6       	in	r0, 0x3f	; 63
    375c:	f8 94       	cli
    375e:	de bf       	out	0x3e, r29	; 62
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	cd bf       	out	0x3d, r28	; 61
    3764:	9a 8b       	std	Y+18, r25	; 0x12
    3766:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];						/* String to hold the ascii result */
	itoa(data,buff,10);					/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3768:	89 89       	ldd	r24, Y+17	; 0x11
    376a:	9a 89       	ldd	r25, Y+18	; 0x12
    376c:	9e 01       	movw	r18, r28
    376e:	2f 5f       	subi	r18, 0xFF	; 255
    3770:	3f 4f       	sbci	r19, 0xFF	; 255
    3772:	b9 01       	movw	r22, r18
    3774:	4a e0       	ldi	r20, 0x0A	; 10
    3776:	50 e0       	ldi	r21, 0x00	; 0
    3778:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <itoa>
	LCD_displayString(buff);			 /* Display the string */
    377c:	ce 01       	movw	r24, r28
    377e:	01 96       	adiw	r24, 0x01	; 1
    3780:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
}
    3784:	62 96       	adiw	r28, 0x12	; 18
    3786:	0f b6       	in	r0, 0x3f	; 63
    3788:	f8 94       	cli
    378a:	de bf       	out	0x3e, r29	; 62
    378c:	0f be       	out	0x3f, r0	; 63
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	cf 91       	pop	r28
    3792:	df 91       	pop	r29
    3794:	08 95       	ret

00003796 <KeyPad_Init>:
	{'7', '8', '9', '/'},
	{'*', '0', '#', '='}
};

/* Initialize the keypad */
void KeyPad_Init(void) {
    3796:	df 93       	push	r29
    3798:	cf 93       	push	r28
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
	/* Configure columns as input pins */
	DIO_setupPinDirection(KEYPAD_COLUMN_PORT, KEYPAD_COLUMN0, PIN_INPUT);
    379e:	83 e0       	ldi	r24, 0x03	; 3
    37a0:	67 e0       	ldi	r22, 0x07	; 7
    37a2:	40 e0       	ldi	r20, 0x00	; 0
    37a4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_COLUMN_PORT, KEYPAD_COLUMN1, PIN_INPUT);
    37a8:	83 e0       	ldi	r24, 0x03	; 3
    37aa:	66 e0       	ldi	r22, 0x06	; 6
    37ac:	40 e0       	ldi	r20, 0x00	; 0
    37ae:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_COLUMN_PORT, KEYPAD_COLUMN2, PIN_INPUT);
    37b2:	83 e0       	ldi	r24, 0x03	; 3
    37b4:	65 e0       	ldi	r22, 0x05	; 5
    37b6:	40 e0       	ldi	r20, 0x00	; 0
    37b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_COLUMN_PORT, KEYPAD_COLUMN3, PIN_INPUT);
    37bc:	83 e0       	ldi	r24, 0x03	; 3
    37be:	63 e0       	ldi	r22, 0x03	; 3
    37c0:	40 e0       	ldi	r20, 0x00	; 0
    37c2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>

	/* Configure rows as input pins and set them to logic high */
	DIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW0, PIN_INPUT);
    37c6:	82 e0       	ldi	r24, 0x02	; 2
    37c8:	65 e0       	ldi	r22, 0x05	; 5
    37ca:	40 e0       	ldi	r20, 0x00	; 0
    37cc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW1, PIN_INPUT);
    37d0:	82 e0       	ldi	r24, 0x02	; 2
    37d2:	64 e0       	ldi	r22, 0x04	; 4
    37d4:	40 e0       	ldi	r20, 0x00	; 0
    37d6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW2, PIN_INPUT);
    37da:	82 e0       	ldi	r24, 0x02	; 2
    37dc:	63 e0       	ldi	r22, 0x03	; 3
    37de:	40 e0       	ldi	r20, 0x00	; 0
    37e0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW3, PIN_INPUT);
    37e4:	82 e0       	ldi	r24, 0x02	; 2
    37e6:	62 e0       	ldi	r22, 0x02	; 2
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>

	DIO_writePin(KEYPAD_ROW_PORT, KEYPAD_ROW0, LOGIC_HIGH);
    37ee:	82 e0       	ldi	r24, 0x02	; 2
    37f0:	65 e0       	ldi	r22, 0x05	; 5
    37f2:	41 e0       	ldi	r20, 0x01	; 1
    37f4:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(KEYPAD_ROW_PORT, KEYPAD_ROW1, LOGIC_HIGH);
    37f8:	82 e0       	ldi	r24, 0x02	; 2
    37fa:	64 e0       	ldi	r22, 0x04	; 4
    37fc:	41 e0       	ldi	r20, 0x01	; 1
    37fe:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(KEYPAD_ROW_PORT, KEYPAD_ROW2, LOGIC_HIGH);
    3802:	82 e0       	ldi	r24, 0x02	; 2
    3804:	63 e0       	ldi	r22, 0x03	; 3
    3806:	41 e0       	ldi	r20, 0x01	; 1
    3808:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
	DIO_writePin(KEYPAD_ROW_PORT, KEYPAD_ROW3, LOGIC_HIGH);
    380c:	82 e0       	ldi	r24, 0x02	; 2
    380e:	62 e0       	ldi	r22, 0x02	; 2
    3810:	41 e0       	ldi	r20, 0x01	; 1
    3812:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
}
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <GetPresseKey>:

/* Get the pressed key */
uint8 GetPresseKey(void) {
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	00 d0       	rcall	.+0      	; 0x3822 <GetPresseKey+0x6>
    3822:	0f 92       	push	r0
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
	uint8 i, j, val;

	while (1) {
		/* Iterate through rows */
		for (i = 0; i < 4; i++) {
    3828:	1b 82       	std	Y+3, r1	; 0x03
    382a:	7a c0       	rjmp	.+244    	; 0x3920 <GetPresseKey+0x104>
			/* Set the current row to logic low */
			DIO_setupPinDirection(KEYPAD_ROW_PORT, ArrOfRows[i], PIN_OUTPUT);
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	88 2f       	mov	r24, r24
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	fc 01       	movw	r30, r24
    3834:	e6 58       	subi	r30, 0x86	; 134
    3836:	fd 4f       	sbci	r31, 0xFD	; 253
    3838:	90 81       	ld	r25, Z
    383a:	82 e0       	ldi	r24, 0x02	; 2
    383c:	69 2f       	mov	r22, r25
    383e:	41 e0       	ldi	r20, 0x01	; 1
    3840:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
			DIO_writePin(KEYPAD_ROW_PORT, ArrOfRows[i], LOGIC_LOW);
    3844:	8b 81       	ldd	r24, Y+3	; 0x03
    3846:	88 2f       	mov	r24, r24
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	fc 01       	movw	r30, r24
    384c:	e6 58       	subi	r30, 0x86	; 134
    384e:	fd 4f       	sbci	r31, 0xFD	; 253
    3850:	90 81       	ld	r25, Z
    3852:	82 e0       	ldi	r24, 0x02	; 2
    3854:	69 2f       	mov	r22, r25
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>

			/* Check columns for a pressed key */
			for (j = 0; j < 4; j++) {
    385c:	1a 82       	std	Y+2, r1	; 0x02
    385e:	41 c0       	rjmp	.+130    	; 0x38e2 <GetPresseKey+0xc6>
				val = DIO_readPin(KEYPAD_COLUMN_PORT, ArrOfCols[j]);
    3860:	8a 81       	ldd	r24, Y+2	; 0x02
    3862:	88 2f       	mov	r24, r24
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	fc 01       	movw	r30, r24
    3868:	e2 58       	subi	r30, 0x82	; 130
    386a:	fd 4f       	sbci	r31, 0xFD	; 253
    386c:	90 81       	ld	r25, Z
    386e:	83 e0       	ldi	r24, 0x03	; 3
    3870:	69 2f       	mov	r22, r25
    3872:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <DIO_readPin>
    3876:	89 83       	std	Y+1, r24	; 0x01

				if (val == 0) {
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	88 23       	and	r24, r24
    387c:	79 f5       	brne	.+94     	; 0x38dc <GetPresseKey+0xc0>
					/* Restore row configuration and return the key value */
					DIO_setupPinDirection(KEYPAD_ROW_PORT, ArrOfRows[i], PIN_INPUT);
    387e:	8b 81       	ldd	r24, Y+3	; 0x03
    3880:	88 2f       	mov	r24, r24
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	fc 01       	movw	r30, r24
    3886:	e6 58       	subi	r30, 0x86	; 134
    3888:	fd 4f       	sbci	r31, 0xFD	; 253
    388a:	90 81       	ld	r25, Z
    388c:	82 e0       	ldi	r24, 0x02	; 2
    388e:	69 2f       	mov	r22, r25
    3890:	40 e0       	ldi	r20, 0x00	; 0
    3892:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
					DIO_writePin(KEYPAD_ROW_PORT, ArrOfRows[i], LOGIC_HIGH);
    3896:	8b 81       	ldd	r24, Y+3	; 0x03
    3898:	88 2f       	mov	r24, r24
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	fc 01       	movw	r30, r24
    389e:	e6 58       	subi	r30, 0x86	; 134
    38a0:	fd 4f       	sbci	r31, 0xFD	; 253
    38a2:	90 81       	ld	r25, Z
    38a4:	82 e0       	ldi	r24, 0x02	; 2
    38a6:	69 2f       	mov	r22, r25
    38a8:	41 e0       	ldi	r20, 0x01	; 1
    38aa:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
					return (KeyPad_Values[i][j]);
    38ae:	8b 81       	ldd	r24, Y+3	; 0x03
    38b0:	48 2f       	mov	r20, r24
    38b2:	50 e0       	ldi	r21, 0x00	; 0
    38b4:	8a 81       	ldd	r24, Y+2	; 0x02
    38b6:	28 2f       	mov	r18, r24
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	ca 01       	movw	r24, r20
    38bc:	88 0f       	add	r24, r24
    38be:	99 1f       	adc	r25, r25
    38c0:	88 0f       	add	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	82 0f       	add	r24, r18
    38c6:	93 1f       	adc	r25, r19
    38c8:	fc 01       	movw	r30, r24
    38ca:	ed 57       	subi	r30, 0x7D	; 125
    38cc:	fd 4f       	sbci	r31, 0xFD	; 253
    38ce:	80 81       	ld	r24, Z
			/* Restore row configuration */
			DIO_setupPinDirection(KEYPAD_ROW_PORT, ArrOfRows[i], PIN_INPUT);
			DIO_writePin(KEYPAD_ROW_PORT, ArrOfRows[i], LOGIC_HIGH);
		}
	}
}
    38d0:	0f 90       	pop	r0
    38d2:	0f 90       	pop	r0
    38d4:	0f 90       	pop	r0
    38d6:	cf 91       	pop	r28
    38d8:	df 91       	pop	r29
    38da:	08 95       	ret
			/* Set the current row to logic low */
			DIO_setupPinDirection(KEYPAD_ROW_PORT, ArrOfRows[i], PIN_OUTPUT);
			DIO_writePin(KEYPAD_ROW_PORT, ArrOfRows[i], LOGIC_LOW);

			/* Check columns for a pressed key */
			for (j = 0; j < 4; j++) {
    38dc:	8a 81       	ldd	r24, Y+2	; 0x02
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	8a 83       	std	Y+2, r24	; 0x02
    38e2:	8a 81       	ldd	r24, Y+2	; 0x02
    38e4:	84 30       	cpi	r24, 0x04	; 4
    38e6:	08 f4       	brcc	.+2      	; 0x38ea <GetPresseKey+0xce>
    38e8:	bb cf       	rjmp	.-138    	; 0x3860 <GetPresseKey+0x44>
					DIO_writePin(KEYPAD_ROW_PORT, ArrOfRows[i], LOGIC_HIGH);
					return (KeyPad_Values[i][j]);
				}
			}
			/* Restore row configuration */
			DIO_setupPinDirection(KEYPAD_ROW_PORT, ArrOfRows[i], PIN_INPUT);
    38ea:	8b 81       	ldd	r24, Y+3	; 0x03
    38ec:	88 2f       	mov	r24, r24
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	fc 01       	movw	r30, r24
    38f2:	e6 58       	subi	r30, 0x86	; 134
    38f4:	fd 4f       	sbci	r31, 0xFD	; 253
    38f6:	90 81       	ld	r25, Z
    38f8:	82 e0       	ldi	r24, 0x02	; 2
    38fa:	69 2f       	mov	r22, r25
    38fc:	40 e0       	ldi	r20, 0x00	; 0
    38fe:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
			DIO_writePin(KEYPAD_ROW_PORT, ArrOfRows[i], LOGIC_HIGH);
    3902:	8b 81       	ldd	r24, Y+3	; 0x03
    3904:	88 2f       	mov	r24, r24
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	fc 01       	movw	r30, r24
    390a:	e6 58       	subi	r30, 0x86	; 134
    390c:	fd 4f       	sbci	r31, 0xFD	; 253
    390e:	90 81       	ld	r25, Z
    3910:	82 e0       	ldi	r24, 0x02	; 2
    3912:	69 2f       	mov	r22, r25
    3914:	41 e0       	ldi	r20, 0x01	; 1
    3916:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
uint8 GetPresseKey(void) {
	uint8 i, j, val;

	while (1) {
		/* Iterate through rows */
		for (i = 0; i < 4; i++) {
    391a:	8b 81       	ldd	r24, Y+3	; 0x03
    391c:	8f 5f       	subi	r24, 0xFF	; 255
    391e:	8b 83       	std	Y+3, r24	; 0x03
    3920:	8b 81       	ldd	r24, Y+3	; 0x03
    3922:	84 30       	cpi	r24, 0x04	; 4
    3924:	08 f4       	brcc	.+2      	; 0x3928 <GetPresseKey+0x10c>
    3926:	82 cf       	rjmp	.-252    	; 0x382c <GetPresseKey+0x10>
    3928:	7f cf       	rjmp	.-258    	; 0x3828 <GetPresseKey+0xc>

0000392a <Button_init>:
/*		          Yousef Khaled Ahmed (558)                         */
/********************************************************************/
#include "Button.h"

void Button_init(void)
{ 
    392a:	df 93       	push	r29
    392c:	cf 93       	push	r28
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
	/*Initializing  the pin directions of the pins that are connected to the keypad on the avr kit (Fares ATMega32 Kit)*/
	DIO_setupPinDirection(PORTD_ID,PIN7_ID,PIN_INPUT); 
    3932:	83 e0       	ldi	r24, 0x03	; 3
    3934:	67 e0       	ldi	r22, 0x07	; 7
    3936:	40 e0       	ldi	r20, 0x00	; 0
    3938:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTD_ID,PIN6_ID,PIN_INPUT);
    393c:	83 e0       	ldi	r24, 0x03	; 3
    393e:	66 e0       	ldi	r22, 0x06	; 6
    3940:	40 e0       	ldi	r20, 0x00	; 0
    3942:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTD_ID,PIN5_ID,PIN_INPUT);
    3946:	83 e0       	ldi	r24, 0x03	; 3
    3948:	65 e0       	ldi	r22, 0x05	; 5
    394a:	40 e0       	ldi	r20, 0x00	; 0
    394c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTD_ID,PIN4_ID,PIN_INPUT);
    3950:	83 e0       	ldi	r24, 0x03	; 3
    3952:	64 e0       	ldi	r22, 0x04	; 4
    3954:	40 e0       	ldi	r20, 0x00	; 0
    3956:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTD_ID,PIN3_ID,PIN_INPUT);
    395a:	83 e0       	ldi	r24, 0x03	; 3
    395c:	63 e0       	ldi	r22, 0x03	; 3
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_setupPortDirection(PORTC_ID,PIN_INPUT);
    3964:	82 e0       	ldi	r24, 0x02	; 2
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_setupPortDirection>
	
}
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	08 95       	ret

00003972 <Button_Read>:

uint8_t Button_Read(uint8_t ButtonPinColumn, uint8_t ButtonPinRow){
    3972:	df 93       	push	r29
    3974:	cf 93       	push	r28
    3976:	cd b7       	in	r28, 0x3d	; 61
    3978:	de b7       	in	r29, 0x3e	; 62
    397a:	61 97       	sbiw	r28, 0x11	; 17
    397c:	0f b6       	in	r0, 0x3f	; 63
    397e:	f8 94       	cli
    3980:	de bf       	out	0x3e, r29	; 62
    3982:	0f be       	out	0x3f, r0	; 63
    3984:	cd bf       	out	0x3d, r28	; 61
    3986:	88 8b       	std	Y+16, r24	; 0x10
    3988:	69 8b       	std	Y+17, r22	; 0x11

	uint8_t ButtonStatus;
	
	DIO_setupPinDirection(BUTTON_PORT_ROW_OUT,ButtonPinRow,PIN_OUTPUT);
    398a:	82 e0       	ldi	r24, 0x02	; 2
    398c:	69 89       	ldd	r22, Y+17	; 0x11
    398e:	41 e0       	ldi	r20, 0x01	; 1
    3990:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <DIO_setupPinDirection>
	DIO_writePin(BUTTON_PORT_ROW_OUT,ButtonPinRow,LOGIC_LOW);
    3994:	82 e0       	ldi	r24, 0x02	; 2
    3996:	69 89       	ldd	r22, Y+17	; 0x11
    3998:	40 e0       	ldi	r20, 0x00	; 0
    399a:	0e 94 8d 0b 	call	0x171a	; 0x171a <DIO_writePin>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	a0 ea       	ldi	r26, 0xA0	; 160
    39a4:	b1 e4       	ldi	r27, 0x41	; 65
    39a6:	8b 87       	std	Y+11, r24	; 0x0b
    39a8:	9c 87       	std	Y+12, r25	; 0x0c
    39aa:	ad 87       	std	Y+13, r26	; 0x0d
    39ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	4a e7       	ldi	r20, 0x7A	; 122
    39bc:	53 e4       	ldi	r21, 0x43	; 67
    39be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	8f 83       	std	Y+7, r24	; 0x07
    39c8:	98 87       	std	Y+8, r25	; 0x08
    39ca:	a9 87       	std	Y+9, r26	; 0x09
    39cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ce:	6f 81       	ldd	r22, Y+7	; 0x07
    39d0:	78 85       	ldd	r23, Y+8	; 0x08
    39d2:	89 85       	ldd	r24, Y+9	; 0x09
    39d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e8       	ldi	r20, 0x80	; 128
    39dc:	5f e3       	ldi	r21, 0x3F	; 63
    39de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e2:	88 23       	and	r24, r24
    39e4:	2c f4       	brge	.+10     	; 0x39f0 <Button_Read+0x7e>
		__ticks = 1;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	9e 83       	std	Y+6, r25	; 0x06
    39ec:	8d 83       	std	Y+5, r24	; 0x05
    39ee:	3f c0       	rjmp	.+126    	; 0x3a6e <Button_Read+0xfc>
	else if (__tmp > 65535)
    39f0:	6f 81       	ldd	r22, Y+7	; 0x07
    39f2:	78 85       	ldd	r23, Y+8	; 0x08
    39f4:	89 85       	ldd	r24, Y+9	; 0x09
    39f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	3f ef       	ldi	r19, 0xFF	; 255
    39fc:	4f e7       	ldi	r20, 0x7F	; 127
    39fe:	57 e4       	ldi	r21, 0x47	; 71
    3a00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a04:	18 16       	cp	r1, r24
    3a06:	4c f5       	brge	.+82     	; 0x3a5a <Button_Read+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e2       	ldi	r20, 0x20	; 32
    3a16:	51 e4       	ldi	r21, 0x41	; 65
    3a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	bc 01       	movw	r22, r24
    3a22:	cd 01       	movw	r24, r26
    3a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	9e 83       	std	Y+6, r25	; 0x06
    3a2e:	8d 83       	std	Y+5, r24	; 0x05
    3a30:	0f c0       	rjmp	.+30     	; 0x3a50 <Button_Read+0xde>
    3a32:	89 e1       	ldi	r24, 0x19	; 25
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	9c 83       	std	Y+4, r25	; 0x04
    3a38:	8b 83       	std	Y+3, r24	; 0x03
    3a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3e:	01 97       	sbiw	r24, 0x01	; 1
    3a40:	f1 f7       	brne	.-4      	; 0x3a3e <Button_Read+0xcc>
    3a42:	9c 83       	std	Y+4, r25	; 0x04
    3a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a46:	8d 81       	ldd	r24, Y+5	; 0x05
    3a48:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4a:	01 97       	sbiw	r24, 0x01	; 1
    3a4c:	9e 83       	std	Y+6, r25	; 0x06
    3a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a50:	8d 81       	ldd	r24, Y+5	; 0x05
    3a52:	9e 81       	ldd	r25, Y+6	; 0x06
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	69 f7       	brne	.-38     	; 0x3a32 <Button_Read+0xc0>
    3a58:	14 c0       	rjmp	.+40     	; 0x3a82 <Button_Read+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5c:	78 85       	ldd	r23, Y+8	; 0x08
    3a5e:	89 85       	ldd	r24, Y+9	; 0x09
    3a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	9e 83       	std	Y+6, r25	; 0x06
    3a6c:	8d 83       	std	Y+5, r24	; 0x05
    3a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a70:	9e 81       	ldd	r25, Y+6	; 0x06
    3a72:	9a 83       	std	Y+2, r25	; 0x02
    3a74:	89 83       	std	Y+1, r24	; 0x01
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <Button_Read+0x108>
    3a7e:	9a 83       	std	Y+2, r25	; 0x02
    3a80:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(20);
	
	ButtonStatus = GET_BIT(BUTTON_PORT_COLUMN_IN,(ButtonPinColumn));
    3a82:	e0 e3       	ldi	r30, 0x30	; 48
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	80 81       	ld	r24, Z
    3a88:	48 2f       	mov	r20, r24
    3a8a:	50 e0       	ldi	r21, 0x00	; 0
    3a8c:	88 89       	ldd	r24, Y+16	; 0x10
    3a8e:	28 2f       	mov	r18, r24
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	02 c0       	rjmp	.+4      	; 0x3a9c <Button_Read+0x12a>
    3a98:	88 0f       	add	r24, r24
    3a9a:	99 1f       	adc	r25, r25
    3a9c:	2a 95       	dec	r18
    3a9e:	e2 f7       	brpl	.-8      	; 0x3a98 <Button_Read+0x126>
    3aa0:	9a 01       	movw	r18, r20
    3aa2:	28 23       	and	r18, r24
    3aa4:	39 23       	and	r19, r25
    3aa6:	88 89       	ldd	r24, Y+16	; 0x10
    3aa8:	88 2f       	mov	r24, r24
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	a9 01       	movw	r20, r18
    3aae:	02 c0       	rjmp	.+4      	; 0x3ab4 <Button_Read+0x142>
    3ab0:	55 95       	asr	r21
    3ab2:	47 95       	ror	r20
    3ab4:	8a 95       	dec	r24
    3ab6:	e2 f7       	brpl	.-8      	; 0x3ab0 <Button_Read+0x13e>
    3ab8:	ca 01       	movw	r24, r20
    3aba:	8f 87       	std	Y+15, r24	; 0x0f
	
	return ButtonStatus;
    3abc:	8f 85       	ldd	r24, Y+15	; 0x0f
	
	_delay_ms(20);
	
}
    3abe:	61 96       	adiw	r28, 0x11	; 17
    3ac0:	0f b6       	in	r0, 0x3f	; 63
    3ac2:	f8 94       	cli
    3ac4:	de bf       	out	0x3e, r29	; 62
    3ac6:	0f be       	out	0x3f, r0	; 63
    3ac8:	cd bf       	out	0x3d, r28	; 61
    3aca:	cf 91       	pop	r28
    3acc:	df 91       	pop	r29
    3ace:	08 95       	ret

00003ad0 <App_init>:
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: void
 * Description: initializes the used drivers as LCD and Keypad
 ***********************************************************************************/
void App_init(void){
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
	LCD_init_(); /* LCD initialization */
    3ad8:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_init>
	LCD_displayString("hello");
    3adc:	80 e6       	ldi	r24, 0x60	; 96
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	KEYPAD_init_(); /* keypad initialization */
    3ae4:	0e 94 cb 1b 	call	0x3796	; 0x3796 <KeyPad_Init>
}
    3ae8:	cf 91       	pop	r28
    3aea:	df 91       	pop	r29
    3aec:	08 95       	ret

00003aee <App_mainMenu>:
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: void
 * Description: displays the main menu
 **********************************************/
void App_mainMenu(void){
    3aee:	df 93       	push	r29
    3af0:	cf 93       	push	r28
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
	/* clearing the LCD */
	LCD_clearScreen();
    3af6:	0e 94 41 1b 	call	0x3682	; 0x3682 <LCD_clearScreen>
	/* moving the cursor to the first row and first column*/
	LCD_moveCursor(0,0);
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	60 e0       	ldi	r22, 0x00	; 0
    3afe:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("+Set Alarm   |");
    3b02:	86 e6       	ldi	r24, 0x66	; 102
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	/* moving the cursor to the second row and first column*/
	LCD_moveCursor(1,0);
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	60 e0       	ldi	r22, 0x00	; 0
    3b0e:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("-Cancel Alarm|");
    3b12:	85 e7       	ldi	r24, 0x75	; 117
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	/* moving the cursor to the third row and first column*/
	LCD_moveCursor(2,0);
    3b1a:	82 e0       	ldi	r24, 0x02	; 2
    3b1c:	60 e0       	ldi	r22, 0x00	; 0
    3b1e:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("*Alarm List  |");
    3b22:	84 e8       	ldi	r24, 0x84	; 132
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	/* moving the cursor to the fourth row and first column*/
	LCD_moveCursor(3,0);
    3b2a:	83 e0       	ldi	r24, 0x03	; 3
    3b2c:	60 e0       	ldi	r22, 0x00	; 0
    3b2e:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("             |");
    3b32:	83 e9       	ldi	r24, 0x93	; 147
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
}
    3b3a:	cf 91       	pop	r28
    3b3c:	df 91       	pop	r29
    3b3e:	08 95       	ret

00003b40 <App_firstAvailableAlarm>:
 * Parameters (out): avialableAlramBuffer
 * Return value: void
 * Description: searches in the alarms array about which alarm is
 * 				available(i.e.,which alarm that its flag is not set)
 ***********************************************************************************/
void App_firstAvailableAlarm(uint8* avialableAlramBuffer){
    3b40:	df 93       	push	r29
    3b42:	cf 93       	push	r28
    3b44:	00 d0       	rcall	.+0      	; 0x3b46 <App_firstAvailableAlarm+0x6>
    3b46:	00 d0       	rcall	.+0      	; 0x3b48 <App_firstAvailableAlarm+0x8>
    3b48:	cd b7       	in	r28, 0x3d	; 61
    3b4a:	de b7       	in	r29, 0x3e	; 62
    3b4c:	9c 83       	std	Y+4, r25	; 0x04
    3b4e:	8b 83       	std	Y+3, r24	; 0x03
	/* flag that is raised if an available alarm is found*/
	uint8 alarmFoundFlag = FALSE;
    3b50:	1a 82       	std	Y+2, r1	; 0x02
	/* this variable represents the alarm id */
	uint8 alarm_id;
	/* this loop searches in the array for the first available   *
	 * alarm to be set(i.e., not set one)                     */
	for(alarm_id = 0 ; ((alarm_id < MaximumAlarms) && !(alarmFoundFlag)) ; alarm_id++){
    3b52:	19 82       	std	Y+1, r1	; 0x01
    3b54:	1e c0       	rjmp	.+60     	; 0x3b92 <App_firstAvailableAlarm+0x52>
		/* this condition checks on the status of the flag of   *
		 * each alarm.                                          */
		if(alarms[(int)alarm_id].flag == FALSE){
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
    3b58:	48 2f       	mov	r20, r24
    3b5a:	50 e0       	ldi	r21, 0x00	; 0
    3b5c:	ca 01       	movw	r24, r20
    3b5e:	88 0f       	add	r24, r24
    3b60:	99 1f       	adc	r25, r25
    3b62:	9c 01       	movw	r18, r24
    3b64:	22 0f       	add	r18, r18
    3b66:	33 1f       	adc	r19, r19
    3b68:	22 0f       	add	r18, r18
    3b6a:	33 1f       	adc	r19, r19
    3b6c:	82 0f       	add	r24, r18
    3b6e:	93 1f       	adc	r25, r19
    3b70:	84 0f       	add	r24, r20
    3b72:	95 1f       	adc	r25, r21
    3b74:	fc 01       	movw	r30, r24
    3b76:	e8 56       	subi	r30, 0x68	; 104
    3b78:	fd 4f       	sbci	r31, 0xFD	; 253
    3b7a:	80 81       	ld	r24, Z
    3b7c:	88 23       	and	r24, r24
    3b7e:	31 f4       	brne	.+12     	; 0x3b8c <App_firstAvailableAlarm+0x4c>
			/* is the alarm flag is not set then we found the   *
			 * first available alarm to be set then we set the  *
			 * flag that indicates that an available alarm is   *
			 * found.                                           */
			alarmFoundFlag = TRUE;
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	8a 83       	std	Y+2, r24	; 0x02
			/* assigning the passed buffer with the found alarm id. */
			*avialableAlramBuffer = alarm_id;
    3b84:	eb 81       	ldd	r30, Y+3	; 0x03
    3b86:	fc 81       	ldd	r31, Y+4	; 0x04
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	80 83       	st	Z, r24
	uint8 alarmFoundFlag = FALSE;
	/* this variable represents the alarm id */
	uint8 alarm_id;
	/* this loop searches in the array for the first available   *
	 * alarm to be set(i.e., not set one)                     */
	for(alarm_id = 0 ; ((alarm_id < MaximumAlarms) && !(alarmFoundFlag)) ; alarm_id++){
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	8f 5f       	subi	r24, 0xFF	; 255
    3b90:	89 83       	std	Y+1, r24	; 0x01
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	84 30       	cpi	r24, 0x04	; 4
    3b96:	18 f4       	brcc	.+6      	; 0x3b9e <App_firstAvailableAlarm+0x5e>
    3b98:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9a:	88 23       	and	r24, r24
    3b9c:	e1 f2       	breq	.-72     	; 0x3b56 <App_firstAvailableAlarm+0x16>
			alarmFoundFlag = TRUE;
			/* assigning the passed buffer with the found alarm id. */
			*avialableAlramBuffer = alarm_id;
		}
	}
}
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	0f 90       	pop	r0
    3ba4:	0f 90       	pop	r0
    3ba6:	cf 91       	pop	r28
    3ba8:	df 91       	pop	r29
    3baa:	08 95       	ret

00003bac <App_setAlarm>:
 * Return value: void
 * Description: this function is responsible of setting the alarm
 *              with the minutes and seconds that the user is going
 *              to enter.
 ***********************************************************************************/
void App_setAlarm(void){
    3bac:	0f 93       	push	r16
    3bae:	1f 93       	push	r17
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
    3bb8:	63 97       	sbiw	r28, 0x13	; 19
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	f8 94       	cli
    3bbe:	de bf       	out	0x3e, r29	; 62
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	cd bf       	out	0x3d, r28	; 61
	/* this is the counter that will used in the loop that will  *
	 * save the minutes and seconds values that will be entered  *
	 * from the user.                                            */
	uint8 placeCnt;
	/* this counter will hold the value of the minutes */
	uint8 tempCnt = 0;
    3bc4:	18 8a       	std	Y+16, r1	; 0x10
	 * keypad to hold the choice of the user whether he or she    *
	 * wants to cancel and return to the main menu or to continue */
	uint8 cancelOrContinue;
	/* here we are setting the LCD to display continue or close *
	 * options.                                                 */
	LCD_clearScreen();
    3bc6:	0e 94 41 1b 	call	0x3682	; 0x3682 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    3bca:	80 e0       	ldi	r24, 0x00	; 0
    3bcc:	60 e0       	ldi	r22, 0x00	; 0
    3bce:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("please choose:");
    3bd2:	82 ea       	ldi	r24, 0xA2	; 162
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	LCD_moveCursor(1,3);
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	63 e0       	ldi	r22, 0x03	; 3
    3bde:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("0.[continue]");
    3be2:	81 eb       	ldi	r24, 0xB1	; 177
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	LCD_moveCursor(2,3);
    3bea:	82 e0       	ldi	r24, 0x02	; 2
    3bec:	63 e0       	ldi	r22, 0x03	; 3
    3bee:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("%.[close]");
    3bf2:	8e eb       	ldi	r24, 0xBE	; 190
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	/* here we are taking the input from the user to continue *
	 * or cancel.                                             */
	cancelOrContinue = KEYPAD_getPressedKey();
    3bfa:	0e 94 0e 1c 	call	0x381c	; 0x381c <GetPresseKey>
    3bfe:	8f 87       	std	Y+15, r24	; 0x0f
	/* checking on the user choice if continue or return to the   *
	 * main menu                                                  */
	if(cancelOrContinue == CONTINUE){
    3c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c02:	88 23       	and	r24, r24
    3c04:	09 f0       	breq	.+2      	; 0x3c08 <App_setAlarm+0x5c>
    3c06:	69 c2       	rjmp	.+1234   	; 0x40da <App_setAlarm+0x52e>
		/* setting the LCD to display this sentence. */
		LCD_clearScreen();
    3c08:	0e 94 41 1b 	call	0x3682	; 0x3682 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    3c0c:	80 e0       	ldi	r24, 0x00	; 0
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
		LCD_displayString("Set the alarm:");
    3c14:	88 ec       	ldi	r24, 0xC8	; 200
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
		/* checking is the counter of the alarms reaches the maximum *
		 * amount of the allowed alarms or not(i.e., is there any    *
		 * more available alarms or not).                            */
		if(g_alarm_cnt <= MaximumAlarms){
    3c1c:	80 91 82 02 	lds	r24, 0x0282
    3c20:	85 30       	cpi	r24, 0x05	; 5
    3c22:	08 f0       	brcs	.+2      	; 0x3c26 <App_setAlarm+0x7a>
    3c24:	d6 c1       	rjmp	.+940    	; 0x3fd2 <App_setAlarm+0x426>
			/* incrementing the counter of the alarms by one */
			g_alarm_cnt++;
    3c26:	80 91 82 02 	lds	r24, 0x0282
    3c2a:	8f 5f       	subi	r24, 0xFF	; 255
    3c2c:	80 93 82 02 	sts	0x0282, r24
			/* calling the function that will search for the     *
			 * first available alarm to hold the desired minutes *
			 * and seconds that will be set by the user.         */
			App_firstAvailableAlarm(&firstAvailableAlarm);
    3c30:	ce 01       	movw	r24, r28
    3c32:	43 96       	adiw	r24, 0x13	; 19
    3c34:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <App_firstAvailableAlarm>
			/* setting the flag of the alarm(i.e, this flag  *
			 * isn't available any more).                    */
			alarms[(int)firstAvailableAlarm].flag = TRUE;
    3c38:	8b 89       	ldd	r24, Y+19	; 0x13
    3c3a:	48 2f       	mov	r20, r24
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	ca 01       	movw	r24, r20
    3c40:	88 0f       	add	r24, r24
    3c42:	99 1f       	adc	r25, r25
    3c44:	9c 01       	movw	r18, r24
    3c46:	22 0f       	add	r18, r18
    3c48:	33 1f       	adc	r19, r19
    3c4a:	22 0f       	add	r18, r18
    3c4c:	33 1f       	adc	r19, r19
    3c4e:	82 0f       	add	r24, r18
    3c50:	93 1f       	adc	r25, r19
    3c52:	84 0f       	add	r24, r20
    3c54:	95 1f       	adc	r25, r21
    3c56:	fc 01       	movw	r30, r24
    3c58:	e8 56       	subi	r30, 0x68	; 104
    3c5a:	fd 4f       	sbci	r31, 0xFD	; 253
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	80 83       	st	Z, r24
			/* setting up the LCD to display the choices of the *
			 * user.                                            */
			LCD_moveCursor(2 , 9);
    3c60:	82 e0       	ldi	r24, 0x02	; 2
    3c62:	69 e0       	ldi	r22, 0x09	; 9
    3c64:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
			LCD_displayCharacter(':');
    3c68:	8a e3       	ldi	r24, 0x3A	; 58
    3c6a:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_displayCharacter>
			LCD_moveCursor(2 , 7);
    3c6e:	82 e0       	ldi	r24, 0x02	; 2
    3c70:	67 e0       	ldi	r22, 0x07	; 7
    3c72:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
			/* looping to get the minutes and seconds then saving *
			 * them.                                              */
			for(placeCnt = 4 ; placeCnt>0 ; placeCnt--){
    3c76:	84 e0       	ldi	r24, 0x04	; 4
    3c78:	89 8b       	std	Y+17, r24	; 0x11
    3c7a:	a6 c1       	rjmp	.+844    	; 0x3fc8 <App_setAlarm+0x41c>
				/* if we are in the tens of the minutes */
				if(placeCnt == MINUTES_TENS){
    3c7c:	89 89       	ldd	r24, Y+17	; 0x11
    3c7e:	84 30       	cpi	r24, 0x04	; 4
    3c80:	39 f5       	brne	.+78     	; 0x3cd0 <App_setAlarm+0x124>
					 * get the minute's tens from the user    *
					 * then checking whether it is more than  *
					 * 6 or not.                              */
					do{
						/* getting the minute's tens from the user */
						keypad_readBuffer = KEYPAD_getPressedKey();
    3c82:	0e 94 0e 1c 	call	0x381c	; 0x381c <GetPresseKey>
    3c86:	8a 8b       	std	Y+18, r24	; 0x12
						/* displaying the user choice */
						LCD_moveCursor(2 , 7);
    3c88:	82 e0       	ldi	r24, 0x02	; 2
    3c8a:	67 e0       	ldi	r22, 0x07	; 7
    3c8c:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
						LCD_integerToString(keypad_readBuffer);
    3c90:	8a 89       	ldd	r24, Y+18	; 0x12
    3c92:	88 2f       	mov	r24, r24
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
						/*saving the minute's tens in the array *
						 * of the minutes and seconds that are  *
						 * specific to this alarm.              */
						alarms[(int)firstAvailableAlarm].alarmDigits[0] = keypad_readBuffer;
    3c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c9c:	48 2f       	mov	r20, r24
    3c9e:	50 e0       	ldi	r21, 0x00	; 0
    3ca0:	8a 89       	ldd	r24, Y+18	; 0x12
    3ca2:	68 2f       	mov	r22, r24
    3ca4:	70 e0       	ldi	r23, 0x00	; 0
    3ca6:	ca 01       	movw	r24, r20
    3ca8:	88 0f       	add	r24, r24
    3caa:	99 1f       	adc	r25, r25
    3cac:	9c 01       	movw	r18, r24
    3cae:	22 0f       	add	r18, r18
    3cb0:	33 1f       	adc	r19, r19
    3cb2:	22 0f       	add	r18, r18
    3cb4:	33 1f       	adc	r19, r19
    3cb6:	82 0f       	add	r24, r18
    3cb8:	93 1f       	adc	r25, r19
    3cba:	84 0f       	add	r24, r20
    3cbc:	95 1f       	adc	r25, r21
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	e7 56       	subi	r30, 0x67	; 103
    3cc2:	fd 4f       	sbci	r31, 0xFD	; 253
    3cc4:	71 83       	std	Z+1, r23	; 0x01
    3cc6:	60 83       	st	Z, r22
					}while((keypad_readBuffer > MAX_MINUTES_TENS));
    3cc8:	8a 89       	ldd	r24, Y+18	; 0x12
    3cca:	87 30       	cpi	r24, 0x07	; 7
    3ccc:	d0 f6       	brcc	.-76     	; 0x3c82 <App_setAlarm+0xd6>
    3cce:	79 c1       	rjmp	.+754    	; 0x3fc2 <App_setAlarm+0x416>
				} else if(placeCnt == 3){
    3cd0:	89 89       	ldd	r24, Y+17	; 0x11
    3cd2:	83 30       	cpi	r24, 0x03	; 3
    3cd4:	09 f0       	breq	.+2      	; 0x3cd8 <App_setAlarm+0x12c>
    3cd6:	aa c0       	rjmp	.+340    	; 0x3e2c <App_setAlarm+0x280>
					do{
						keypad_readBuffer = KEYPAD_getPressedKey();
    3cd8:	0e 94 0e 1c 	call	0x381c	; 0x381c <GetPresseKey>
    3cdc:	8a 8b       	std	Y+18, r24	; 0x12
						LCD_moveCursor(2 , 8);
    3cde:	82 e0       	ldi	r24, 0x02	; 2
    3ce0:	68 e0       	ldi	r22, 0x08	; 8
    3ce2:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
						LCD_integerToString(keypad_readBuffer);
    3ce6:	8a 89       	ldd	r24, Y+18	; 0x12
    3ce8:	88 2f       	mov	r24, r24
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
						alarms[(int)firstAvailableAlarm].alarmDigits[1] = keypad_readBuffer;
    3cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cf2:	48 2f       	mov	r20, r24
    3cf4:	50 e0       	ldi	r21, 0x00	; 0
    3cf6:	8a 89       	ldd	r24, Y+18	; 0x12
    3cf8:	68 2f       	mov	r22, r24
    3cfa:	70 e0       	ldi	r23, 0x00	; 0
    3cfc:	ca 01       	movw	r24, r20
    3cfe:	88 0f       	add	r24, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	9c 01       	movw	r18, r24
    3d04:	22 0f       	add	r18, r18
    3d06:	33 1f       	adc	r19, r19
    3d08:	22 0f       	add	r18, r18
    3d0a:	33 1f       	adc	r19, r19
    3d0c:	82 0f       	add	r24, r18
    3d0e:	93 1f       	adc	r25, r19
    3d10:	84 0f       	add	r24, r20
    3d12:	95 1f       	adc	r25, r21
    3d14:	fc 01       	movw	r30, r24
    3d16:	e5 56       	subi	r30, 0x65	; 101
    3d18:	fd 4f       	sbci	r31, 0xFD	; 253
    3d1a:	71 83       	std	Z+1, r23	; 0x01
    3d1c:	60 83       	st	Z, r22
					}while(((keypad_readBuffer != 0) &&(alarms[(int)firstAvailableAlarm].alarmDigits[0] == 6)));
    3d1e:	8a 89       	ldd	r24, Y+18	; 0x12
    3d20:	88 23       	and	r24, r24
    3d22:	b9 f0       	breq	.+46     	; 0x3d52 <App_setAlarm+0x1a6>
    3d24:	8b 89       	ldd	r24, Y+19	; 0x13
    3d26:	48 2f       	mov	r20, r24
    3d28:	50 e0       	ldi	r21, 0x00	; 0
    3d2a:	ca 01       	movw	r24, r20
    3d2c:	88 0f       	add	r24, r24
    3d2e:	99 1f       	adc	r25, r25
    3d30:	9c 01       	movw	r18, r24
    3d32:	22 0f       	add	r18, r18
    3d34:	33 1f       	adc	r19, r19
    3d36:	22 0f       	add	r18, r18
    3d38:	33 1f       	adc	r19, r19
    3d3a:	82 0f       	add	r24, r18
    3d3c:	93 1f       	adc	r25, r19
    3d3e:	84 0f       	add	r24, r20
    3d40:	95 1f       	adc	r25, r21
    3d42:	fc 01       	movw	r30, r24
    3d44:	e7 56       	subi	r30, 0x67	; 103
    3d46:	fd 4f       	sbci	r31, 0xFD	; 253
    3d48:	80 81       	ld	r24, Z
    3d4a:	91 81       	ldd	r25, Z+1	; 0x01
    3d4c:	86 30       	cpi	r24, 0x06	; 6
    3d4e:	91 05       	cpc	r25, r1
    3d50:	19 f2       	breq	.-122    	; 0x3cd8 <App_setAlarm+0x12c>
					tempCnt = alarms[(int)firstAvailableAlarm].alarmDigits[0] * 10
    3d52:	8b 89       	ldd	r24, Y+19	; 0x13
    3d54:	48 2f       	mov	r20, r24
    3d56:	50 e0       	ldi	r21, 0x00	; 0
    3d58:	ca 01       	movw	r24, r20
    3d5a:	88 0f       	add	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	9c 01       	movw	r18, r24
    3d60:	22 0f       	add	r18, r18
    3d62:	33 1f       	adc	r19, r19
    3d64:	22 0f       	add	r18, r18
    3d66:	33 1f       	adc	r19, r19
    3d68:	82 0f       	add	r24, r18
    3d6a:	93 1f       	adc	r25, r19
    3d6c:	84 0f       	add	r24, r20
    3d6e:	95 1f       	adc	r25, r21
    3d70:	fc 01       	movw	r30, r24
    3d72:	e7 56       	subi	r30, 0x67	; 103
    3d74:	fd 4f       	sbci	r31, 0xFD	; 253
    3d76:	80 81       	ld	r24, Z
    3d78:	91 81       	ldd	r25, Z+1	; 0x01
    3d7a:	9c 01       	movw	r18, r24
    3d7c:	22 0f       	add	r18, r18
    3d7e:	33 1f       	adc	r19, r19
    3d80:	c9 01       	movw	r24, r18
    3d82:	88 0f       	add	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	88 0f       	add	r24, r24
    3d88:	99 1f       	adc	r25, r25
    3d8a:	82 0f       	add	r24, r18
    3d8c:	93 1f       	adc	r25, r19
    3d8e:	68 2f       	mov	r22, r24
    3d90:	8b 89       	ldd	r24, Y+19	; 0x13
    3d92:	48 2f       	mov	r20, r24
    3d94:	50 e0       	ldi	r21, 0x00	; 0
    3d96:	ca 01       	movw	r24, r20
    3d98:	88 0f       	add	r24, r24
    3d9a:	99 1f       	adc	r25, r25
    3d9c:	9c 01       	movw	r18, r24
    3d9e:	22 0f       	add	r18, r18
    3da0:	33 1f       	adc	r19, r19
    3da2:	22 0f       	add	r18, r18
    3da4:	33 1f       	adc	r19, r19
    3da6:	82 0f       	add	r24, r18
    3da8:	93 1f       	adc	r25, r19
    3daa:	84 0f       	add	r24, r20
    3dac:	95 1f       	adc	r25, r21
    3dae:	fc 01       	movw	r30, r24
    3db0:	e5 56       	subi	r30, 0x65	; 101
    3db2:	fd 4f       	sbci	r31, 0xFD	; 253
    3db4:	80 81       	ld	r24, Z
    3db6:	91 81       	ldd	r25, Z+1	; 0x01
    3db8:	86 0f       	add	r24, r22
    3dba:	88 8b       	std	Y+16, r24	; 0x10
							+ alarms[(int)firstAvailableAlarm].alarmDigits[1];
					alarms[(int)firstAvailableAlarm].secCnt += tempCnt*60;
    3dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    3dbe:	68 2f       	mov	r22, r24
    3dc0:	70 e0       	ldi	r23, 0x00	; 0
    3dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    3dc4:	48 2f       	mov	r20, r24
    3dc6:	50 e0       	ldi	r21, 0x00	; 0
    3dc8:	ca 01       	movw	r24, r20
    3dca:	88 0f       	add	r24, r24
    3dcc:	99 1f       	adc	r25, r25
    3dce:	9c 01       	movw	r18, r24
    3dd0:	22 0f       	add	r18, r18
    3dd2:	33 1f       	adc	r19, r19
    3dd4:	22 0f       	add	r18, r18
    3dd6:	33 1f       	adc	r19, r19
    3dd8:	82 0f       	add	r24, r18
    3dda:	93 1f       	adc	r25, r19
    3ddc:	84 0f       	add	r24, r20
    3dde:	95 1f       	adc	r25, r21
    3de0:	fc 01       	movw	r30, r24
    3de2:	ef 55       	subi	r30, 0x5F	; 95
    3de4:	fd 4f       	sbci	r31, 0xFD	; 253
    3de6:	40 81       	ld	r20, Z
    3de8:	51 81       	ldd	r21, Z+1	; 0x01
    3dea:	88 89       	ldd	r24, Y+16	; 0x10
    3dec:	28 2f       	mov	r18, r24
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	8c e3       	ldi	r24, 0x3C	; 60
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	fc 01       	movw	r30, r24
    3df6:	2e 9f       	mul	r18, r30
    3df8:	c0 01       	movw	r24, r0
    3dfa:	2f 9f       	mul	r18, r31
    3dfc:	90 0d       	add	r25, r0
    3dfe:	3e 9f       	mul	r19, r30
    3e00:	90 0d       	add	r25, r0
    3e02:	11 24       	eor	r1, r1
    3e04:	48 0f       	add	r20, r24
    3e06:	59 1f       	adc	r21, r25
    3e08:	cb 01       	movw	r24, r22
    3e0a:	88 0f       	add	r24, r24
    3e0c:	99 1f       	adc	r25, r25
    3e0e:	9c 01       	movw	r18, r24
    3e10:	22 0f       	add	r18, r18
    3e12:	33 1f       	adc	r19, r19
    3e14:	22 0f       	add	r18, r18
    3e16:	33 1f       	adc	r19, r19
    3e18:	82 0f       	add	r24, r18
    3e1a:	93 1f       	adc	r25, r19
    3e1c:	86 0f       	add	r24, r22
    3e1e:	97 1f       	adc	r25, r23
    3e20:	fc 01       	movw	r30, r24
    3e22:	ef 55       	subi	r30, 0x5F	; 95
    3e24:	fd 4f       	sbci	r31, 0xFD	; 253
    3e26:	51 83       	std	Z+1, r21	; 0x01
    3e28:	40 83       	st	Z, r20
    3e2a:	cb c0       	rjmp	.+406    	; 0x3fc2 <App_setAlarm+0x416>
				} else if(placeCnt == 2){
    3e2c:	89 89       	ldd	r24, Y+17	; 0x11
    3e2e:	82 30       	cpi	r24, 0x02	; 2
    3e30:	39 f5       	brne	.+78     	; 0x3e80 <App_setAlarm+0x2d4>
					do{
						keypad_readBuffer = KEYPAD_getPressedKey();
    3e32:	0e 94 0e 1c 	call	0x381c	; 0x381c <GetPresseKey>
    3e36:	8a 8b       	std	Y+18, r24	; 0x12
						LCD_moveCursor(2 , 10);
    3e38:	82 e0       	ldi	r24, 0x02	; 2
    3e3a:	6a e0       	ldi	r22, 0x0A	; 10
    3e3c:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
						LCD_integerToString(keypad_readBuffer);
    3e40:	8a 89       	ldd	r24, Y+18	; 0x12
    3e42:	88 2f       	mov	r24, r24
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
						alarms[(int)firstAvailableAlarm].alarmDigits[2] = keypad_readBuffer;
    3e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e4c:	48 2f       	mov	r20, r24
    3e4e:	50 e0       	ldi	r21, 0x00	; 0
    3e50:	8a 89       	ldd	r24, Y+18	; 0x12
    3e52:	68 2f       	mov	r22, r24
    3e54:	70 e0       	ldi	r23, 0x00	; 0
    3e56:	ca 01       	movw	r24, r20
    3e58:	88 0f       	add	r24, r24
    3e5a:	99 1f       	adc	r25, r25
    3e5c:	9c 01       	movw	r18, r24
    3e5e:	22 0f       	add	r18, r18
    3e60:	33 1f       	adc	r19, r19
    3e62:	22 0f       	add	r18, r18
    3e64:	33 1f       	adc	r19, r19
    3e66:	82 0f       	add	r24, r18
    3e68:	93 1f       	adc	r25, r19
    3e6a:	84 0f       	add	r24, r20
    3e6c:	95 1f       	adc	r25, r21
    3e6e:	fc 01       	movw	r30, r24
    3e70:	e3 56       	subi	r30, 0x63	; 99
    3e72:	fd 4f       	sbci	r31, 0xFD	; 253
    3e74:	71 83       	std	Z+1, r23	; 0x01
    3e76:	60 83       	st	Z, r22
					}while((keypad_readBuffer > 6));
    3e78:	8a 89       	ldd	r24, Y+18	; 0x12
    3e7a:	87 30       	cpi	r24, 0x07	; 7
    3e7c:	d0 f6       	brcc	.-76     	; 0x3e32 <App_setAlarm+0x286>
    3e7e:	a1 c0       	rjmp	.+322    	; 0x3fc2 <App_setAlarm+0x416>
				} else if(placeCnt == 1){
    3e80:	89 89       	ldd	r24, Y+17	; 0x11
    3e82:	81 30       	cpi	r24, 0x01	; 1
    3e84:	09 f0       	breq	.+2      	; 0x3e88 <App_setAlarm+0x2dc>
    3e86:	9d c0       	rjmp	.+314    	; 0x3fc2 <App_setAlarm+0x416>
					do{
						keypad_readBuffer = KEYPAD_getPressedKey();
    3e88:	0e 94 0e 1c 	call	0x381c	; 0x381c <GetPresseKey>
    3e8c:	8a 8b       	std	Y+18, r24	; 0x12
						LCD_moveCursor(2 , 11);
    3e8e:	82 e0       	ldi	r24, 0x02	; 2
    3e90:	6b e0       	ldi	r22, 0x0B	; 11
    3e92:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
						LCD_integerToString(keypad_readBuffer);
    3e96:	8a 89       	ldd	r24, Y+18	; 0x12
    3e98:	88 2f       	mov	r24, r24
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
						alarms[(int)firstAvailableAlarm].alarmDigits[3] = keypad_readBuffer;
    3ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ea2:	48 2f       	mov	r20, r24
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	8a 89       	ldd	r24, Y+18	; 0x12
    3ea8:	68 2f       	mov	r22, r24
    3eaa:	70 e0       	ldi	r23, 0x00	; 0
    3eac:	ca 01       	movw	r24, r20
    3eae:	88 0f       	add	r24, r24
    3eb0:	99 1f       	adc	r25, r25
    3eb2:	9c 01       	movw	r18, r24
    3eb4:	22 0f       	add	r18, r18
    3eb6:	33 1f       	adc	r19, r19
    3eb8:	22 0f       	add	r18, r18
    3eba:	33 1f       	adc	r19, r19
    3ebc:	82 0f       	add	r24, r18
    3ebe:	93 1f       	adc	r25, r19
    3ec0:	84 0f       	add	r24, r20
    3ec2:	95 1f       	adc	r25, r21
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	e1 56       	subi	r30, 0x61	; 97
    3ec8:	fd 4f       	sbci	r31, 0xFD	; 253
    3eca:	71 83       	std	Z+1, r23	; 0x01
    3ecc:	60 83       	st	Z, r22
					}while(((keypad_readBuffer != 0) &&(alarms[(int)firstAvailableAlarm].alarmDigits[2] == 6)));
    3ece:	8a 89       	ldd	r24, Y+18	; 0x12
    3ed0:	88 23       	and	r24, r24
    3ed2:	b9 f0       	breq	.+46     	; 0x3f02 <App_setAlarm+0x356>
    3ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ed6:	48 2f       	mov	r20, r24
    3ed8:	50 e0       	ldi	r21, 0x00	; 0
    3eda:	ca 01       	movw	r24, r20
    3edc:	88 0f       	add	r24, r24
    3ede:	99 1f       	adc	r25, r25
    3ee0:	9c 01       	movw	r18, r24
    3ee2:	22 0f       	add	r18, r18
    3ee4:	33 1f       	adc	r19, r19
    3ee6:	22 0f       	add	r18, r18
    3ee8:	33 1f       	adc	r19, r19
    3eea:	82 0f       	add	r24, r18
    3eec:	93 1f       	adc	r25, r19
    3eee:	84 0f       	add	r24, r20
    3ef0:	95 1f       	adc	r25, r21
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	e3 56       	subi	r30, 0x63	; 99
    3ef6:	fd 4f       	sbci	r31, 0xFD	; 253
    3ef8:	80 81       	ld	r24, Z
    3efa:	91 81       	ldd	r25, Z+1	; 0x01
    3efc:	86 30       	cpi	r24, 0x06	; 6
    3efe:	91 05       	cpc	r25, r1
    3f00:	19 f2       	breq	.-122    	; 0x3e88 <App_setAlarm+0x2dc>
					alarms[(int)firstAvailableAlarm].secCnt += (alarms[(int)firstAvailableAlarm].alarmDigits[2] * 10)
    3f02:	8b 89       	ldd	r24, Y+19	; 0x13
    3f04:	a8 2f       	mov	r26, r24
    3f06:	b0 e0       	ldi	r27, 0x00	; 0
    3f08:	8b 89       	ldd	r24, Y+19	; 0x13
    3f0a:	48 2f       	mov	r20, r24
    3f0c:	50 e0       	ldi	r21, 0x00	; 0
    3f0e:	ca 01       	movw	r24, r20
    3f10:	88 0f       	add	r24, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	9c 01       	movw	r18, r24
    3f16:	22 0f       	add	r18, r18
    3f18:	33 1f       	adc	r19, r19
    3f1a:	22 0f       	add	r18, r18
    3f1c:	33 1f       	adc	r19, r19
    3f1e:	82 0f       	add	r24, r18
    3f20:	93 1f       	adc	r25, r19
    3f22:	84 0f       	add	r24, r20
    3f24:	95 1f       	adc	r25, r21
    3f26:	fc 01       	movw	r30, r24
    3f28:	ef 55       	subi	r30, 0x5F	; 95
    3f2a:	fd 4f       	sbci	r31, 0xFD	; 253
    3f2c:	00 81       	ld	r16, Z
    3f2e:	11 81       	ldd	r17, Z+1	; 0x01
    3f30:	8b 89       	ldd	r24, Y+19	; 0x13
    3f32:	48 2f       	mov	r20, r24
    3f34:	50 e0       	ldi	r21, 0x00	; 0
    3f36:	ca 01       	movw	r24, r20
    3f38:	88 0f       	add	r24, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	9c 01       	movw	r18, r24
    3f3e:	22 0f       	add	r18, r18
    3f40:	33 1f       	adc	r19, r19
    3f42:	22 0f       	add	r18, r18
    3f44:	33 1f       	adc	r19, r19
    3f46:	82 0f       	add	r24, r18
    3f48:	93 1f       	adc	r25, r19
    3f4a:	84 0f       	add	r24, r20
    3f4c:	95 1f       	adc	r25, r21
    3f4e:	fc 01       	movw	r30, r24
    3f50:	e3 56       	subi	r30, 0x63	; 99
    3f52:	fd 4f       	sbci	r31, 0xFD	; 253
    3f54:	80 81       	ld	r24, Z
    3f56:	91 81       	ldd	r25, Z+1	; 0x01
    3f58:	9c 01       	movw	r18, r24
    3f5a:	22 0f       	add	r18, r18
    3f5c:	33 1f       	adc	r19, r19
    3f5e:	c9 01       	movw	r24, r18
    3f60:	88 0f       	add	r24, r24
    3f62:	99 1f       	adc	r25, r25
    3f64:	88 0f       	add	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	b9 01       	movw	r22, r18
    3f6a:	68 0f       	add	r22, r24
    3f6c:	79 1f       	adc	r23, r25
    3f6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3f70:	48 2f       	mov	r20, r24
    3f72:	50 e0       	ldi	r21, 0x00	; 0
    3f74:	ca 01       	movw	r24, r20
    3f76:	88 0f       	add	r24, r24
    3f78:	99 1f       	adc	r25, r25
    3f7a:	9c 01       	movw	r18, r24
    3f7c:	22 0f       	add	r18, r18
    3f7e:	33 1f       	adc	r19, r19
    3f80:	22 0f       	add	r18, r18
    3f82:	33 1f       	adc	r19, r19
    3f84:	82 0f       	add	r24, r18
    3f86:	93 1f       	adc	r25, r19
    3f88:	84 0f       	add	r24, r20
    3f8a:	95 1f       	adc	r25, r21
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	e1 56       	subi	r30, 0x61	; 97
    3f90:	fd 4f       	sbci	r31, 0xFD	; 253
    3f92:	80 81       	ld	r24, Z
    3f94:	91 81       	ldd	r25, Z+1	; 0x01
    3f96:	86 0f       	add	r24, r22
    3f98:	97 1f       	adc	r25, r23
    3f9a:	a8 01       	movw	r20, r16
    3f9c:	48 0f       	add	r20, r24
    3f9e:	59 1f       	adc	r21, r25
    3fa0:	cd 01       	movw	r24, r26
    3fa2:	88 0f       	add	r24, r24
    3fa4:	99 1f       	adc	r25, r25
    3fa6:	9c 01       	movw	r18, r24
    3fa8:	22 0f       	add	r18, r18
    3faa:	33 1f       	adc	r19, r19
    3fac:	22 0f       	add	r18, r18
    3fae:	33 1f       	adc	r19, r19
    3fb0:	82 0f       	add	r24, r18
    3fb2:	93 1f       	adc	r25, r19
    3fb4:	8a 0f       	add	r24, r26
    3fb6:	9b 1f       	adc	r25, r27
    3fb8:	fc 01       	movw	r30, r24
    3fba:	ef 55       	subi	r30, 0x5F	; 95
    3fbc:	fd 4f       	sbci	r31, 0xFD	; 253
    3fbe:	51 83       	std	Z+1, r21	; 0x01
    3fc0:	40 83       	st	Z, r20
			LCD_moveCursor(2 , 9);
			LCD_displayCharacter(':');
			LCD_moveCursor(2 , 7);
			/* looping to get the minutes and seconds then saving *
			 * them.                                              */
			for(placeCnt = 4 ; placeCnt>0 ; placeCnt--){
    3fc2:	89 89       	ldd	r24, Y+17	; 0x11
    3fc4:	81 50       	subi	r24, 0x01	; 1
    3fc6:	89 8b       	std	Y+17, r24	; 0x11
    3fc8:	89 89       	ldd	r24, Y+17	; 0x11
    3fca:	88 23       	and	r24, r24
    3fcc:	09 f0       	breq	.+2      	; 0x3fd0 <App_setAlarm+0x424>
    3fce:	56 ce       	rjmp	.-852    	; 0x3c7c <App_setAlarm+0xd0>
    3fd0:	12 c0       	rjmp	.+36     	; 0x3ff6 <App_setAlarm+0x44a>
					alarms[(int)firstAvailableAlarm].secCnt += (alarms[(int)firstAvailableAlarm].alarmDigits[2] * 10)
										        				+ alarms[(int)firstAvailableAlarm].alarmDigits[3];
				}
			}
		} else{
			LCD_clearScreen();
    3fd2:	0e 94 41 1b 	call	0x3682	; 0x3682 <LCD_clearScreen>
			LCD_moveCursor(1,0);
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	60 e0       	ldi	r22, 0x00	; 0
    3fda:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
			LCD_displayString("no more available");
    3fde:	87 ed       	ldi	r24, 0xD7	; 215
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
			LCD_moveCursor(2,0);
    3fe6:	82 e0       	ldi	r24, 0x02	; 2
    3fe8:	60 e0       	ldi	r22, 0x00	; 0
    3fea:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
			LCD_displayString("alarms");
    3fee:	89 ee       	ldi	r24, 0xE9	; 233
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
    3ff6:	80 e0       	ldi	r24, 0x00	; 0
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	aa ef       	ldi	r26, 0xFA	; 250
    3ffc:	b3 e4       	ldi	r27, 0x43	; 67
    3ffe:	8b 87       	std	Y+11, r24	; 0x0b
    4000:	9c 87       	std	Y+12, r25	; 0x0c
    4002:	ad 87       	std	Y+13, r26	; 0x0d
    4004:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4006:	6b 85       	ldd	r22, Y+11	; 0x0b
    4008:	7c 85       	ldd	r23, Y+12	; 0x0c
    400a:	8d 85       	ldd	r24, Y+13	; 0x0d
    400c:	9e 85       	ldd	r25, Y+14	; 0x0e
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	4a e7       	ldi	r20, 0x7A	; 122
    4014:	53 e4       	ldi	r21, 0x43	; 67
    4016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    401a:	dc 01       	movw	r26, r24
    401c:	cb 01       	movw	r24, r22
    401e:	8f 83       	std	Y+7, r24	; 0x07
    4020:	98 87       	std	Y+8, r25	; 0x08
    4022:	a9 87       	std	Y+9, r26	; 0x09
    4024:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4026:	6f 81       	ldd	r22, Y+7	; 0x07
    4028:	78 85       	ldd	r23, Y+8	; 0x08
    402a:	89 85       	ldd	r24, Y+9	; 0x09
    402c:	9a 85       	ldd	r25, Y+10	; 0x0a
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	40 e8       	ldi	r20, 0x80	; 128
    4034:	5f e3       	ldi	r21, 0x3F	; 63
    4036:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    403a:	88 23       	and	r24, r24
    403c:	2c f4       	brge	.+10     	; 0x4048 <App_setAlarm+0x49c>
		__ticks = 1;
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	9e 83       	std	Y+6, r25	; 0x06
    4044:	8d 83       	std	Y+5, r24	; 0x05
    4046:	3f c0       	rjmp	.+126    	; 0x40c6 <App_setAlarm+0x51a>
	else if (__tmp > 65535)
    4048:	6f 81       	ldd	r22, Y+7	; 0x07
    404a:	78 85       	ldd	r23, Y+8	; 0x08
    404c:	89 85       	ldd	r24, Y+9	; 0x09
    404e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	3f ef       	ldi	r19, 0xFF	; 255
    4054:	4f e7       	ldi	r20, 0x7F	; 127
    4056:	57 e4       	ldi	r21, 0x47	; 71
    4058:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    405c:	18 16       	cp	r1, r24
    405e:	4c f5       	brge	.+82     	; 0x40b2 <App_setAlarm+0x506>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4060:	6b 85       	ldd	r22, Y+11	; 0x0b
    4062:	7c 85       	ldd	r23, Y+12	; 0x0c
    4064:	8d 85       	ldd	r24, Y+13	; 0x0d
    4066:	9e 85       	ldd	r25, Y+14	; 0x0e
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	40 e2       	ldi	r20, 0x20	; 32
    406e:	51 e4       	ldi	r21, 0x41	; 65
    4070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	bc 01       	movw	r22, r24
    407a:	cd 01       	movw	r24, r26
    407c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	9e 83       	std	Y+6, r25	; 0x06
    4086:	8d 83       	std	Y+5, r24	; 0x05
    4088:	0f c0       	rjmp	.+30     	; 0x40a8 <App_setAlarm+0x4fc>
    408a:	89 e1       	ldi	r24, 0x19	; 25
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	9c 83       	std	Y+4, r25	; 0x04
    4090:	8b 83       	std	Y+3, r24	; 0x03
    4092:	8b 81       	ldd	r24, Y+3	; 0x03
    4094:	9c 81       	ldd	r25, Y+4	; 0x04
    4096:	01 97       	sbiw	r24, 0x01	; 1
    4098:	f1 f7       	brne	.-4      	; 0x4096 <App_setAlarm+0x4ea>
    409a:	9c 83       	std	Y+4, r25	; 0x04
    409c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    409e:	8d 81       	ldd	r24, Y+5	; 0x05
    40a0:	9e 81       	ldd	r25, Y+6	; 0x06
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	9e 83       	std	Y+6, r25	; 0x06
    40a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a8:	8d 81       	ldd	r24, Y+5	; 0x05
    40aa:	9e 81       	ldd	r25, Y+6	; 0x06
    40ac:	00 97       	sbiw	r24, 0x00	; 0
    40ae:	69 f7       	brne	.-38     	; 0x408a <App_setAlarm+0x4de>
    40b0:	14 c0       	rjmp	.+40     	; 0x40da <App_setAlarm+0x52e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b2:	6f 81       	ldd	r22, Y+7	; 0x07
    40b4:	78 85       	ldd	r23, Y+8	; 0x08
    40b6:	89 85       	ldd	r24, Y+9	; 0x09
    40b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	9e 83       	std	Y+6, r25	; 0x06
    40c4:	8d 83       	std	Y+5, r24	; 0x05
    40c6:	8d 81       	ldd	r24, Y+5	; 0x05
    40c8:	9e 81       	ldd	r25, Y+6	; 0x06
    40ca:	9a 83       	std	Y+2, r25	; 0x02
    40cc:	89 83       	std	Y+1, r24	; 0x01
    40ce:	89 81       	ldd	r24, Y+1	; 0x01
    40d0:	9a 81       	ldd	r25, Y+2	; 0x02
    40d2:	01 97       	sbiw	r24, 0x01	; 1
    40d4:	f1 f7       	brne	.-4      	; 0x40d2 <App_setAlarm+0x526>
    40d6:	9a 83       	std	Y+2, r25	; 0x02
    40d8:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(500);
	} else{
		/* here the user chose to return to the main menu */
	}
}
    40da:	63 96       	adiw	r28, 0x13	; 19
    40dc:	0f b6       	in	r0, 0x3f	; 63
    40de:	f8 94       	cli
    40e0:	de bf       	out	0x3e, r29	; 62
    40e2:	0f be       	out	0x3f, r0	; 63
    40e4:	cd bf       	out	0x3d, r28	; 61
    40e6:	cf 91       	pop	r28
    40e8:	df 91       	pop	r29
    40ea:	1f 91       	pop	r17
    40ec:	0f 91       	pop	r16
    40ee:	08 95       	ret

000040f0 <App_listAlarm>:

void App_listAlarm(void){
    40f0:	df 93       	push	r29
    40f2:	cf 93       	push	r28
    40f4:	cd b7       	in	r28, 0x3d	; 61
    40f6:	de b7       	in	r29, 0x3e	; 62
    40f8:	62 97       	sbiw	r28, 0x12	; 18
    40fa:	0f b6       	in	r0, 0x3f	; 63
    40fc:	f8 94       	cli
    40fe:	de bf       	out	0x3e, r29	; 62
    4100:	0f be       	out	0x3f, r0	; 63
    4102:	cd bf       	out	0x3d, r28	; 61
	uint8 lcd_row = 0;
    4104:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 alarmListChoiceCancel;
	uint8 noAlarmsFlag = FALSE;
    4106:	18 8a       	std	Y+16, r1	; 0x10
	LCD_clearScreen();
    4108:	0e 94 41 1b 	call	0x3682	; 0x3682 <LCD_clearScreen>
	LCD_moveCursor(1,3);
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	63 e0       	ldi	r22, 0x03	; 3
    4110:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("0.[show]");
    4114:	80 ef       	ldi	r24, 0xF0	; 240
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	LCD_moveCursor(2,3);
    411c:	82 e0       	ldi	r24, 0x02	; 2
    411e:	63 e0       	ldi	r22, 0x03	; 3
    4120:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("%.[close]");
    4124:	8e eb       	ldi	r24, 0xBE	; 190
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	do{
		alarmListChoiceCancel = KEYPAD_getPressedKey();
    412c:	0e 94 0e 1c 	call	0x381c	; 0x381c <GetPresseKey>
    4130:	89 8b       	std	Y+17, r24	; 0x11
		if(alarmListChoiceCancel != '%'){ /* this check for the first time*/
    4132:	89 89       	ldd	r24, Y+17	; 0x11
    4134:	85 32       	cpi	r24, 0x25	; 37
    4136:	09 f4       	brne	.+2      	; 0x413a <App_listAlarm+0x4a>
    4138:	1e c1       	rjmp	.+572    	; 0x4376 <App_listAlarm+0x286>
			LCD_clearScreen();
    413a:	0e 94 41 1b 	call	0x3682	; 0x3682 <LCD_clearScreen>
			if(!(alarms[0].flag || alarms[1].flag || alarms[2].flag || alarms[3].flag)){
    413e:	80 91 98 02 	lds	r24, 0x0298
    4142:	88 23       	and	r24, r24
    4144:	09 f0       	breq	.+2      	; 0x4148 <App_listAlarm+0x58>
    4146:	88 c0       	rjmp	.+272    	; 0x4258 <App_listAlarm+0x168>
    4148:	80 91 a3 02 	lds	r24, 0x02A3
    414c:	88 23       	and	r24, r24
    414e:	09 f0       	breq	.+2      	; 0x4152 <App_listAlarm+0x62>
    4150:	83 c0       	rjmp	.+262    	; 0x4258 <App_listAlarm+0x168>
    4152:	80 91 ae 02 	lds	r24, 0x02AE
    4156:	88 23       	and	r24, r24
    4158:	09 f0       	breq	.+2      	; 0x415c <App_listAlarm+0x6c>
    415a:	7e c0       	rjmp	.+252    	; 0x4258 <App_listAlarm+0x168>
    415c:	80 91 b9 02 	lds	r24, 0x02B9
    4160:	88 23       	and	r24, r24
    4162:	09 f0       	breq	.+2      	; 0x4166 <App_listAlarm+0x76>
    4164:	79 c0       	rjmp	.+242    	; 0x4258 <App_listAlarm+0x168>
				LCD_displayString("no alarms are set yet");
    4166:	89 ef       	ldi	r24, 0xF9	; 249
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	aa e7       	ldi	r26, 0x7A	; 122
    4174:	b4 e4       	ldi	r27, 0x44	; 68
    4176:	8b 87       	std	Y+11, r24	; 0x0b
    4178:	9c 87       	std	Y+12, r25	; 0x0c
    417a:	ad 87       	std	Y+13, r26	; 0x0d
    417c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    417e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4180:	7c 85       	ldd	r23, Y+12	; 0x0c
    4182:	8d 85       	ldd	r24, Y+13	; 0x0d
    4184:	9e 85       	ldd	r25, Y+14	; 0x0e
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	4a e7       	ldi	r20, 0x7A	; 122
    418c:	53 e4       	ldi	r21, 0x43	; 67
    418e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	8f 83       	std	Y+7, r24	; 0x07
    4198:	98 87       	std	Y+8, r25	; 0x08
    419a:	a9 87       	std	Y+9, r26	; 0x09
    419c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    419e:	6f 81       	ldd	r22, Y+7	; 0x07
    41a0:	78 85       	ldd	r23, Y+8	; 0x08
    41a2:	89 85       	ldd	r24, Y+9	; 0x09
    41a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	40 e8       	ldi	r20, 0x80	; 128
    41ac:	5f e3       	ldi	r21, 0x3F	; 63
    41ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41b2:	88 23       	and	r24, r24
    41b4:	2c f4       	brge	.+10     	; 0x41c0 <App_listAlarm+0xd0>
		__ticks = 1;
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	9e 83       	std	Y+6, r25	; 0x06
    41bc:	8d 83       	std	Y+5, r24	; 0x05
    41be:	3f c0       	rjmp	.+126    	; 0x423e <App_listAlarm+0x14e>
	else if (__tmp > 65535)
    41c0:	6f 81       	ldd	r22, Y+7	; 0x07
    41c2:	78 85       	ldd	r23, Y+8	; 0x08
    41c4:	89 85       	ldd	r24, Y+9	; 0x09
    41c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	3f ef       	ldi	r19, 0xFF	; 255
    41cc:	4f e7       	ldi	r20, 0x7F	; 127
    41ce:	57 e4       	ldi	r21, 0x47	; 71
    41d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41d4:	18 16       	cp	r1, r24
    41d6:	4c f5       	brge	.+82     	; 0x422a <App_listAlarm+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41da:	7c 85       	ldd	r23, Y+12	; 0x0c
    41dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41de:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	40 e2       	ldi	r20, 0x20	; 32
    41e6:	51 e4       	ldi	r21, 0x41	; 65
    41e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	bc 01       	movw	r22, r24
    41f2:	cd 01       	movw	r24, r26
    41f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	9e 83       	std	Y+6, r25	; 0x06
    41fe:	8d 83       	std	Y+5, r24	; 0x05
    4200:	0f c0       	rjmp	.+30     	; 0x4220 <App_listAlarm+0x130>
    4202:	89 e1       	ldi	r24, 0x19	; 25
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	9c 83       	std	Y+4, r25	; 0x04
    4208:	8b 83       	std	Y+3, r24	; 0x03
    420a:	8b 81       	ldd	r24, Y+3	; 0x03
    420c:	9c 81       	ldd	r25, Y+4	; 0x04
    420e:	01 97       	sbiw	r24, 0x01	; 1
    4210:	f1 f7       	brne	.-4      	; 0x420e <App_listAlarm+0x11e>
    4212:	9c 83       	std	Y+4, r25	; 0x04
    4214:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4216:	8d 81       	ldd	r24, Y+5	; 0x05
    4218:	9e 81       	ldd	r25, Y+6	; 0x06
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	9e 83       	std	Y+6, r25	; 0x06
    421e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4220:	8d 81       	ldd	r24, Y+5	; 0x05
    4222:	9e 81       	ldd	r25, Y+6	; 0x06
    4224:	00 97       	sbiw	r24, 0x00	; 0
    4226:	69 f7       	brne	.-38     	; 0x4202 <App_listAlarm+0x112>
    4228:	14 c0       	rjmp	.+40     	; 0x4252 <App_listAlarm+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    422a:	6f 81       	ldd	r22, Y+7	; 0x07
    422c:	78 85       	ldd	r23, Y+8	; 0x08
    422e:	89 85       	ldd	r24, Y+9	; 0x09
    4230:	9a 85       	ldd	r25, Y+10	; 0x0a
    4232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4236:	dc 01       	movw	r26, r24
    4238:	cb 01       	movw	r24, r22
    423a:	9e 83       	std	Y+6, r25	; 0x06
    423c:	8d 83       	std	Y+5, r24	; 0x05
    423e:	8d 81       	ldd	r24, Y+5	; 0x05
    4240:	9e 81       	ldd	r25, Y+6	; 0x06
    4242:	9a 83       	std	Y+2, r25	; 0x02
    4244:	89 83       	std	Y+1, r24	; 0x01
    4246:	89 81       	ldd	r24, Y+1	; 0x01
    4248:	9a 81       	ldd	r25, Y+2	; 0x02
    424a:	01 97       	sbiw	r24, 0x01	; 1
    424c:	f1 f7       	brne	.-4      	; 0x424a <App_listAlarm+0x15a>
    424e:	9a 83       	std	Y+2, r25	; 0x02
    4250:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				noAlarmsFlag = TRUE;
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	88 8b       	std	Y+16, r24	; 0x10
    4256:	8f c0       	rjmp	.+286    	; 0x4376 <App_listAlarm+0x286>
			} else{
				for(uint8 i =0 ; i<MaximumAlarms ; i++){
    4258:	1f 86       	std	Y+15, r1	; 0x0f
    425a:	89 c0       	rjmp	.+274    	; 0x436e <App_listAlarm+0x27e>
					if(alarms[(int)i].flag){
    425c:	8f 85       	ldd	r24, Y+15	; 0x0f
    425e:	48 2f       	mov	r20, r24
    4260:	50 e0       	ldi	r21, 0x00	; 0
    4262:	ca 01       	movw	r24, r20
    4264:	88 0f       	add	r24, r24
    4266:	99 1f       	adc	r25, r25
    4268:	9c 01       	movw	r18, r24
    426a:	22 0f       	add	r18, r18
    426c:	33 1f       	adc	r19, r19
    426e:	22 0f       	add	r18, r18
    4270:	33 1f       	adc	r19, r19
    4272:	82 0f       	add	r24, r18
    4274:	93 1f       	adc	r25, r19
    4276:	84 0f       	add	r24, r20
    4278:	95 1f       	adc	r25, r21
    427a:	fc 01       	movw	r30, r24
    427c:	e8 56       	subi	r30, 0x68	; 104
    427e:	fd 4f       	sbci	r31, 0xFD	; 253
    4280:	80 81       	ld	r24, Z
    4282:	88 23       	and	r24, r24
    4284:	09 f4       	brne	.+2      	; 0x4288 <App_listAlarm+0x198>
    4286:	70 c0       	rjmp	.+224    	; 0x4368 <App_listAlarm+0x278>
						LCD_moveCursor(lcd_row++ , 0);
    4288:	9a 89       	ldd	r25, Y+18	; 0x12
    428a:	8a 89       	ldd	r24, Y+18	; 0x12
    428c:	8f 5f       	subi	r24, 0xFF	; 255
    428e:	8a 8b       	std	Y+18, r24	; 0x12
    4290:	89 2f       	mov	r24, r25
    4292:	60 e0       	ldi	r22, 0x00	; 0
    4294:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
						LCD_displayString("Alarm: ");
    4298:	8f e0       	ldi	r24, 0x0F	; 15
    429a:	91 e0       	ldi	r25, 0x01	; 1
    429c:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
						LCD_integerToString(i);
    42a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    42a2:	88 2f       	mov	r24, r24
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
						LCD_displayString(" -> ");
    42aa:	87 e1       	ldi	r24, 0x17	; 23
    42ac:	91 e0       	ldi	r25, 0x01	; 1
    42ae:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
						LCD_integerToString(alarms[(int)i].alarmDigits[0]);
    42b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    42b4:	48 2f       	mov	r20, r24
    42b6:	50 e0       	ldi	r21, 0x00	; 0
    42b8:	ca 01       	movw	r24, r20
    42ba:	88 0f       	add	r24, r24
    42bc:	99 1f       	adc	r25, r25
    42be:	9c 01       	movw	r18, r24
    42c0:	22 0f       	add	r18, r18
    42c2:	33 1f       	adc	r19, r19
    42c4:	22 0f       	add	r18, r18
    42c6:	33 1f       	adc	r19, r19
    42c8:	82 0f       	add	r24, r18
    42ca:	93 1f       	adc	r25, r19
    42cc:	84 0f       	add	r24, r20
    42ce:	95 1f       	adc	r25, r21
    42d0:	fc 01       	movw	r30, r24
    42d2:	e7 56       	subi	r30, 0x67	; 103
    42d4:	fd 4f       	sbci	r31, 0xFD	; 253
    42d6:	80 81       	ld	r24, Z
    42d8:	91 81       	ldd	r25, Z+1	; 0x01
    42da:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
						LCD_integerToString(alarms[(int)i].alarmDigits[1]);
    42de:	8f 85       	ldd	r24, Y+15	; 0x0f
    42e0:	48 2f       	mov	r20, r24
    42e2:	50 e0       	ldi	r21, 0x00	; 0
    42e4:	ca 01       	movw	r24, r20
    42e6:	88 0f       	add	r24, r24
    42e8:	99 1f       	adc	r25, r25
    42ea:	9c 01       	movw	r18, r24
    42ec:	22 0f       	add	r18, r18
    42ee:	33 1f       	adc	r19, r19
    42f0:	22 0f       	add	r18, r18
    42f2:	33 1f       	adc	r19, r19
    42f4:	82 0f       	add	r24, r18
    42f6:	93 1f       	adc	r25, r19
    42f8:	84 0f       	add	r24, r20
    42fa:	95 1f       	adc	r25, r21
    42fc:	fc 01       	movw	r30, r24
    42fe:	e5 56       	subi	r30, 0x65	; 101
    4300:	fd 4f       	sbci	r31, 0xFD	; 253
    4302:	80 81       	ld	r24, Z
    4304:	91 81       	ldd	r25, Z+1	; 0x01
    4306:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
						LCD_displayCharacter(':');
    430a:	8a e3       	ldi	r24, 0x3A	; 58
    430c:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_displayCharacter>
						LCD_integerToString(alarms[(int)i].alarmDigits[2]);
    4310:	8f 85       	ldd	r24, Y+15	; 0x0f
    4312:	48 2f       	mov	r20, r24
    4314:	50 e0       	ldi	r21, 0x00	; 0
    4316:	ca 01       	movw	r24, r20
    4318:	88 0f       	add	r24, r24
    431a:	99 1f       	adc	r25, r25
    431c:	9c 01       	movw	r18, r24
    431e:	22 0f       	add	r18, r18
    4320:	33 1f       	adc	r19, r19
    4322:	22 0f       	add	r18, r18
    4324:	33 1f       	adc	r19, r19
    4326:	82 0f       	add	r24, r18
    4328:	93 1f       	adc	r25, r19
    432a:	84 0f       	add	r24, r20
    432c:	95 1f       	adc	r25, r21
    432e:	fc 01       	movw	r30, r24
    4330:	e3 56       	subi	r30, 0x63	; 99
    4332:	fd 4f       	sbci	r31, 0xFD	; 253
    4334:	80 81       	ld	r24, Z
    4336:	91 81       	ldd	r25, Z+1	; 0x01
    4338:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
						LCD_integerToString(alarms[(int)i].alarmDigits[3]);
    433c:	8f 85       	ldd	r24, Y+15	; 0x0f
    433e:	48 2f       	mov	r20, r24
    4340:	50 e0       	ldi	r21, 0x00	; 0
    4342:	ca 01       	movw	r24, r20
    4344:	88 0f       	add	r24, r24
    4346:	99 1f       	adc	r25, r25
    4348:	9c 01       	movw	r18, r24
    434a:	22 0f       	add	r18, r18
    434c:	33 1f       	adc	r19, r19
    434e:	22 0f       	add	r18, r18
    4350:	33 1f       	adc	r19, r19
    4352:	82 0f       	add	r24, r18
    4354:	93 1f       	adc	r25, r19
    4356:	84 0f       	add	r24, r20
    4358:	95 1f       	adc	r25, r21
    435a:	fc 01       	movw	r30, r24
    435c:	e1 56       	subi	r30, 0x61	; 97
    435e:	fd 4f       	sbci	r31, 0xFD	; 253
    4360:	80 81       	ld	r24, Z
    4362:	91 81       	ldd	r25, Z+1	; 0x01
    4364:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
			if(!(alarms[0].flag || alarms[1].flag || alarms[2].flag || alarms[3].flag)){
				LCD_displayString("no alarms are set yet");
				_delay_ms(1000);
				noAlarmsFlag = TRUE;
			} else{
				for(uint8 i =0 ; i<MaximumAlarms ; i++){
    4368:	8f 85       	ldd	r24, Y+15	; 0x0f
    436a:	8f 5f       	subi	r24, 0xFF	; 255
    436c:	8f 87       	std	Y+15, r24	; 0x0f
    436e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4370:	84 30       	cpi	r24, 0x04	; 4
    4372:	08 f4       	brcc	.+2      	; 0x4376 <App_listAlarm+0x286>
    4374:	73 cf       	rjmp	.-282    	; 0x425c <App_listAlarm+0x16c>
						LCD_integerToString(alarms[(int)i].alarmDigits[3]);
					}
				}
			}
		}
		lcd_row = 0;
    4376:	1a 8a       	std	Y+18, r1	; 0x12
	}while(alarmListChoiceCancel != '%' && !(noAlarmsFlag));
    4378:	89 89       	ldd	r24, Y+17	; 0x11
    437a:	85 32       	cpi	r24, 0x25	; 37
    437c:	21 f0       	breq	.+8      	; 0x4386 <App_listAlarm+0x296>
    437e:	88 89       	ldd	r24, Y+16	; 0x10
    4380:	88 23       	and	r24, r24
    4382:	09 f4       	brne	.+2      	; 0x4386 <App_listAlarm+0x296>
    4384:	d3 ce       	rjmp	.-602    	; 0x412c <App_listAlarm+0x3c>
}
    4386:	62 96       	adiw	r28, 0x12	; 18
    4388:	0f b6       	in	r0, 0x3f	; 63
    438a:	f8 94       	cli
    438c:	de bf       	out	0x3e, r29	; 62
    438e:	0f be       	out	0x3f, r0	; 63
    4390:	cd bf       	out	0x3d, r28	; 61
    4392:	cf 91       	pop	r28
    4394:	df 91       	pop	r29
    4396:	08 95       	ret

00004398 <App_cancelAlarm>:

void App_cancelAlarm(void){
    4398:	df 93       	push	r29
    439a:	cf 93       	push	r28
    439c:	cd b7       	in	r28, 0x3d	; 61
    439e:	de b7       	in	r29, 0x3e	; 62
    43a0:	a1 97       	sbiw	r28, 0x21	; 33
    43a2:	0f b6       	in	r0, 0x3f	; 63
    43a4:	f8 94       	cli
    43a6:	de bf       	out	0x3e, r29	; 62
    43a8:	0f be       	out	0x3f, r0	; 63
    43aa:	cd bf       	out	0x3d, r28	; 61
	uint8 chosenAlarm;
	uint8 lcd_row = 0;
    43ac:	18 a2       	std	Y+32, r1	; 0x20
	uint8 alarmChosenFlag = FALSE;
    43ae:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 cancelOrContinue = FALSE;
    43b0:	1e 8e       	std	Y+30, r1	; 0x1e
	LCD_clearScreen();
    43b2:	0e 94 41 1b 	call	0x3682	; 0x3682 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    43b6:	80 e0       	ldi	r24, 0x00	; 0
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("please choose:");
    43be:	82 ea       	ldi	r24, 0xA2	; 162
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	LCD_moveCursor(1,3);
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	63 e0       	ldi	r22, 0x03	; 3
    43ca:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("0.[continue]");
    43ce:	81 eb       	ldi	r24, 0xB1	; 177
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	LCD_moveCursor(2,3);
    43d6:	82 e0       	ldi	r24, 0x02	; 2
    43d8:	63 e0       	ldi	r22, 0x03	; 3
    43da:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
	LCD_displayString("%.[close]");
    43de:	8e eb       	ldi	r24, 0xBE	; 190
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
	cancelOrContinue = KEYPAD_getPressedKey();
    43e6:	0e 94 0e 1c 	call	0x381c	; 0x381c <GetPresseKey>
    43ea:	8e 8f       	std	Y+30, r24	; 0x1e
	if(cancelOrContinue == CONTINUE){
    43ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43ee:	88 23       	and	r24, r24
    43f0:	09 f0       	breq	.+2      	; 0x43f4 <App_cancelAlarm+0x5c>
    43f2:	87 c2       	rjmp	.+1294   	; 0x4902 <App_cancelAlarm+0x56a>
		if(!(alarms[0].flag || alarms[1].flag || alarms[2].flag || alarms[3].flag)){
    43f4:	80 91 98 02 	lds	r24, 0x0298
    43f8:	88 23       	and	r24, r24
    43fa:	09 f0       	breq	.+2      	; 0x43fe <App_cancelAlarm+0x66>
    43fc:	88 c0       	rjmp	.+272    	; 0x450e <App_cancelAlarm+0x176>
    43fe:	80 91 a3 02 	lds	r24, 0x02A3
    4402:	88 23       	and	r24, r24
    4404:	09 f0       	breq	.+2      	; 0x4408 <App_cancelAlarm+0x70>
    4406:	83 c0       	rjmp	.+262    	; 0x450e <App_cancelAlarm+0x176>
    4408:	80 91 ae 02 	lds	r24, 0x02AE
    440c:	88 23       	and	r24, r24
    440e:	09 f0       	breq	.+2      	; 0x4412 <App_cancelAlarm+0x7a>
    4410:	7e c0       	rjmp	.+252    	; 0x450e <App_cancelAlarm+0x176>
    4412:	80 91 b9 02 	lds	r24, 0x02B9
    4416:	88 23       	and	r24, r24
    4418:	09 f0       	breq	.+2      	; 0x441c <App_cancelAlarm+0x84>
    441a:	79 c0       	rjmp	.+242    	; 0x450e <App_cancelAlarm+0x176>
			LCD_clearScreen();
    441c:	0e 94 41 1b 	call	0x3682	; 0x3682 <LCD_clearScreen>
			LCD_displayString("no alarms are set");
    4420:	8c e1       	ldi	r24, 0x1C	; 28
    4422:	91 e0       	ldi	r25, 0x01	; 1
    4424:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
    4428:	80 e0       	ldi	r24, 0x00	; 0
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	aa e7       	ldi	r26, 0x7A	; 122
    442e:	b4 e4       	ldi	r27, 0x44	; 68
    4430:	89 8f       	std	Y+25, r24	; 0x19
    4432:	9a 8f       	std	Y+26, r25	; 0x1a
    4434:	ab 8f       	std	Y+27, r26	; 0x1b
    4436:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4438:	69 8d       	ldd	r22, Y+25	; 0x19
    443a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    443c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    443e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	4a e7       	ldi	r20, 0x7A	; 122
    4446:	53 e4       	ldi	r21, 0x43	; 67
    4448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444c:	dc 01       	movw	r26, r24
    444e:	cb 01       	movw	r24, r22
    4450:	8d 8b       	std	Y+21, r24	; 0x15
    4452:	9e 8b       	std	Y+22, r25	; 0x16
    4454:	af 8b       	std	Y+23, r26	; 0x17
    4456:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4458:	6d 89       	ldd	r22, Y+21	; 0x15
    445a:	7e 89       	ldd	r23, Y+22	; 0x16
    445c:	8f 89       	ldd	r24, Y+23	; 0x17
    445e:	98 8d       	ldd	r25, Y+24	; 0x18
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	40 e8       	ldi	r20, 0x80	; 128
    4466:	5f e3       	ldi	r21, 0x3F	; 63
    4468:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    446c:	88 23       	and	r24, r24
    446e:	2c f4       	brge	.+10     	; 0x447a <App_cancelAlarm+0xe2>
		__ticks = 1;
    4470:	81 e0       	ldi	r24, 0x01	; 1
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	9c 8b       	std	Y+20, r25	; 0x14
    4476:	8b 8b       	std	Y+19, r24	; 0x13
    4478:	3f c0       	rjmp	.+126    	; 0x44f8 <App_cancelAlarm+0x160>
	else if (__tmp > 65535)
    447a:	6d 89       	ldd	r22, Y+21	; 0x15
    447c:	7e 89       	ldd	r23, Y+22	; 0x16
    447e:	8f 89       	ldd	r24, Y+23	; 0x17
    4480:	98 8d       	ldd	r25, Y+24	; 0x18
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	3f ef       	ldi	r19, 0xFF	; 255
    4486:	4f e7       	ldi	r20, 0x7F	; 127
    4488:	57 e4       	ldi	r21, 0x47	; 71
    448a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    448e:	18 16       	cp	r1, r24
    4490:	4c f5       	brge	.+82     	; 0x44e4 <App_cancelAlarm+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4492:	69 8d       	ldd	r22, Y+25	; 0x19
    4494:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4496:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4498:	9c 8d       	ldd	r25, Y+28	; 0x1c
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	40 e2       	ldi	r20, 0x20	; 32
    44a0:	51 e4       	ldi	r21, 0x41	; 65
    44a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a6:	dc 01       	movw	r26, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	bc 01       	movw	r22, r24
    44ac:	cd 01       	movw	r24, r26
    44ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	9c 8b       	std	Y+20, r25	; 0x14
    44b8:	8b 8b       	std	Y+19, r24	; 0x13
    44ba:	0f c0       	rjmp	.+30     	; 0x44da <App_cancelAlarm+0x142>
    44bc:	89 e1       	ldi	r24, 0x19	; 25
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	9a 8b       	std	Y+18, r25	; 0x12
    44c2:	89 8b       	std	Y+17, r24	; 0x11
    44c4:	89 89       	ldd	r24, Y+17	; 0x11
    44c6:	9a 89       	ldd	r25, Y+18	; 0x12
    44c8:	01 97       	sbiw	r24, 0x01	; 1
    44ca:	f1 f7       	brne	.-4      	; 0x44c8 <App_cancelAlarm+0x130>
    44cc:	9a 8b       	std	Y+18, r25	; 0x12
    44ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d0:	8b 89       	ldd	r24, Y+19	; 0x13
    44d2:	9c 89       	ldd	r25, Y+20	; 0x14
    44d4:	01 97       	sbiw	r24, 0x01	; 1
    44d6:	9c 8b       	std	Y+20, r25	; 0x14
    44d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44da:	8b 89       	ldd	r24, Y+19	; 0x13
    44dc:	9c 89       	ldd	r25, Y+20	; 0x14
    44de:	00 97       	sbiw	r24, 0x00	; 0
    44e0:	69 f7       	brne	.-38     	; 0x44bc <App_cancelAlarm+0x124>
    44e2:	0f c2       	rjmp	.+1054   	; 0x4902 <App_cancelAlarm+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44e4:	6d 89       	ldd	r22, Y+21	; 0x15
    44e6:	7e 89       	ldd	r23, Y+22	; 0x16
    44e8:	8f 89       	ldd	r24, Y+23	; 0x17
    44ea:	98 8d       	ldd	r25, Y+24	; 0x18
    44ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f0:	dc 01       	movw	r26, r24
    44f2:	cb 01       	movw	r24, r22
    44f4:	9c 8b       	std	Y+20, r25	; 0x14
    44f6:	8b 8b       	std	Y+19, r24	; 0x13
    44f8:	8b 89       	ldd	r24, Y+19	; 0x13
    44fa:	9c 89       	ldd	r25, Y+20	; 0x14
    44fc:	98 8b       	std	Y+16, r25	; 0x10
    44fe:	8f 87       	std	Y+15, r24	; 0x0f
    4500:	8f 85       	ldd	r24, Y+15	; 0x0f
    4502:	98 89       	ldd	r25, Y+16	; 0x10
    4504:	01 97       	sbiw	r24, 0x01	; 1
    4506:	f1 f7       	brne	.-4      	; 0x4504 <App_cancelAlarm+0x16c>
    4508:	98 8b       	std	Y+16, r25	; 0x10
    450a:	8f 87       	std	Y+15, r24	; 0x0f
    450c:	fa c1       	rjmp	.+1012   	; 0x4902 <App_cancelAlarm+0x56a>
			_delay_ms(1000);
		} else{
			do{
				if(alarmChosenFlag){
    450e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4510:	88 23       	and	r24, r24
    4512:	09 f1       	breq	.+66     	; 0x4556 <App_cancelAlarm+0x1be>
					LCD_clearScreen();
    4514:	0e 94 41 1b 	call	0x3682	; 0x3682 <LCD_clearScreen>
					LCD_displayString("you chose a un valid");
    4518:	8e e2       	ldi	r24, 0x2E	; 46
    451a:	91 e0       	ldi	r25, 0x01	; 1
    451c:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
					LCD_moveCursor(1,8);
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	68 e0       	ldi	r22, 0x08	; 8
    4524:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
					LCD_displayString("ID");
    4528:	83 e4       	ldi	r24, 0x43	; 67
    452a:	91 e0       	ldi	r25, 0x01	; 1
    452c:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
					LCD_moveCursor(2,3);
    4530:	82 e0       	ldi	r24, 0x02	; 2
    4532:	63 e0       	ldi	r22, 0x03	; 3
    4534:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
					LCD_displayString("please choose:");
    4538:	82 ea       	ldi	r24, 0xA2	; 162
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
					LCD_moveCursor(3,0);
    4540:	83 e0       	ldi	r24, 0x03	; 3
    4542:	60 e0       	ldi	r22, 0x00	; 0
    4544:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
					LCD_displayString("0.[Yes]  %.[close]");
    4548:	86 e4       	ldi	r24, 0x46	; 70
    454a:	91 e0       	ldi	r25, 0x01	; 1
    454c:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
					cancelOrContinue = KEYPAD_getPressedKey();
    4550:	0e 94 0e 1c 	call	0x381c	; 0x381c <GetPresseKey>
    4554:	8e 8f       	std	Y+30, r24	; 0x1e
				} else{
					/* do nothing */
				}
				if(cancelOrContinue == CONTINUE){
    4556:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4558:	88 23       	and	r24, r24
    455a:	09 f0       	breq	.+2      	; 0x455e <App_cancelAlarm+0x1c6>
    455c:	b3 c0       	rjmp	.+358    	; 0x46c4 <App_cancelAlarm+0x32c>
					LCD_clearScreen();
    455e:	0e 94 41 1b 	call	0x3682	; 0x3682 <LCD_clearScreen>
					for(uint8 i =0 ; i<MaximumAlarms ; i++){
    4562:	1d 8e       	std	Y+29, r1	; 0x1d
    4564:	89 c0       	rjmp	.+274    	; 0x4678 <App_cancelAlarm+0x2e0>
						if(alarms[(int)i].flag){
    4566:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4568:	48 2f       	mov	r20, r24
    456a:	50 e0       	ldi	r21, 0x00	; 0
    456c:	ca 01       	movw	r24, r20
    456e:	88 0f       	add	r24, r24
    4570:	99 1f       	adc	r25, r25
    4572:	9c 01       	movw	r18, r24
    4574:	22 0f       	add	r18, r18
    4576:	33 1f       	adc	r19, r19
    4578:	22 0f       	add	r18, r18
    457a:	33 1f       	adc	r19, r19
    457c:	82 0f       	add	r24, r18
    457e:	93 1f       	adc	r25, r19
    4580:	84 0f       	add	r24, r20
    4582:	95 1f       	adc	r25, r21
    4584:	fc 01       	movw	r30, r24
    4586:	e8 56       	subi	r30, 0x68	; 104
    4588:	fd 4f       	sbci	r31, 0xFD	; 253
    458a:	80 81       	ld	r24, Z
    458c:	88 23       	and	r24, r24
    458e:	09 f4       	brne	.+2      	; 0x4592 <App_cancelAlarm+0x1fa>
    4590:	70 c0       	rjmp	.+224    	; 0x4672 <App_cancelAlarm+0x2da>
							LCD_moveCursor(lcd_row++ , 0);
    4592:	98 a1       	ldd	r25, Y+32	; 0x20
    4594:	88 a1       	ldd	r24, Y+32	; 0x20
    4596:	8f 5f       	subi	r24, 0xFF	; 255
    4598:	88 a3       	std	Y+32, r24	; 0x20
    459a:	89 2f       	mov	r24, r25
    459c:	60 e0       	ldi	r22, 0x00	; 0
    459e:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
							LCD_displayString("Alarm: ");
    45a2:	8f e0       	ldi	r24, 0x0F	; 15
    45a4:	91 e0       	ldi	r25, 0x01	; 1
    45a6:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
							LCD_integerToString(i);
    45aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45ac:	88 2f       	mov	r24, r24
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
							LCD_displayString(" -> ");
    45b4:	87 e1       	ldi	r24, 0x17	; 23
    45b6:	91 e0       	ldi	r25, 0x01	; 1
    45b8:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
							LCD_integerToString(alarms[(int)i].alarmDigits[0]);
    45bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45be:	48 2f       	mov	r20, r24
    45c0:	50 e0       	ldi	r21, 0x00	; 0
    45c2:	ca 01       	movw	r24, r20
    45c4:	88 0f       	add	r24, r24
    45c6:	99 1f       	adc	r25, r25
    45c8:	9c 01       	movw	r18, r24
    45ca:	22 0f       	add	r18, r18
    45cc:	33 1f       	adc	r19, r19
    45ce:	22 0f       	add	r18, r18
    45d0:	33 1f       	adc	r19, r19
    45d2:	82 0f       	add	r24, r18
    45d4:	93 1f       	adc	r25, r19
    45d6:	84 0f       	add	r24, r20
    45d8:	95 1f       	adc	r25, r21
    45da:	fc 01       	movw	r30, r24
    45dc:	e7 56       	subi	r30, 0x67	; 103
    45de:	fd 4f       	sbci	r31, 0xFD	; 253
    45e0:	80 81       	ld	r24, Z
    45e2:	91 81       	ldd	r25, Z+1	; 0x01
    45e4:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
							LCD_integerToString(alarms[(int)i].alarmDigits[1]);
    45e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45ea:	48 2f       	mov	r20, r24
    45ec:	50 e0       	ldi	r21, 0x00	; 0
    45ee:	ca 01       	movw	r24, r20
    45f0:	88 0f       	add	r24, r24
    45f2:	99 1f       	adc	r25, r25
    45f4:	9c 01       	movw	r18, r24
    45f6:	22 0f       	add	r18, r18
    45f8:	33 1f       	adc	r19, r19
    45fa:	22 0f       	add	r18, r18
    45fc:	33 1f       	adc	r19, r19
    45fe:	82 0f       	add	r24, r18
    4600:	93 1f       	adc	r25, r19
    4602:	84 0f       	add	r24, r20
    4604:	95 1f       	adc	r25, r21
    4606:	fc 01       	movw	r30, r24
    4608:	e5 56       	subi	r30, 0x65	; 101
    460a:	fd 4f       	sbci	r31, 0xFD	; 253
    460c:	80 81       	ld	r24, Z
    460e:	91 81       	ldd	r25, Z+1	; 0x01
    4610:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
							LCD_displayCharacter(':');
    4614:	8a e3       	ldi	r24, 0x3A	; 58
    4616:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_displayCharacter>
							LCD_integerToString(alarms[(int)i].alarmDigits[2]);
    461a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    461c:	48 2f       	mov	r20, r24
    461e:	50 e0       	ldi	r21, 0x00	; 0
    4620:	ca 01       	movw	r24, r20
    4622:	88 0f       	add	r24, r24
    4624:	99 1f       	adc	r25, r25
    4626:	9c 01       	movw	r18, r24
    4628:	22 0f       	add	r18, r18
    462a:	33 1f       	adc	r19, r19
    462c:	22 0f       	add	r18, r18
    462e:	33 1f       	adc	r19, r19
    4630:	82 0f       	add	r24, r18
    4632:	93 1f       	adc	r25, r19
    4634:	84 0f       	add	r24, r20
    4636:	95 1f       	adc	r25, r21
    4638:	fc 01       	movw	r30, r24
    463a:	e3 56       	subi	r30, 0x63	; 99
    463c:	fd 4f       	sbci	r31, 0xFD	; 253
    463e:	80 81       	ld	r24, Z
    4640:	91 81       	ldd	r25, Z+1	; 0x01
    4642:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
							LCD_integerToString(alarms[(int)i].alarmDigits[3]);
    4646:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4648:	48 2f       	mov	r20, r24
    464a:	50 e0       	ldi	r21, 0x00	; 0
    464c:	ca 01       	movw	r24, r20
    464e:	88 0f       	add	r24, r24
    4650:	99 1f       	adc	r25, r25
    4652:	9c 01       	movw	r18, r24
    4654:	22 0f       	add	r18, r18
    4656:	33 1f       	adc	r19, r19
    4658:	22 0f       	add	r18, r18
    465a:	33 1f       	adc	r19, r19
    465c:	82 0f       	add	r24, r18
    465e:	93 1f       	adc	r25, r19
    4660:	84 0f       	add	r24, r20
    4662:	95 1f       	adc	r25, r21
    4664:	fc 01       	movw	r30, r24
    4666:	e1 56       	subi	r30, 0x61	; 97
    4668:	fd 4f       	sbci	r31, 0xFD	; 253
    466a:	80 81       	ld	r24, Z
    466c:	91 81       	ldd	r25, Z+1	; 0x01
    466e:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
				} else{
					/* do nothing */
				}
				if(cancelOrContinue == CONTINUE){
					LCD_clearScreen();
					for(uint8 i =0 ; i<MaximumAlarms ; i++){
    4672:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4674:	8f 5f       	subi	r24, 0xFF	; 255
    4676:	8d 8f       	std	Y+29, r24	; 0x1d
    4678:	8d 8d       	ldd	r24, Y+29	; 0x1d
    467a:	84 30       	cpi	r24, 0x04	; 4
    467c:	08 f4       	brcc	.+2      	; 0x4680 <App_cancelAlarm+0x2e8>
    467e:	73 cf       	rjmp	.-282    	; 0x4566 <App_cancelAlarm+0x1ce>
							LCD_displayCharacter(':');
							LCD_integerToString(alarms[(int)i].alarmDigits[2]);
							LCD_integerToString(alarms[(int)i].alarmDigits[3]);
						}
					}
					LCD_moveCursor(0,17);
    4680:	80 e0       	ldi	r24, 0x00	; 0
    4682:	61 e1       	ldi	r22, 0x11	; 17
    4684:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
					LCD_displayCharacter('|');
    4688:	8c e7       	ldi	r24, 0x7C	; 124
    468a:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_displayCharacter>
					LCD_moveCursor(1,17);
    468e:	81 e0       	ldi	r24, 0x01	; 1
    4690:	61 e1       	ldi	r22, 0x11	; 17
    4692:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
					LCD_displayCharacter('|');
    4696:	8c e7       	ldi	r24, 0x7C	; 124
    4698:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_displayCharacter>
					LCD_moveCursor(2,17);
    469c:	82 e0       	ldi	r24, 0x02	; 2
    469e:	61 e1       	ldi	r22, 0x11	; 17
    46a0:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
					LCD_displayCharacter('|');
    46a4:	8c e7       	ldi	r24, 0x7C	; 124
    46a6:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_displayCharacter>
					LCD_moveCursor(3,17);
    46aa:	83 e0       	ldi	r24, 0x03	; 3
    46ac:	61 e1       	ldi	r22, 0x11	; 17
    46ae:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
					LCD_displayCharacter('|');
    46b2:	8c e7       	ldi	r24, 0x7C	; 124
    46b4:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_displayCharacter>
					chosenAlarm = KEYPAD_getPressedKey();
    46b8:	0e 94 0e 1c 	call	0x381c	; 0x381c <GetPresseKey>
    46bc:	89 a3       	std	Y+33, r24	; 0x21
					alarmChosenFlag = TRUE;
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	8f 8f       	std	Y+31, r24	; 0x1f
    46c2:	01 c0       	rjmp	.+2      	; 0x46c6 <App_cancelAlarm+0x32e>
				} else{
					alarmChosenFlag = FALSE;
    46c4:	1f 8e       	std	Y+31, r1	; 0x1f
				}
			}while((alarms[(int)chosenAlarm].flag == FALSE) &&
					(alarmChosenFlag == TRUE));
    46c6:	89 a1       	ldd	r24, Y+33	; 0x21
    46c8:	48 2f       	mov	r20, r24
    46ca:	50 e0       	ldi	r21, 0x00	; 0
    46cc:	ca 01       	movw	r24, r20
    46ce:	88 0f       	add	r24, r24
    46d0:	99 1f       	adc	r25, r25
    46d2:	9c 01       	movw	r18, r24
    46d4:	22 0f       	add	r18, r18
    46d6:	33 1f       	adc	r19, r19
    46d8:	22 0f       	add	r18, r18
    46da:	33 1f       	adc	r19, r19
    46dc:	82 0f       	add	r24, r18
    46de:	93 1f       	adc	r25, r19
    46e0:	84 0f       	add	r24, r20
    46e2:	95 1f       	adc	r25, r21
    46e4:	fc 01       	movw	r30, r24
    46e6:	e8 56       	subi	r30, 0x68	; 104
    46e8:	fd 4f       	sbci	r31, 0xFD	; 253
    46ea:	80 81       	ld	r24, Z
    46ec:	88 23       	and	r24, r24
    46ee:	21 f4       	brne	.+8      	; 0x46f8 <App_cancelAlarm+0x360>
    46f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46f2:	81 30       	cpi	r24, 0x01	; 1
    46f4:	09 f4       	brne	.+2      	; 0x46f8 <App_cancelAlarm+0x360>
    46f6:	0b cf       	rjmp	.-490    	; 0x450e <App_cancelAlarm+0x176>
			--g_alarm_cnt;
    46f8:	80 91 82 02 	lds	r24, 0x0282
    46fc:	81 50       	subi	r24, 0x01	; 1
    46fe:	80 93 82 02 	sts	0x0282, r24
			if(alarmChosenFlag == TRUE){
    4702:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4704:	81 30       	cpi	r24, 0x01	; 1
    4706:	09 f0       	breq	.+2      	; 0x470a <App_cancelAlarm+0x372>
    4708:	fc c0       	rjmp	.+504    	; 0x4902 <App_cancelAlarm+0x56a>
				alarms[(int)chosenAlarm].flag = FALSE;
    470a:	89 a1       	ldd	r24, Y+33	; 0x21
    470c:	48 2f       	mov	r20, r24
    470e:	50 e0       	ldi	r21, 0x00	; 0
    4710:	ca 01       	movw	r24, r20
    4712:	88 0f       	add	r24, r24
    4714:	99 1f       	adc	r25, r25
    4716:	9c 01       	movw	r18, r24
    4718:	22 0f       	add	r18, r18
    471a:	33 1f       	adc	r19, r19
    471c:	22 0f       	add	r18, r18
    471e:	33 1f       	adc	r19, r19
    4720:	82 0f       	add	r24, r18
    4722:	93 1f       	adc	r25, r19
    4724:	84 0f       	add	r24, r20
    4726:	95 1f       	adc	r25, r21
    4728:	fc 01       	movw	r30, r24
    472a:	e8 56       	subi	r30, 0x68	; 104
    472c:	fd 4f       	sbci	r31, 0xFD	; 253
    472e:	10 82       	st	Z, r1
				alarms[(int)chosenAlarm].alarmDigits[0] = 0;
    4730:	89 a1       	ldd	r24, Y+33	; 0x21
    4732:	48 2f       	mov	r20, r24
    4734:	50 e0       	ldi	r21, 0x00	; 0
    4736:	ca 01       	movw	r24, r20
    4738:	88 0f       	add	r24, r24
    473a:	99 1f       	adc	r25, r25
    473c:	9c 01       	movw	r18, r24
    473e:	22 0f       	add	r18, r18
    4740:	33 1f       	adc	r19, r19
    4742:	22 0f       	add	r18, r18
    4744:	33 1f       	adc	r19, r19
    4746:	82 0f       	add	r24, r18
    4748:	93 1f       	adc	r25, r19
    474a:	84 0f       	add	r24, r20
    474c:	95 1f       	adc	r25, r21
    474e:	fc 01       	movw	r30, r24
    4750:	e7 56       	subi	r30, 0x67	; 103
    4752:	fd 4f       	sbci	r31, 0xFD	; 253
    4754:	11 82       	std	Z+1, r1	; 0x01
    4756:	10 82       	st	Z, r1
				alarms[(int)chosenAlarm].alarmDigits[1] = 0;
    4758:	89 a1       	ldd	r24, Y+33	; 0x21
    475a:	48 2f       	mov	r20, r24
    475c:	50 e0       	ldi	r21, 0x00	; 0
    475e:	ca 01       	movw	r24, r20
    4760:	88 0f       	add	r24, r24
    4762:	99 1f       	adc	r25, r25
    4764:	9c 01       	movw	r18, r24
    4766:	22 0f       	add	r18, r18
    4768:	33 1f       	adc	r19, r19
    476a:	22 0f       	add	r18, r18
    476c:	33 1f       	adc	r19, r19
    476e:	82 0f       	add	r24, r18
    4770:	93 1f       	adc	r25, r19
    4772:	84 0f       	add	r24, r20
    4774:	95 1f       	adc	r25, r21
    4776:	fc 01       	movw	r30, r24
    4778:	e5 56       	subi	r30, 0x65	; 101
    477a:	fd 4f       	sbci	r31, 0xFD	; 253
    477c:	11 82       	std	Z+1, r1	; 0x01
    477e:	10 82       	st	Z, r1
				alarms[(int)chosenAlarm].alarmDigits[2] = 0;
    4780:	89 a1       	ldd	r24, Y+33	; 0x21
    4782:	48 2f       	mov	r20, r24
    4784:	50 e0       	ldi	r21, 0x00	; 0
    4786:	ca 01       	movw	r24, r20
    4788:	88 0f       	add	r24, r24
    478a:	99 1f       	adc	r25, r25
    478c:	9c 01       	movw	r18, r24
    478e:	22 0f       	add	r18, r18
    4790:	33 1f       	adc	r19, r19
    4792:	22 0f       	add	r18, r18
    4794:	33 1f       	adc	r19, r19
    4796:	82 0f       	add	r24, r18
    4798:	93 1f       	adc	r25, r19
    479a:	84 0f       	add	r24, r20
    479c:	95 1f       	adc	r25, r21
    479e:	fc 01       	movw	r30, r24
    47a0:	e3 56       	subi	r30, 0x63	; 99
    47a2:	fd 4f       	sbci	r31, 0xFD	; 253
    47a4:	11 82       	std	Z+1, r1	; 0x01
    47a6:	10 82       	st	Z, r1
				alarms[(int)chosenAlarm].alarmDigits[3] = 0;
    47a8:	89 a1       	ldd	r24, Y+33	; 0x21
    47aa:	48 2f       	mov	r20, r24
    47ac:	50 e0       	ldi	r21, 0x00	; 0
    47ae:	ca 01       	movw	r24, r20
    47b0:	88 0f       	add	r24, r24
    47b2:	99 1f       	adc	r25, r25
    47b4:	9c 01       	movw	r18, r24
    47b6:	22 0f       	add	r18, r18
    47b8:	33 1f       	adc	r19, r19
    47ba:	22 0f       	add	r18, r18
    47bc:	33 1f       	adc	r19, r19
    47be:	82 0f       	add	r24, r18
    47c0:	93 1f       	adc	r25, r19
    47c2:	84 0f       	add	r24, r20
    47c4:	95 1f       	adc	r25, r21
    47c6:	fc 01       	movw	r30, r24
    47c8:	e1 56       	subi	r30, 0x61	; 97
    47ca:	fd 4f       	sbci	r31, 0xFD	; 253
    47cc:	11 82       	std	Z+1, r1	; 0x01
    47ce:	10 82       	st	Z, r1
				alarms[(int)chosenAlarm].secCnt = 0;
    47d0:	89 a1       	ldd	r24, Y+33	; 0x21
    47d2:	48 2f       	mov	r20, r24
    47d4:	50 e0       	ldi	r21, 0x00	; 0
    47d6:	ca 01       	movw	r24, r20
    47d8:	88 0f       	add	r24, r24
    47da:	99 1f       	adc	r25, r25
    47dc:	9c 01       	movw	r18, r24
    47de:	22 0f       	add	r18, r18
    47e0:	33 1f       	adc	r19, r19
    47e2:	22 0f       	add	r18, r18
    47e4:	33 1f       	adc	r19, r19
    47e6:	82 0f       	add	r24, r18
    47e8:	93 1f       	adc	r25, r19
    47ea:	84 0f       	add	r24, r20
    47ec:	95 1f       	adc	r25, r21
    47ee:	fc 01       	movw	r30, r24
    47f0:	ef 55       	subi	r30, 0x5F	; 95
    47f2:	fd 4f       	sbci	r31, 0xFD	; 253
    47f4:	11 82       	std	Z+1, r1	; 0x01
    47f6:	10 82       	st	Z, r1
				LCD_clearScreen();
    47f8:	0e 94 41 1b 	call	0x3682	; 0x3682 <LCD_clearScreen>
				LCD_moveCursor(1,0);
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	60 e0       	ldi	r22, 0x00	; 0
    4800:	0e 94 4b 1b 	call	0x3696	; 0x3696 <LCD_moveCursor>
				LCD_displayString("alarm ");
    4804:	89 e5       	ldi	r24, 0x59	; 89
    4806:	91 e0       	ldi	r25, 0x01	; 1
    4808:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
				LCD_integerToString((int)chosenAlarm);
    480c:	89 a1       	ldd	r24, Y+33	; 0x21
    480e:	88 2f       	mov	r24, r24
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LCD_integerToString>
				LCD_displayString(" is cancelled");
    4816:	80 e6       	ldi	r24, 0x60	; 96
    4818:	91 e0       	ldi	r25, 0x01	; 1
    481a:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCD_displayString>
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	aa ef       	ldi	r26, 0xFA	; 250
    4824:	b4 e4       	ldi	r27, 0x44	; 68
    4826:	8b 87       	std	Y+11, r24	; 0x0b
    4828:	9c 87       	std	Y+12, r25	; 0x0c
    482a:	ad 87       	std	Y+13, r26	; 0x0d
    482c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    482e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4830:	7c 85       	ldd	r23, Y+12	; 0x0c
    4832:	8d 85       	ldd	r24, Y+13	; 0x0d
    4834:	9e 85       	ldd	r25, Y+14	; 0x0e
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	4a e7       	ldi	r20, 0x7A	; 122
    483c:	53 e4       	ldi	r21, 0x43	; 67
    483e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4842:	dc 01       	movw	r26, r24
    4844:	cb 01       	movw	r24, r22
    4846:	8f 83       	std	Y+7, r24	; 0x07
    4848:	98 87       	std	Y+8, r25	; 0x08
    484a:	a9 87       	std	Y+9, r26	; 0x09
    484c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    484e:	6f 81       	ldd	r22, Y+7	; 0x07
    4850:	78 85       	ldd	r23, Y+8	; 0x08
    4852:	89 85       	ldd	r24, Y+9	; 0x09
    4854:	9a 85       	ldd	r25, Y+10	; 0x0a
    4856:	20 e0       	ldi	r18, 0x00	; 0
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	40 e8       	ldi	r20, 0x80	; 128
    485c:	5f e3       	ldi	r21, 0x3F	; 63
    485e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4862:	88 23       	and	r24, r24
    4864:	2c f4       	brge	.+10     	; 0x4870 <App_cancelAlarm+0x4d8>
		__ticks = 1;
    4866:	81 e0       	ldi	r24, 0x01	; 1
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	9e 83       	std	Y+6, r25	; 0x06
    486c:	8d 83       	std	Y+5, r24	; 0x05
    486e:	3f c0       	rjmp	.+126    	; 0x48ee <App_cancelAlarm+0x556>
	else if (__tmp > 65535)
    4870:	6f 81       	ldd	r22, Y+7	; 0x07
    4872:	78 85       	ldd	r23, Y+8	; 0x08
    4874:	89 85       	ldd	r24, Y+9	; 0x09
    4876:	9a 85       	ldd	r25, Y+10	; 0x0a
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	3f ef       	ldi	r19, 0xFF	; 255
    487c:	4f e7       	ldi	r20, 0x7F	; 127
    487e:	57 e4       	ldi	r21, 0x47	; 71
    4880:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4884:	18 16       	cp	r1, r24
    4886:	4c f5       	brge	.+82     	; 0x48da <App_cancelAlarm+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4888:	6b 85       	ldd	r22, Y+11	; 0x0b
    488a:	7c 85       	ldd	r23, Y+12	; 0x0c
    488c:	8d 85       	ldd	r24, Y+13	; 0x0d
    488e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	40 e2       	ldi	r20, 0x20	; 32
    4896:	51 e4       	ldi	r21, 0x41	; 65
    4898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489c:	dc 01       	movw	r26, r24
    489e:	cb 01       	movw	r24, r22
    48a0:	bc 01       	movw	r22, r24
    48a2:	cd 01       	movw	r24, r26
    48a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a8:	dc 01       	movw	r26, r24
    48aa:	cb 01       	movw	r24, r22
    48ac:	9e 83       	std	Y+6, r25	; 0x06
    48ae:	8d 83       	std	Y+5, r24	; 0x05
    48b0:	0f c0       	rjmp	.+30     	; 0x48d0 <App_cancelAlarm+0x538>
    48b2:	89 e1       	ldi	r24, 0x19	; 25
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	9c 83       	std	Y+4, r25	; 0x04
    48b8:	8b 83       	std	Y+3, r24	; 0x03
    48ba:	8b 81       	ldd	r24, Y+3	; 0x03
    48bc:	9c 81       	ldd	r25, Y+4	; 0x04
    48be:	01 97       	sbiw	r24, 0x01	; 1
    48c0:	f1 f7       	brne	.-4      	; 0x48be <App_cancelAlarm+0x526>
    48c2:	9c 83       	std	Y+4, r25	; 0x04
    48c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c6:	8d 81       	ldd	r24, Y+5	; 0x05
    48c8:	9e 81       	ldd	r25, Y+6	; 0x06
    48ca:	01 97       	sbiw	r24, 0x01	; 1
    48cc:	9e 83       	std	Y+6, r25	; 0x06
    48ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48d0:	8d 81       	ldd	r24, Y+5	; 0x05
    48d2:	9e 81       	ldd	r25, Y+6	; 0x06
    48d4:	00 97       	sbiw	r24, 0x00	; 0
    48d6:	69 f7       	brne	.-38     	; 0x48b2 <App_cancelAlarm+0x51a>
    48d8:	14 c0       	rjmp	.+40     	; 0x4902 <App_cancelAlarm+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48da:	6f 81       	ldd	r22, Y+7	; 0x07
    48dc:	78 85       	ldd	r23, Y+8	; 0x08
    48de:	89 85       	ldd	r24, Y+9	; 0x09
    48e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e6:	dc 01       	movw	r26, r24
    48e8:	cb 01       	movw	r24, r22
    48ea:	9e 83       	std	Y+6, r25	; 0x06
    48ec:	8d 83       	std	Y+5, r24	; 0x05
    48ee:	8d 81       	ldd	r24, Y+5	; 0x05
    48f0:	9e 81       	ldd	r25, Y+6	; 0x06
    48f2:	9a 83       	std	Y+2, r25	; 0x02
    48f4:	89 83       	std	Y+1, r24	; 0x01
    48f6:	89 81       	ldd	r24, Y+1	; 0x01
    48f8:	9a 81       	ldd	r25, Y+2	; 0x02
    48fa:	01 97       	sbiw	r24, 0x01	; 1
    48fc:	f1 f7       	brne	.-4      	; 0x48fa <App_cancelAlarm+0x562>
    48fe:	9a 83       	std	Y+2, r25	; 0x02
    4900:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2000);
			}
		}
	}
}
    4902:	a1 96       	adiw	r28, 0x21	; 33
    4904:	0f b6       	in	r0, 0x3f	; 63
    4906:	f8 94       	cli
    4908:	de bf       	out	0x3e, r29	; 62
    490a:	0f be       	out	0x3f, r0	; 63
    490c:	cd bf       	out	0x3d, r28	; 61
    490e:	cf 91       	pop	r28
    4910:	df 91       	pop	r29
    4912:	08 95       	ret

00004914 <App_main>:


void App_main(void){
    4914:	df 93       	push	r29
    4916:	cf 93       	push	r28
    4918:	0f 92       	push	r0
    491a:	cd b7       	in	r28, 0x3d	; 61
    491c:	de b7       	in	r29, 0x3e	; 62
	uint8 mainMenuChoice = FALSE;
    491e:	19 82       	std	Y+1, r1	; 0x01
	App_mainMenu();
    4920:	0e 94 77 1d 	call	0x3aee	; 0x3aee <App_mainMenu>
	do{
		mainMenuChoice = KEYPAD_getPressedKey();
    4924:	0e 94 0e 1c 	call	0x381c	; 0x381c <GetPresseKey>
    4928:	89 83       	std	Y+1, r24	; 0x01
	} while(!(mainMenuChoice == SET_ALARM_CHOICE ||
			mainMenuChoice == CANCEL_ALARM_CHOICE ||
			mainMenuChoice == ALARM_LIST_CHOICE));
    492a:	89 81       	ldd	r24, Y+1	; 0x01
    492c:	8b 32       	cpi	r24, 0x2B	; 43
    492e:	31 f0       	breq	.+12     	; 0x493c <App_main+0x28>
    4930:	89 81       	ldd	r24, Y+1	; 0x01
    4932:	8d 32       	cpi	r24, 0x2D	; 45
    4934:	19 f0       	breq	.+6      	; 0x493c <App_main+0x28>
    4936:	89 81       	ldd	r24, Y+1	; 0x01
    4938:	8a 32       	cpi	r24, 0x2A	; 42
    493a:	a1 f7       	brne	.-24     	; 0x4924 <App_main+0x10>
	if(mainMenuChoice == SET_ALARM_CHOICE){
    493c:	89 81       	ldd	r24, Y+1	; 0x01
    493e:	8b 32       	cpi	r24, 0x2B	; 43
    4940:	19 f4       	brne	.+6      	; 0x4948 <App_main+0x34>
		App_setAlarm();
    4942:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <App_setAlarm>
    4946:	0b c0       	rjmp	.+22     	; 0x495e <App_main+0x4a>
	} else if(mainMenuChoice == CANCEL_ALARM_CHOICE){
    4948:	89 81       	ldd	r24, Y+1	; 0x01
    494a:	8d 32       	cpi	r24, 0x2D	; 45
    494c:	19 f4       	brne	.+6      	; 0x4954 <App_main+0x40>
		App_cancelAlarm();
    494e:	0e 94 cc 21 	call	0x4398	; 0x4398 <App_cancelAlarm>
    4952:	05 c0       	rjmp	.+10     	; 0x495e <App_main+0x4a>
	} else if(mainMenuChoice == ALARM_LIST_CHOICE){
    4954:	89 81       	ldd	r24, Y+1	; 0x01
    4956:	8a 32       	cpi	r24, 0x2A	; 42
    4958:	11 f4       	brne	.+4      	; 0x495e <App_main+0x4a>
		App_listAlarm();
    495a:	0e 94 78 20 	call	0x40f0	; 0x40f0 <App_listAlarm>
	} else{
		/* do nothing */
	}
}
    495e:	0f 90       	pop	r0
    4960:	cf 91       	pop	r28
    4962:	df 91       	pop	r29
    4964:	08 95       	ret

00004966 <main>:
 * Team: Metaware
 * */

#include "App.h"

int main(){
    4966:	df 93       	push	r29
    4968:	cf 93       	push	r28
    496a:	cd b7       	in	r28, 0x3d	; 61
    496c:	de b7       	in	r29, 0x3e	; 62
	App_init();
    496e:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <App_init>
	while(TRUE){
		App_main();
    4972:	0e 94 8a 24 	call	0x4914	; 0x4914 <App_main>
    4976:	fd cf       	rjmp	.-6      	; 0x4972 <main+0xc>

00004978 <__prologue_saves__>:
    4978:	2f 92       	push	r2
    497a:	3f 92       	push	r3
    497c:	4f 92       	push	r4
    497e:	5f 92       	push	r5
    4980:	6f 92       	push	r6
    4982:	7f 92       	push	r7
    4984:	8f 92       	push	r8
    4986:	9f 92       	push	r9
    4988:	af 92       	push	r10
    498a:	bf 92       	push	r11
    498c:	cf 92       	push	r12
    498e:	df 92       	push	r13
    4990:	ef 92       	push	r14
    4992:	ff 92       	push	r15
    4994:	0f 93       	push	r16
    4996:	1f 93       	push	r17
    4998:	cf 93       	push	r28
    499a:	df 93       	push	r29
    499c:	cd b7       	in	r28, 0x3d	; 61
    499e:	de b7       	in	r29, 0x3e	; 62
    49a0:	ca 1b       	sub	r28, r26
    49a2:	db 0b       	sbc	r29, r27
    49a4:	0f b6       	in	r0, 0x3f	; 63
    49a6:	f8 94       	cli
    49a8:	de bf       	out	0x3e, r29	; 62
    49aa:	0f be       	out	0x3f, r0	; 63
    49ac:	cd bf       	out	0x3d, r28	; 61
    49ae:	09 94       	ijmp

000049b0 <__epilogue_restores__>:
    49b0:	2a 88       	ldd	r2, Y+18	; 0x12
    49b2:	39 88       	ldd	r3, Y+17	; 0x11
    49b4:	48 88       	ldd	r4, Y+16	; 0x10
    49b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    49b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    49ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    49bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    49be:	9b 84       	ldd	r9, Y+11	; 0x0b
    49c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    49c2:	b9 84       	ldd	r11, Y+9	; 0x09
    49c4:	c8 84       	ldd	r12, Y+8	; 0x08
    49c6:	df 80       	ldd	r13, Y+7	; 0x07
    49c8:	ee 80       	ldd	r14, Y+6	; 0x06
    49ca:	fd 80       	ldd	r15, Y+5	; 0x05
    49cc:	0c 81       	ldd	r16, Y+4	; 0x04
    49ce:	1b 81       	ldd	r17, Y+3	; 0x03
    49d0:	aa 81       	ldd	r26, Y+2	; 0x02
    49d2:	b9 81       	ldd	r27, Y+1	; 0x01
    49d4:	ce 0f       	add	r28, r30
    49d6:	d1 1d       	adc	r29, r1
    49d8:	0f b6       	in	r0, 0x3f	; 63
    49da:	f8 94       	cli
    49dc:	de bf       	out	0x3e, r29	; 62
    49de:	0f be       	out	0x3f, r0	; 63
    49e0:	cd bf       	out	0x3d, r28	; 61
    49e2:	ed 01       	movw	r28, r26
    49e4:	08 95       	ret

000049e6 <itoa>:
    49e6:	fb 01       	movw	r30, r22
    49e8:	9f 01       	movw	r18, r30
    49ea:	e8 94       	clt
    49ec:	42 30       	cpi	r20, 0x02	; 2
    49ee:	c4 f0       	brlt	.+48     	; 0x4a20 <itoa+0x3a>
    49f0:	45 32       	cpi	r20, 0x25	; 37
    49f2:	b4 f4       	brge	.+44     	; 0x4a20 <itoa+0x3a>
    49f4:	4a 30       	cpi	r20, 0x0A	; 10
    49f6:	29 f4       	brne	.+10     	; 0x4a02 <itoa+0x1c>
    49f8:	97 fb       	bst	r25, 7
    49fa:	1e f4       	brtc	.+6      	; 0x4a02 <itoa+0x1c>
    49fc:	90 95       	com	r25
    49fe:	81 95       	neg	r24
    4a00:	9f 4f       	sbci	r25, 0xFF	; 255
    4a02:	64 2f       	mov	r22, r20
    4a04:	77 27       	eor	r23, r23
    4a06:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__udivmodhi4>
    4a0a:	80 5d       	subi	r24, 0xD0	; 208
    4a0c:	8a 33       	cpi	r24, 0x3A	; 58
    4a0e:	0c f0       	brlt	.+2      	; 0x4a12 <itoa+0x2c>
    4a10:	89 5d       	subi	r24, 0xD9	; 217
    4a12:	81 93       	st	Z+, r24
    4a14:	cb 01       	movw	r24, r22
    4a16:	00 97       	sbiw	r24, 0x00	; 0
    4a18:	a1 f7       	brne	.-24     	; 0x4a02 <itoa+0x1c>
    4a1a:	16 f4       	brtc	.+4      	; 0x4a20 <itoa+0x3a>
    4a1c:	5d e2       	ldi	r21, 0x2D	; 45
    4a1e:	51 93       	st	Z+, r21
    4a20:	10 82       	st	Z, r1
    4a22:	c9 01       	movw	r24, r18
    4a24:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <strrev>

00004a28 <strrev>:
    4a28:	dc 01       	movw	r26, r24
    4a2a:	fc 01       	movw	r30, r24
    4a2c:	67 2f       	mov	r22, r23
    4a2e:	71 91       	ld	r23, Z+
    4a30:	77 23       	and	r23, r23
    4a32:	e1 f7       	brne	.-8      	; 0x4a2c <strrev+0x4>
    4a34:	32 97       	sbiw	r30, 0x02	; 2
    4a36:	04 c0       	rjmp	.+8      	; 0x4a40 <strrev+0x18>
    4a38:	7c 91       	ld	r23, X
    4a3a:	6d 93       	st	X+, r22
    4a3c:	70 83       	st	Z, r23
    4a3e:	62 91       	ld	r22, -Z
    4a40:	ae 17       	cp	r26, r30
    4a42:	bf 07       	cpc	r27, r31
    4a44:	c8 f3       	brcs	.-14     	; 0x4a38 <strrev+0x10>
    4a46:	08 95       	ret

00004a48 <__udivmodhi4>:
    4a48:	aa 1b       	sub	r26, r26
    4a4a:	bb 1b       	sub	r27, r27
    4a4c:	51 e1       	ldi	r21, 0x11	; 17
    4a4e:	07 c0       	rjmp	.+14     	; 0x4a5e <__udivmodhi4_ep>

00004a50 <__udivmodhi4_loop>:
    4a50:	aa 1f       	adc	r26, r26
    4a52:	bb 1f       	adc	r27, r27
    4a54:	a6 17       	cp	r26, r22
    4a56:	b7 07       	cpc	r27, r23
    4a58:	10 f0       	brcs	.+4      	; 0x4a5e <__udivmodhi4_ep>
    4a5a:	a6 1b       	sub	r26, r22
    4a5c:	b7 0b       	sbc	r27, r23

00004a5e <__udivmodhi4_ep>:
    4a5e:	88 1f       	adc	r24, r24
    4a60:	99 1f       	adc	r25, r25
    4a62:	5a 95       	dec	r21
    4a64:	a9 f7       	brne	.-22     	; 0x4a50 <__udivmodhi4_loop>
    4a66:	80 95       	com	r24
    4a68:	90 95       	com	r25
    4a6a:	bc 01       	movw	r22, r24
    4a6c:	cd 01       	movw	r24, r26
    4a6e:	08 95       	ret

00004a70 <_exit>:
    4a70:	f8 94       	cli

00004a72 <__stop_program>:
    4a72:	ff cf       	rjmp	.-2      	; 0x4a72 <__stop_program>
